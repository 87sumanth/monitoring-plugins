#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html


__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020010701'

DESCRIPTION = 'This plugin checks the clock offset with the ntp server.'

systemctl_command = 'systemctl is-active --quiet {service}' # ntpd / chronyd
command_installed = 'command -v {program}'                  # ntpq / chronyc

ntpq_command = 'ntpq -p'
chronyc_command = 'chronyc tracking'

DEFAULT_WARN = 500
DEFAULT_CRIT = 1000


#====================
import argparse

from lib.globals import *
from lib.utils import execute_command
from lib.output import unpack_perfdata


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('-w', '--warning',
        help='Set the warning threshold for the ntp time offset, in ms. Default: %(default)sms',
        dest='WARN',
        type = int,
        default = DEFAULT_WARN,
        )

    parser.add_argument('-c', '--critical',
        help='Set the critical threshold for the ntp time offset, in ms. Default: %(default)sms',
        dest='CRIT',
        type = int,
        default = DEFAULT_CRIT,
        )
    
    return parser.parse_args()


def main():
    try:
        parsed = parse_args()
    except:
        exit(STATE_UNKNOWN)

    WARN = parsed.WARN
    CRIT = parsed.CRIT

    # execute the shell command and return its result and exit code
    formatted_systemctl_command = systemctl_command.format(service='ntpd')
    stdout, stderr, retc = execute_command(formatted_systemctl_command)
    if (stderr):
        print('Bash command `{}` failed.'.format(formatted_systemctl_command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)
    ntpd_present = True if retc == 0 else False

    # execute the shell command and return its result and exit code
    formatted_systemctl_command = systemctl_command.format(service='chronyd')
    stdout, stderr, retc = execute_command(formatted_systemctl_command)
    if (stderr):
        print('Bash command `{}` failed.'.format(formatted_systemctl_command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)

    chronyd_present = True if retc == 0 else False

    if ntpd_present == False and chronyd_present == False:
        print('neither ntpd nor chronyd found.')
        exit(STATE_UNKNOWN)

    if ntpd_present:
        formatted_command_installed = command_installed.format(program='ntpq')
        # check if shell command is available
        stdout, stderr, retc = execute_command(formatted_command_installed)
        if (retc != 0):
            print('"ntpq" is missing. On CentOS, use "yum install todo".')
            exit(STATE_UNKNOWN)

        # execute the shell command and return its result and exit code
        stdout, stderr, retc = execute_command(ntpq_command)
        if (stderr): # todo check retc?
            print('Bash command `{}` failed.'.format(ntpq_command))
            print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
            exit(STATE_UNKNOWN)
        result = stdout

        ntp_server_found = False
        for line in result.splitlines():
            line = line.strip()
            if line.startswith('*'):
                ntp_server_found = True
                line = line[1:].split()  # remove '*' and split
                ntp_server = line[0]
                offset = float(line[8])
                stratum = int(line[2])

        if not ntp_server_found:
            print('No NTP server used.')
            exit(STATE_UNKNOWN)

        result += '\nAddress of the remote peer, the reference ID (0.0.0.0 if this is unknown), the stratum of the remote peer, the type of the peer (local, unicast, multicast or broadcast), when the last packet was received, the polling interval in seconds, the reachability register in octal, and the current estimated delay, offset and dispersion of the peer, all in milliseconds.' # todo: move this to the icinga help text. this cloggs up the icinga database for no reason


    if chronyd_present:
        formatted_command_installed = command_installed.format(program='chronyc')
        # check if shell command is available
        stdout, stderr, retc = execute_command(formatted_command_installed)
        if (retc != 0):
            print('"chronyc" is missing. On CentOS, use "yum install todo".')
            exit(STATE_UNKNOWN)

        # execute the shell command and return its result and exit code
        stdout, stderr, retc = execute_command(chronyc_command)
        if (stderr): # todo check retc?
            print('Bash command `{}` failed.'.format(chronyc_command))
            print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
            exit(STATE_UNKNOWN)
        result = stdout

        for line in result.splitlines():
            line = line.strip()
            if line.startswith('Reference ID'):
                ntp_server = line[line.find("(")+1:line.find(")")] # extract text in () using string splicing
                continue

            if line.startswith('Last offset'):
                offset = float(line.split()[-2]) * 1000
                continue

            if line.startswith('Stratum'):
                stratum = int(line.split()[-1])
                continue

    if ntp_server == '':
        print('No NTP server used.')
        exit(STATE_UNKNOWN)

    if ntp_server == 'LOCAL':
        print('No NTP server configured.')
        exit(STATE_UNKNOWN)

    perfdata = unpack_perfdata('offset', offset, 'ms', WARN, CRIT, None, None)

    if abs(offset) >= CRIT:
        msg = 'NTP offset to low/high. Offset is {0}ms, abs(thresholds) are {1}/{2}ms.'.format(offset, WARN, CRIT)
        print(msg.strip() + '\n\n' + result + '|' + perfdata.strip())
        exit(STATE_CRIT)

    if abs(offset) >= WARN:
        msg = 'NTP offset to low/high. Offset is {0}ms, abs(thresholds) are {1}/{2}ms.'.format(offset, WARN, crit)
        print(msg.strip() + '\n\n' + result + '|' + perfdata.strip())
        exit(STATE_WARN)

    if stratum >= 9:
        msg = 'Stratum {0} is >= 9. NTP offset {1}, abs(thresholds) are {2}/{3}ms.'.format(stratum, offset, WARN, CRIT)
        print(msg.strip() + '\n\n' + result + '|' + perfdata.strip())
        exit(STATE_WARN)

    msg = 'NTP offset is {0}ms (Stratum {1}).'.format(offset, stratum)
    print(msg.strip() + '\n\n' + result + '|' + perfdata.strip())
    exit(STATE_OK)

main()
