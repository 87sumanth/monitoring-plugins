#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019120604'

DESCRIPTION         = 'Checks the IPMI System Event Log (SEL) and returns WARN if there are entries. Use "ipmitool sel clear" to clear the IPMI System Event Log (SEL).'

command_installed   = 'command -v ipmitool'
command_cmd         = 'ipmitool sel elist'
# command_cmd         = 'cat examples/EXAMPLE01'


#====================

import argparse

from lib.globals import *
from lib.utils import execute_command


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # check if shell command is available
    stdout, stderr, retc = execute_command(command_installed)
    if (retc != 0):
        print('`ipmitool` is missing. On CentOS, use `yum install ipmitool`.')
        exit(STATE_UNKNOWN)

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(command_cmd)
    if (retc != 0):
        print('Bash command `{}` failed.'.format(command_cmd))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)

    # everything is ok
    if 'SEL has no entries' in stderr:
        print('Everything is ok.')
        exit(STATE_OK)

    # there are entries, so we have to throw a warning about that
    msg = ''
    for line in stdout.splitlines():
        msg += '* ' + line.replace('|', ';') + '\n'

    print(msg.strip())
    exit(STATE_WARN)


if __name__ == '__main__':
    main()
