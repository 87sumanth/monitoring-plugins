#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020022101'

DESCRIPTION = 'Tell how long the system has been running.'

DEFAULT_WARN = 180     # days
DEFAULT_CRIT = 366     # days


#====================
from lib.globals import *

import argparse
from traceback import print_exc
try:
    import psutil
except ImportError, e:
    print('Python module "psutil" is not installed. Try `yum -y install epel-release;yum -y install python2-psutil`.')
    exit(STATE_UNKNOWN)
import time

from lib.output import seconds2human, unpack_perfdata
from lib.parse_arguments import int_or_None
from lib.parse_input import evaluate_greater


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-c', '--critical',
        help = 'Set the critical threshold for uptime in days. Default: %(default)s',
        dest = 'CRIT',
        type = int_or_None,
        default = DEFAULT_CRIT,
        )

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold for uptime in days. Default: %(default)s',
        dest = 'WARN',
        type = int,
        default = DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    if parsed.CRIT is None:
        CRIT = None
    else:
        CRIT = parsed.CRIT*24*60*60

    if parsed.WARN is None:
        WARN = None
    else:
        WARN = parsed.WARN*24*60*60

    seconds_elapsed = time.time() - psutil.boot_time()

    msg = ''
    perfdata = ''

    state = evaluate_greater(seconds_elapsed, WARN, CRIT)

    msg += 'Up {}'.format(seconds2human(seconds_elapsed))
    perfdata += unpack_perfdata('uptime', seconds_elapsed, 's', WARN, CRIT, 0, None)

    # over and out
    print(msg.strip() + '|' + perfdata.strip())
    exit(state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
