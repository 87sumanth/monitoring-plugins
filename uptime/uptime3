#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import argparse
import sys
from traceback import print_exc

import lib3.args
import lib3.base
from lib3.globals import STATE_UNKNOWN

try:
    import psutil
except ImportError as e:
    print('Python module "psutil" is not installed.')
    sys.exit(STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020101601'

DESCRIPTION = 'Tell how long the system has been running.'

DEFAULT_WARN = 180     # days
DEFAULT_CRIT = 366     # days


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical threshold for uptime in days. Default: %(default)s',
        dest='CRIT',
        type=lib3.args.int_or_none,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning threshold for uptime in days. Default: %(default)s',
        dest='WARN',
        type=lib3.args.int_or_none,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if args.CRIT is None:
        CRIT = None
    else:
        CRIT = args.CRIT*24*60*60

    if args.WARN is None:
        WARN = None
    else:
        WARN = args.WARN*24*60*60

    delta = lib3.base.now() - psutil.boot_time()

    msg = 'Up {}'.format(lib3.base.seconds2human(delta))
    perfdata = lib3.base.get_perfdata('uptime', delta, 's', WARN, CRIT, 0, None)
    state = lib3.base.get_state(delta, WARN, CRIT)

    lib3.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
