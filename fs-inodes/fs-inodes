#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020012801'

DESCRIPTION = 'Checks the used inode space in percent, default on "/", "/tmp" and "/boot".'

DEFAULT_WARN  = 90
DEFAULT_CRIT  = 95
DEFAULT_MOUNT = '/, /tmp, /boot'

#====================
import argparse
import os

from lib.globals import *
from lib.output import bytes2human, unpack_perfdata


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-c', '--critical',
        help = 'Set the critical threshold inode usage percentage. Default: %(default)s',
        dest = 'CRIT',
        type = float,
        default = DEFAULT_CRIT,
        )
    parser.add_argument('--mount',
        help = 'The mount point. Default: "%(default)s"',
        dest = 'MOUNT',
        type = lambda s: [str(item).strip() for item in s.split(',')],
        default = DEFAULT_MOUNT,
        )
    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )
    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold inode usage percentage. Default: %(default)s',
        dest = 'WARN',
        type = float,
        default = DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    msg = ''
    perfdata = ''
    state = STATE_OK

    for mount in parsed.MOUNT:
        try:
            st = os.statvfs(mount)
            inodes_total = float(st.f_files)
            inodes_free = float(st.f_ffree)
            inodes_used = round((inodes_total - inodes_free) / inodes_total * 100, 1)

            msg += '{} {}%, '.format(mount, inodes_used)
            perfdata += unpack_perfdata(mount, inodes_used, '%', parsed.WARN, parsed.CRIT, 0, 100)

            if inodes_used >= parsed.CRIT:
                state = get_greater_state(state, STATE_CRIT)
                msg = msg[:-2] + ' (CRIT), '
            elif inodes_used >= parsed.WARN:
                state = get_greater_state(state, STATE_WARN)
                msg = msg[:-2] + ' (WARN), '
        
        except Exception as e:
            print('Something seems to be wrong with the input parameter. The error was: ')
            print(e)
            exit(STATE_UNKNOWN)

    msg = msg[:-2]

    print(msg + '|' + perfdata.strip())
    exit(state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(e)
        exit(STATE_UNKNOWN)
