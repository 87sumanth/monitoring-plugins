#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020012801'

DESCRIPTION = 'TODO'


#====================

from lib.globals import *

import argparse
try:
    import psutil
except ImportError, e:
    print('Python module "psutil" is not installed. Try `yum -y install epel-release;yum -y install python2-psutil`.')
    exit(STATE_UNKNOWN)
import socket

from lib.utils import execute_command
from lib.output import unpack_perfdata
from socket import AF_INET, SOCK_STREAM, SOCK_DGRAM


AF_INET6 = getattr(socket, 'AF_INET6', object())
proto_map = {
    (AF_INET, SOCK_STREAM): 'tcp',
    (AF_INET6, SOCK_STREAM): 'tcp6',
    (AF_INET, SOCK_DGRAM): 'udp',
    (AF_INET6, SOCK_DGRAM): 'udp6',
}


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    proc_names = {}
    # Changed in psutil version 5.3.0: added “attrs” and “ad_value” parameters.
    if psutil.__version__ >= '5.3.0':
        for p in psutil.process_iter(attrs=['pid', 'name']):
            proc_names[p.info['pid']] = p.info['name']
    else:
        for p in psutil.process_iter():
            try:
                proc_names[p.pid] = p.name()
            except psutil.Error:
                pass

    conn_count = {}
    for c in psutil.net_connections(kind='inet'):
        proto = proto_map[(c.family, c.type)]
        status = c.status

        if proto not in conn_count.keys():
            conn_count[proto] = {}
        if status not in conn_count[proto].keys():
            conn_count[proto][status] = 1
        else:
            conn_count[proto][status] += 1

    msg = ''
    perfdata = ''
    for proto in sorted(conn_count.keys()):
        for status in sorted(conn_count[proto].keys()):
            msg += '{} {}: {}, '.format(proto, status, conn_count[proto][status])
            # perfdata += '{}_{}={};;;0;; '.format(proto, status, conn_count[proto][status])
            perfdata += unpack_perfdata('{}_{}'.format(proto, status), conn_count[proto][status], None, None, None, None, None)

    print(msg[:-2] + '|' + perfdata)
    exit(STATE_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(e)
        exit(STATE_UNKNOWN)
