#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html


__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020022101'

DESCRIPTION = 'Checks expiration date of XCA certificates.'

DEFAULT_WARN     = 14 # days
DEFAULT_CRIT     = 5  # days
DEFAULT_DATABASE = 'xca'
DEFAULT_HOSTNAME = 'localhost'
DEFAULT_PASSWORD = ''
DEFAULT_USERNAME = 'root'

command_installed = 'command -v openssl'
command_openssl_cert = 'openssl x509 -noout -dates -in /dev/stdin'
command_openssl_crl = 'openssl crl -noout -nextupdate -in /dev/stdin'

#====================
from lib.globals import *
from lib.utils import execute_command
from lib.output import state_to_string
from lib.parse_input import evaluate_smaller_date_to_today


import argparse
from traceback import print_exc
import datetime
try:
    import mysql.connector # yum install mysql-connector-python
except:
    print('The mysql.connector library is missing.')
    exit(STATE_UNKNOWN)


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('-w', '--warning',
        help = 'Set the warning for the expiration date in days. Default: %(default)s',
        dest = 'WARN',
        type = int,
        default = DEFAULT_WARN,
        )

    parser.add_argument('-c', '--critical',
        help = 'Set the critical for the expiration date in days. Default: %(default)s',
        dest = 'CRIT',
        type = int,
        default = DEFAULT_CRIT,
        )

    parser.add_argument('-H', '--hostname',
        help = 'Set the hostname of the mysql server containing the XCA database. Default: %(default)s',
        dest = 'HOSTNAME',
        type = str,
        default = DEFAULT_HOSTNAME,
        )
    
    parser.add_argument('-u', '--username',
        help = 'Set the username for the mysql server containing the XCA database. Default: %(default)s',
        dest = 'USERNAME',
        type = str,
        default = DEFAULT_USERNAME,
        )
    
    parser.add_argument('-p', '--password',
        help = 'Set the password for the mysql server containing the XCA database. Default: %(default)s',
        dest = 'PASSWORD',
        type = str,
        default = DEFAULT_PASSWORD,
        )
    
    parser.add_argument('--database',
        help = 'Set the mysql database containing the XCA data. Default: %(default)s',
        dest = 'DATABASE',
        type = str,
        default = DEFAULT_DATABASE,
        )
    
    parser.add_argument('--prefix',
        help = 'Set the table prefix of the XCA database.',
        dest = 'PREFIX',
        type = str,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # check if shell command is available
    stdout, stderr, retc = execute_command(command_installed)
    if (retc != 0):
        print('"openssl" is missing.')
        exit(STATE_UNKNOWN)

    state = STATE_OK        
    mysql_connection = {
      'user':               parsed.USERNAME,
      'password':           parsed.PASSWORD,
      'host':               parsed.HOSTNAME,
      'database':           parsed.DATABASE,
      'raise_on_warnings':  True
    }

    # certs
    expired_certs = []
    cert_count = 0
    cnx = mysql.connector.connect(**mysql_connection)
    cursor = cnx.cursor()
    query = ('SELECT name, cert, {}certs_serial FROM xca.{}view_certs WHERE invaldate IS NULL').format(parsed.PREFIX, parsed.PREFIX)
    cursor.execute(query)
    
    for row in cursor:
        name, cert, serial = row
        cert_count += 1

        pem_cert = '-----BEGIN CERTIFICATE-----\n{}\n{}\n-----END CERTIFICATE-----'.format(cert[:10], cert[10:]) # add line break after 10th character, for the openssl command to always work
        # execute the shell command and return its result and exit code
        stdout, stderr, retc = execute_command(command_openssl_cert, stdin_input=pem_cert)
        if (stderr or retc != 0):
            print('Bash command `{}` failed.'.format(command_openssl_cert))
            print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
            exit(STATE_UNKNOWN)

        for line in stdout.splitlines():
            if line.startswith('notAfter='):
                date_str = line.split('=')[1]
                date_in = datetime.datetime.strptime(date_str, '%b %d %H:%M:%S %Y %Z') # Oct 29 08:41:00 2028 GMT

        cert_state = evaluate_smaller_date_to_today(date_in, parsed.WARN, parsed.CRIT)
        if cert_state != STATE_OK:
            expired_certs.append('{} {} ({}: {})'.format(name, serial, state_to_string(cert_state), date_str))
            state = get_greater_state(state, cert_state)

    # crl
    expired_crl = None
    crl_count = 0
    query = ('SELECT name,crl FROM xca.{}view_crls ORDER BY date DESC LIMIT 1').format(parsed.PREFIX)
    cursor.execute(query)
    
    for row in cursor:
        name, cert = row
        crl_count += 1

        pem_cert = '-----BEGIN X509 CRL-----\n{}\n-----END X509 CRL-----'.format(cert)
        # execute the shell command and return its result and exit code
        stdout, stderr, retc = execute_command(command_openssl_crl , stdin_input=pem_cert)
        if (stderr or retc != 0):
            print('Bash command `{}` failed.'.format(command_openssl_cert))
            print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
            exit(STATE_UNKNOWN)

        for line in stdout.splitlines():
            if line.startswith('nextUpdate='):
                date_str = line.split('=')[1]
                date_in = datetime.datetime.strptime(date_str, '%b %d %H:%M:%S %Y %Z') # Oct 29 08:41:00 2028 GMT

        crl_state = evaluate_smaller_date_to_today(date_in, parsed.WARN, parsed.CRIT)
        if crl_state != STATE_OK:
            expired_crl = '{} ({}: {})'.format(name, state_to_string(crl_data.state), date_str)
            state = get_greater_state(state, crl_state)


    if state == STATE_OK:
        print('{} Certificates and {} CRL checked.'.format(cert_count, crl_count))
    else:
        print('One or more cert is expiring.')
        print('{} Certificates and {} CRL checked.\n'.format(cert_count, crl_count))
        if len(expired_certs) > 0:
            print('Expiring Certificates:')
            for cert in expired_certs:
                print('* {}'.format(cert))

        if expired_crl:
            print('Expiring CRL (latest creation date):')
            print('* {}'.format(expired_crl))

    exit(state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
