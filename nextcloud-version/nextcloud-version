#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020031801'

DESCRIPTION = 'This plugin lets you track if server updates are available.'

DEFAULT_PATH            = '/var/www/html/nextcloud'
DEFAULT_CHANNEL         = 'stable'
DEFAULT_CACHE_EXPIRE    = 24 # hours


#====================
from lib.globals import *

from lib.base import continue_or_exit, grep_file, now
from lib.cache import get_cache, set_cache
from lib.url import fetch_url

import argparse
from traceback import print_exc
from xml.dom import minidom


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('--always-ok',
        help = 'This switch means the check always returns the state OK.',
        dest = 'ALWAYS_OK',
        action = 'store_true',
        default = False,
        )

    parser.add_argument('--cache-expire',
        help = 'The amount of time after which the update check cache expires, in hours. Default: %(default)s',
        dest = 'CACHE_EXPIRE',
        type = int,
        default = DEFAULT_CACHE_EXPIRE,
        )

    parser.add_argument('--channel',
        help = 'Nextcloud Update Channel. Default: %(default)s',
        dest = 'CHANNEL',
        default = DEFAULT_CHANNEL,
        choices = ['stable', 'beta', 'production'],
        )

    parser.add_argument('--path',
        help = 'Local path to your Nextcloud installation, typically within your Webserver\'s Document Root. Default: %(default)s',
        dest = 'PATH',
        default = DEFAULT_PATH,
        )

    return parser.parse_args()


def nc_get_installed_version(path):
    # nextcloud/version.php: $OC_Version = array(18,0,2,2);
    success, nc_version = grep_file(path + '/version.php', r'\$OC_Version = array\((.*)\)')
    if not success:
        return (success, nc_version)
    if nc_version:
        # 18,0,2,2
        return (True, nc_version.replace(',', '.'))
    else:
        return (True, False)


def nc_get_update_url(path, channel):
    # We need this:
    # https://updates.nextcloud.com/updater_server/?version=18x0x1x3x1484370109x1484370109xstablexxf6bd5afd0370ae6308529047ba6344acf8d382a3x7x2x28
    update_url = 'https://updates.nextcloud.com/updater_server/?version='

    success, nc_version = nc_get_installed_version(path)
    if not success:
        return (success, nc_version)
    if not nc_version:
        return (False, 'Cannot parse {}/version.php'.format(path))

    nc_version = nc_version.replace('.', 'x')
    nc_installed = str(now() - 86400)
    nc_updated = str(now() - 43200)
    nc_updatechannel = channel
    nc_edition = ''

    success, nc_build = grep_file(path + '/version.php', r"\$OC_Build = '.* (.*)';")
    if not success:
        return (success, nc_version)
    if not nc_build:
        return (False, 'Cannot parse {}/version.php'.format(path))

    php_version = '7x4x3'       # could be anything (no need to get the installed php version for now)

    update_url += nc_version + 'x' + nc_installed + 'x' + nc_updated + 'x' + nc_updatechannel + 'x' + nc_edition + 'x' + nc_build + 'x' + php_version
    return (True, update_url)


def nc_get_latest_version(path, channel, expire):
    # get version online, but first from cache
    latest_version = get_cache('nextcloud-version')
    if latest_version:
        return (True, latest_version)

    # nothing found in cache, get the latest version from nc update server (and not from github)
    success, url = nc_get_update_url(path, channel)
    #success, url = (True, 'https://updates.nextcloud.com/updater_server/?version=18x0x1x3x1484370109x1484370109xstablexxf6bd5afd0370ae6308529047ba6344acf8d382a3x7x2x28')
    if not success:
        return (success, url)

    success, xmlst = fetch_url(url)
    if not success:
        return (success, xmlst)
    
    if xmlst == '':
        # no answer is a good answer, we already have the newest version
        success, latest_version = nc_get_installed_version(path)
        if not success:
            return (success, latest_version)
        set_cache('nextcloud-version', latest_version, now() + expire)
        return (True, latest_version)

    # there is an upate available, so result contains xml here
    dom = minidom.parseString(xmlst)
    latest_version = dom.getElementsByTagName('version')[0].firstChild.nodeValue.strip()
    set_cache('nextcloud-version', latest_version, now() + expire)
    return (True, latest_version)


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    installed_version = continue_or_exit(nc_get_installed_version(parsed.PATH))
    latest_version = continue_or_exit(nc_get_latest_version(parsed.PATH, parsed.CHANNEL, parsed.CACHE_EXPIRE*60*60))

    if installed_version >= latest_version:
        print('Nextcloud v{} is up to date'.format(installed_version))
        exit(STATE_OK)
    else:
        print('Nextcloud v{} is available (installed: v{})'.format(latest_version, installed_version))
        if parsed.ALWAYS_OK:
            exit(STATE_OK)
        else:
            exit(STATE_WARN)
   

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
