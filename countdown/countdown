#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020010801'

DESCRIPTION = 'Warns before an expiration date is scheduled to occur.'

DEFAULT_WARN = 50      # days
DEFAULT_CRIT = 30      # days


#====================
import argparse
import datetime

from lib.globals import *
from lib.parse_arguments import csv


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('-i', '--input',
        help = '"Display Name 1, yyyy-mm-dd, warn, crit; Display Name 2, yyyy-mm-dd, warn, crit; ..."',
        dest = 'INPUT',
        type = csv,
        required = True,
        action = 'append',
        )
    
    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)


    msg = ''
    state = STATE_OK
    overall_state = STATE_OK

    try:
        # ['Supermicro SYS1, 2022-01-10, 50, None', 'Contract XMPL.COM, 2021-12-24, 50, 30']
        for line in parsed.INPUT:
            item, expiration_date, warn, crit = line

            expiration_date = datetime.datetime.strptime(expiration_date, "%Y-%m-%d")
            today = datetime.datetime.today()
            delta = expiration_date - today
            delta = int(delta.days) + 1

            if delta > 0:
                line = '{} expires in {} days (thresholds {}/{})\n'.format(item, delta, warn, crit)
            elif delta == 0:
                line = '{} expires today.\n'.format(item)
            else:
                line = '{} already expired {} day(s) ago.\n'.format(item, abs(delta))

            if crit != 'None' and delta < int(crit):
                msg += '* CRIT ' + line
                state = STATE_CRIT
            elif delta < int(warn):
                msg += '* WARN ' + line
                state = STATE_WARN
            else:
                msg += '* ' + line
                state = STATE_OK

            overall_state = get_greater_state(state, overall_state)
        
        if overall_state == STATE_CRIT:
            msg = 'There are one or more criticals.\n' + msg
        elif overall_state == STATE_WARN:
            msg = 'There are one or more warnings.\n' + msg
        else:
            msg = 'Everything is ok.\n' + msg

        print(msg.strip())
        exit(overall_state)

    except Exception as e:
        print('Something seems to be wrong with the input parameter format or its timestamps. The error was: ')
        print(e)
        exit(STATE_UNKNOWN)


if __name__ == '__main__':
    main()
