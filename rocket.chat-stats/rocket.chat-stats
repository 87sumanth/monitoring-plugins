#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020031901'

DESCRIPTION = 'This plugin lets you track statistics about a Rocket.Chat server. Requires a user with strong password and "view-statistics" permission (only).'

DEFAULT_URL             = 'http://localhost:3000/api/v1'
DEFAULT_USERNAME        = 'rocket-stats'


#====================
from lib.globals import *

from lib.base import continue_or_exit
from lib.output import bytes2human, unpack_perfdata
from lib.rc import rc_get_token, rc_get_stats

import argparse
from traceback import print_exc


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('-p', '--password',
        help='Rocket.Chat API password.',
        dest='PASSWORD',
        required=True,
        )

    parser.add_argument('--url',
        help='Rocket.Chat API URL. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
        )

    parser.add_argument('--username',
        help='Rocket.Chat API username. Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
        required=True,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # fetch the data
    credentials = continue_or_exit(rc_get_token(parsed.URL, parsed.USERNAME, parsed.PASSWORD))
    authToken, userId = credentials.split(':')
    result = continue_or_exit(rc_get_stats(parsed.URL, authToken, userId))

    # extract some application specific data
    if result.get('statistics', None):
        # version < 3.0.0
        rc_statistics_onlineUsers               = result['statistics']['onlineUsers']
        rc_statistics_totalDirectMessages       = result['statistics']['totalDirectMessages']
        rc_statistics_totalLivechat             = result['statistics']['totalLivechat']
        rc_statistics_totalPrivateGroups        = result['statistics']['totalPrivateGroups']
        rc_statistics_totalRooms                = result['statistics']['totalRooms']
        rc_statistics_totalUsers                = result['statistics']['totalUsers']
        rc_statistics_uploadsTotal              = result['statistics']['uploadsTotal']
        rc_statistics_version                   = result['statistics']['version']

        rc_statistics_totalLivechatMessages     = result['statistics']['totalLivechatMessages']
        rc_statistics_totalLivechatVisitors     = result['statistics']['totalLivechatVisitors']
        rc_statistics_totalMessages             = result['statistics']['totalMessages']
        rc_statistics_totalPrivateGroupMessages = result['statistics']['totalPrivateGroupMessages']
        rc_statistics_uploadsTotalSize          = result['statistics']['uploadsTotalSize']
    else:
        # version >= 3.0.0
        rc_statistics_onlineUsers               = result['onlineUsers']
        rc_statistics_totalDirectMessages       = result['totalDirectMessages']
        rc_statistics_totalLivechat             = result['totalLivechat']
        rc_statistics_totalPrivateGroups        = result['totalPrivateGroups']
        rc_statistics_totalRooms                = result['totalRooms']
        rc_statistics_totalUsers                = result['totalUsers']
        rc_statistics_uploadsTotal              = result['uploadsTotal']
        rc_statistics_version                   = result['version']

        rc_statistics_totalLivechatMessages     = result['totalLivechatMessages']
        rc_statistics_totalLivechatVisitors     = result['totalLivechatVisitors']
        rc_statistics_totalMessages             = result['totalMessages']
        rc_statistics_totalPrivateGroupMessages = result['totalPrivateGroupMessages']
        rc_statistics_uploadsTotalSize          = result['uploadsTotalSize']


    # no checks here, just for your information
    msg = ''
    perfdata = ''
    state = STATE_OK

    # build a compact multiline message
    msg += '{} users ({} online), {} msgs, {} uploads, {} uploads total size, v{}\n'.format(
        rc_statistics_totalUsers,
        rc_statistics_onlineUsers,
        rc_statistics_totalMessages,
        rc_statistics_uploadsTotal,
        bytes2human(rc_statistics_uploadsTotalSize),
        rc_statistics_version, 
        )
    msg += '{} rooms, {} private groups, {} private group msgs, {} direct msgs\n'.format(
        rc_statistics_totalRooms,
        rc_statistics_totalPrivateGroups,
        rc_statistics_totalPrivateGroupMessages,
        rc_statistics_totalDirectMessages,
        )
    msg += '{} livechat visitors, {} livechats, {} livechat msgs\n'.format(
        rc_statistics_totalLivechatVisitors,
        rc_statistics_totalLivechat,
        rc_statistics_totalLivechatMessages,
        )

    perfdata += unpack_perfdata('rc_onlineUsers', rc_statistics_onlineUsers, None, None, None, 0, None)
    perfdata += unpack_perfdata('rc_totalDirectMessages', rc_statistics_totalDirectMessages, None, None, None, 0, None)
    perfdata += unpack_perfdata('rc_totalLivechat', rc_statistics_totalLivechat, None, None, None, 0, None)
    perfdata += unpack_perfdata('rc_totalLivechatMessages', rc_statistics_totalLivechatMessages, None, None, None, 0, None)
    perfdata += unpack_perfdata('rc_totalLivechatVisitors', rc_statistics_totalLivechatVisitors, None, None, None, 0, None)
    perfdata += unpack_perfdata('rc_totalMessages', rc_statistics_totalMessages, None, None, None, 0, None)
    perfdata += unpack_perfdata('rc_totalPrivateGroupMessages', rc_statistics_totalPrivateGroupMessages, None, None, None, 0, None)
    perfdata += unpack_perfdata('rc_totalPrivateGroups', rc_statistics_totalPrivateGroups, None, None, None, 0, None)
    perfdata += unpack_perfdata('rc_totalRooms', rc_statistics_totalRooms, None, None, None, 0, None)
    perfdata += unpack_perfdata('rc_totalUsers', rc_statistics_totalUsers, None, None, None, 0, None)
    perfdata += unpack_perfdata('rc_uploadsTotal', rc_statistics_uploadsTotal, None, None, None, 0, None)
    perfdata += unpack_perfdata('rc_uploadsTotalSize', rc_statistics_uploadsTotalSize, 'B', None, None, 0, None)

    print(msg.strip() + '|' + perfdata.strip())

    exit(state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
