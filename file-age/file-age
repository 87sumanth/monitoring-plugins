#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020010501'

DESCRIPTION = 'Checks the time of last data modification for a file or directory, in seconds.'

DEFAULT_WARN = 60*60*24*30      # sec
DEFAULT_CRIT = 60*60*24*365     # sec


#====================
import argparse
import os
import time

from lib.globals import *
from lib.output import seconds2human, unpack_perfdata


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('-c', '--critical', 
        help = 'Set the CRIT age threshold in seconds. Default: >= %(default)ss (365d)',
        dest = 'CRIT',
        type = float,
        default = DEFAULT_CRIT,
        )

    parser.add_argument('-f', '--filename',
        help = 'File (or directory) name to check.',
        dest = 'FILE',
        required = True,
        )

    parser.add_argument('-w', '--warning',
        help = 'Set the WARN age threshold in seconds. Default: >= %(default)ss (30d)',
        dest = 'WARN',
        type = float,
        default = DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    FILE = parsed.FILE
    WARN = parsed.WARN
    CRIT = parsed.CRIT

    # fetch the data
    try:
        st = os.stat(FILE)
    except:
        print('Error reading file or directory "{}".'.format(FILE))
        exit(STATE_UNKNOWN)

    age = (time.time() - st.st_mtime)

    msg = '{} is {} old.'.format(FILE, seconds2human(age))
    # label, value, uom, warn, crit, min, max):
    perfdata = unpack_perfdata('file_age_{}'.format(FILE), age, 's', WARN, CRIT, 0, None)
    print(msg.strip() + '|' + perfdata.strip())

    if age >= CRIT:
        exit(STATE_CRIT)
    if age >= WARN:
        exit(STATE_WARN)
    exit(STATE_OK)

if __name__ == '__main__':
    main()
