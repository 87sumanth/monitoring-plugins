#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020030702'

DESCRIPTION = 'Warns on the newest feed item of an RSS or Atom feed for a given amount of time.'

DEFAULT_FEED_URL = 'https://www.heise.de/security/rss/alert-news-atom.xml'
DEFAULT_NO_SUMMARY = False
DEFAULT_WARN = 120  # minutes


#====================
from lib.globals import *

import argparse
import datetime
import time

from traceback import print_exc
from lib.output import seconds2human

try:
    import feedparser
except ImportError, e:
    print('Python module "feedparser" is not installed.')
    exit(STATE_UNKNOWN)



def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('--no-summary',
        help = 'Do not show the feed item summary. Default: %(default)s',
        dest = 'NO_SUMMARY',
        action = 'store_true',
        default = DEFAULT_NO_SUMMARY,   # False
        )

    parser.add_argument('-u', '--url',
        help = 'The Feed URL. Default: %(default)s',
        dest = 'FEED_URL',
        default = DEFAULT_FEED_URL,
        )

    parser.add_argument('-w', '--warning',
        help = 'How long should this check return a warning on new entries? Default: %(default)s (minutes)',
        dest = 'WARN',
        type = int,
        default = DEFAULT_WARN,
        )
    
    return parser.parse_args()


def fetch_feed_last_entry(feed_url):
    # got this function from https://github.com/jrottenberg/check_rss/blob/master/check_rss.py
    try:
        myfeed = feedparser.parse(feed_url)
    except:
        print('Could not parse URL (%s)' % feed_url)
        exit(STATE_UNKNOWN)

    # slightly enhanced
    if ('status' not in myfeed):
        print('HTTP Error, maybe wrong URL')
        exit(STATE_UNKNOWN)

    if (myfeed.status != 200):
        print('Status %s - %s' % (myfeed.status, myfeed.feed.summary))
        exit(STATE_UNKNOWN)

    # feed with 0 entries are good too
    if (len(myfeed.entries) == 0): 
        print('No news are good news.')
        exit(STATE_OK)
    
    return myfeed.entries[0]


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    feed_item = fetch_feed_last_entry(parsed.FEED_URL)

    now = time.mktime(time.localtime())
    feed_time = time.mktime(feed_item['updated_parsed'])
    delta = now - feed_time     # in seconds, float

    if parsed.NO_SUMMARY:
        msg = '{} ({} ago)'.format(feed_item['title'].encode('utf-8').strip(), seconds2human(delta))
    else:
        msg = '{}: {} ({} ago)'.format(feed_item['title'].encode('utf-8').strip(), feed_item['summary'].encode('utf-8').strip(), seconds2human(delta))

    state = STATE_OK
    if delta/60 < parsed.WARN:
        state = STATE_WARN

    print(msg)
    exit(state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
