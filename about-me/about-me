#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020020501'

DESCRIPTION = 'Reports a quick overview about the host dimensions and installed software.'

DEFAULT_NO_WARN = False


#====================
from lib.globals import *

import argparse
from traceback import print_exc
import os
import platform
try:
    import psutil
except ImportError, e:
    print('Python module "psutil" is not installed. Try `yum -y install epel-release;yum -y install python2-psutil`.')
    exit(STATE_UNKNOWN)
import re

from lib.utils import execute_command
from lib.output import bytes2human, unpack_perfdata


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('--no-warn',
        help = 'This option disables throwing a WARN state if some special tools are found. Default: %(default)s',
        dest = 'NO_WARN',
        action = 'store_true',
        default = DEFAULT_NO_WARN,   # False
        )

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    return parser.parse_args()


def execute_command_or_unknown(command):
    stdout, stderr, retc = execute_command(command)
    if (stderr or retc != 0):
        print('Bash command `{}` failed.'.format(command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)
    return stdout.strip(), stderr, retc


def find_command(return_text, command, version_cmd=None, version_regex=None):
    stdout, stderr, retc = execute_command(command)
    if retc == 0:
        if version_cmd:
            ver, stderr, retc = execute_command(version_cmd)
            if ver == '' and stderr != '':
                # https://stackoverflow.com/questions/26028416/why-does-python-print-version-info-to-stderr
                # https://stackoverflow.com/questions/13483443/why-does-java-version-go-to-stderr]
                ver = stderr
            ver = ver.strip()
            # where to find the version number in output?
            if version_regex:
                try:
                    ver = re.search(version_regex, ver)
                    return return_text + ' {}, '.format(ver.group(1).strip())
                except:
                    return ''
            else:
                return return_text + ' {}, '.format(ver).strip()
        else:
            return return_text + ', '
    else:
        return ''


def get_sys_dimensions():
    # get some very basic system statistics
    sys = {}
    sys['cpu'] = psutil.cpu_count(logical=True)
    sys['ram'] = psutil.virtual_memory().total

    stdout, stderr, retc = execute_command_or_unknown('lsblk --nodeps --output SIZE --noheadings --include 8,252')
    sys['disks'] = stdout.count('\n') + 1
    sys['disk-sizes'] = re.sub(r'\s+', ' ', stdout)
    return sys


def get_apps():
    # try to find some non-yum-installed real-world applications - here called "apps";
    # mainly found in /home, /opt or /var/www/html;
    # and: this is just an incomplete and naive guess
    apps = ''

    apps += 'H-Net SecureService (eFaktura), ' if os.path.isdir('/home/hnet/HnetSecureService') else ''
    apps += 'Hostbill, ' if os.path.isdir('/home/hostbill') else ''

    apps += 'Apache Tomcat, ' if os.path.isdir('/opt/tomcat') else ''
    apps += 'Atlassian Bitbucket, ' if os.path.isdir('/opt/atlassian/bitbucket') else ''
    apps += 'Atlassian Confluence, ' if os.path.isdir('/opt/atlassian/confluence') else ''
    apps += 'Atlassian Jira, ' if os.path.isdir('/opt/atlassian/jira') else ''
    apps += 'Atomicorp, ' if os.path.isdir('/opt/atomicorp') else ''
    apps += 'Bacchus, ' if os.path.isdir('/opt/bacchus') else ''
    apps += 'BizBus, ' if os.path.isdir('/opt/bizbus') else ''
    apps += 'Brother Printer SW, ' if os.path.isdir('/opt/brother') else ''
    apps += 'Collabora Office 5.3, ' if os.path.isdir('/opt/collaboraoffice5.3') else ''
    apps += 'Collabora Office 6.0, ' if os.path.isdir('/opt/collaboraoffice6.0') else ''
    apps += 'DCM4CHEE, ' if os.path.isdir('/opt/dcm4chee') else ''
    apps += 'F5 VPN SW, ' if os.path.isdir('/opt/f5/vpn') else ''
    apps += 'GitLab, ' if os.path.isdir('/opt/gitlab') else ''
    apps += 'Google Chrome, ' if os.path.isdir('/opt/google/chrome') else ''
    apps += 'JBoss, ' if os.path.isdir('/opt/jboss') else ''
    apps += 'JumpCloud, ' if os.path.isdir('/opt/jc') else ''
    apps += 'KeeWeb, ' if os.path.isdir('/opt/KeeWeb') else ''
    apps += 'Keycloak, ' if os.path.isdir('/opt/keycloak') else ''
    apps += 'MariaDB ColumnStore, ' if os.path.isdir('/opt/columnstore') else ''
    apps += 'Medidata (eFaktura), ' if os.path.isdir('/opt/MPCommunicator') else ''
    apps += 'Metabase, ' if os.path.isdir('/opt/metabase') else ''
    apps += 'NodeBB, ' if os.path.isdir('/opt/nodebb') else ''
    apps += 'PHP 7.1 (RH), ' if os.path.isdir('/opt/rh/rh-php71') else ''
    apps += 'PHP 7.2 (RH), ' if os.path.isdir('/opt/rh/rh-php72') else ''
    apps += 'PHP 7.3 (RH), ' if os.path.isdir('/opt/rh/rh-php73') else ''
    apps += 'PHP 7.4 (RH), ' if os.path.isdir('/opt/rh/rh-php74') else ''
    apps += 'PostgreSQL 9.0 (RH), ' if os.path.isdir('/opt/rh/rh-postgresql90') else ''
    apps += 'PostgreSQL 9.1 (RH), ' if os.path.isdir('/opt/rh/rh-postgresql91') else ''
    apps += 'PostgreSQL 9.2 (RH), ' if os.path.isdir('/opt/rh/rh-postgresql92') else ''
    apps += 'PostgreSQL 9.3 (RH), ' if os.path.isdir('/opt/rh/rh-postgresql93') else ''
    apps += 'PostgreSQL 9.4 (RH), ' if os.path.isdir('/opt/rh/rh-postgresql94') else ''
    apps += 'PostgreSQL 9.5 (RH), ' if os.path.isdir('/opt/rh/rh-postgresql95') else ''
    apps += 'PostgreSQL 9.6 (RH), ' if os.path.isdir('/opt/rh/rh-postgresql96') else ''
    apps += 'Rambox, ' if os.path.isdir('/opt/Rambox') else ''
    apps += 'Rocket.Chat, ' if os.path.isdir('/opt/Rocket.Chat') else ''
    apps += 'Tarifpool, ' if os.path.isdir('/opt/tarifpool') else ''
    apps += 'VMware Tools, ' if os.path.isdir('/etc/vmware-tools') else ''
    apps += 'WildFly, ' if os.path.isdir('/opt/wildfly') else ''
    apps += 'Zimbra, ' if os.path.isdir('/opt/zimbra') else ''

    apps += 'Contao, ' if os.path.isdir('/var/www/html/contao') else ''
    apps += 'HTMLy, ' if os.path.isdir('/var/www/html/htmly') else ''
    apps += 'Matomo, ' if os.path.isdir('/var/www/html/matomo') else ''
    apps += 'MediaWiki, ' if os.path.isdir('/var/www/html/mediawiki') else ''
    apps += 'Nextcloud, ' if os.path.isdir('/var/www/html/nextcloud') else ''
    apps += 'Piwik, ' if os.path.isdir('/var/www/html/piwik') else ''
    apps += 'Roundcube, ' if os.path.isdir('/var/www/html/roundcubemail') else ''
    apps += 'Vtiger, ' if os.path.isdir('/var/www/html/vtigercrm') else ''
    apps += 'Yii, ' if os.path.isdir('/var/www/html/yii') else ''
    apps += 'Yii2, ' if os.path.isdir('/var/www/html/yii2') else ''
    apps += 'Yii2, ' if os.path.isdir('/var/www/html/yii2-basic') else ''
    apps += 'Yii2, ' if os.path.isdir('/var/www/html/yii2-advanced') else ''

    if apps:
        return apps[:-2]
    else:
        return ''


def get_doubtful_tools():
    # tools that we think should not be installed on a server system
    sw = ''
    sw += find_command('hdparm', 'command -v hdparm')
    sw += find_command('ncat', 'command -v ncat', version_cmd='ncat --version', version_regex=r'Ncat: Version (.*?) ')
    sw += find_command('nmap', 'command -v nmap', version_cmd='nmap --version', version_regex=r'Nmap version (.*?) ')
    sw += find_command('tcpdump', 'command -v tcpdump')
    sw += find_command('telnet', 'command -v telnet', version_cmd='telnet --version', version_regex=r'telnet version (.*)')
    sw += find_command('Wireshark', 'command -v tshark', version_cmd='tshark -v', version_regex=r'TShark (.*?) ')

    if sw:
        return sw[:-2]
    else:
        return ''


def get_simple_tools():
    # yum installed tools, alphabetically sorted by output
    sw = ''

    sw += find_command('dig', 'command -v dig')
    sw += find_command('iftop', 'command -v iftop')
    sw += find_command('lsof', 'command -v lsof')
    sw += find_command('nano', 'command -v nano')
    sw += find_command('rsync', 'command -v rsync')
    sw += find_command('unzip', 'command -v unzip')
    sw += find_command('vim', 'command -v vim')
    sw += find_command('wget', 'command -v wget')
    sw += find_command('whois', 'command -v whois')
    
    if sw:
        return sw[:-2]
    else:
        return ''


def get_repo_sw():
    # yum installed real-world applications, alphabetically sorted by output
    # but sometimes not callable for Icinga (like Elastic or Graylog)
    # or without version info
    sw = ''

    sw += find_command('Apache httpd', 'command -v httpd', version_cmd='httpd -v', version_regex=r'Apache/(.*) ')
    sw += find_command('BIND', 'command -v named', version_cmd='named -v', version_regex=r'^BIND (.*?)-')
    sw += find_command('Borg', 'command -v borg', version_cmd='borg --version', version_regex=r' (.*)')
    sw += find_command('ClamAV', 'command -v clamd', version_cmd='clamd --version', version_regex=r' (.*)/')
    sw += find_command('Containerd', 'command -v containerd', version_cmd='containerd --version', version_regex=r' (.*) ')
    sw += find_command('Docker', 'command -v docker', version_cmd='docker --version', version_regex=r' version (.*?),')
    sw += 'Elasticsearch, ' if os.path.isfile('/usr/share/elasticsearch/bin/elasticsearch') else ''
    sw += find_command('Erlang', 'command -v erl')
    sw += find_command('Fail2ban-Server', 'command -v fail2ban-server', version_cmd='fail2ban-server --version', version_regex=r' v(.*)')
    sw += find_command('FreeIPA', 'command -v ipa', version_cmd='ipa --version', version_regex=r' (.*?),')
    sw += find_command('Git', 'command -v git', version_cmd='git --version', version_regex=r'git version (.*)')
    sw += find_command('Glances', 'command -v glances', version_cmd='glances --version', version_regex=r'Glances v(.*?) ')
    sw += find_command('Grafana-Server', 'command -v grafana-server', version_cmd='grafana-server -v', version_regex=r'Version (.*?) ')
    sw += 'Graylog-Server, ' if os.path.isfile('/usr/share/graylog-server/bin/graylog-server') else ''
    sw += find_command('Icinga2', 'command -v icinga2', version_cmd='icinga2 --version', version_regex=r'\(version: (.*)\)')
    sw += find_command('InfluxDB', 'command -v influx', version_cmd='influx --version', version_regex=r': (.*)')
    sw += find_command('Java', 'command -v java', version_cmd='java -version', version_regex=r'(.*)').replace('version ', '').replace('"', '')
    sw += find_command('LibreOffice', 'command -v libreoffice', version_cmd='libreoffice --version', version_regex=r' (.*?) ')
    sw += find_command('LibreOffice Online (LOOL)', 'command -v loolwsd')
    tmp = find_command('MySQL', 'command -v mysqld', version_cmd='mysqld --version', version_regex=r'Ver (.*?) ')
    if 'MariaDB' in tmp:
        tmp = tmp.replace('MySQL', 'MariaDB').replace('-MariaDB', '')
    sw += tmp
    sw += find_command('MongoDB', 'command -v mongod', version_cmd='mongod --version', version_regex=r'db version v(.*?)\n')
    sw += find_command('Node', 'command -v node', version_cmd='node --version', version_regex=r'v(.*)')
    sw += find_command('NodeJS', 'command -v nodejs', version_cmd='nodejs --version', version_regex=r'v(.*)')
    sw += find_command('npm', 'command -v npm', version_cmd='npm --version', version_regex=r'(.*)')
    sw += find_command('Perl', 'command -v perl', version_cmd='perl --version', version_regex=r' \(v(.*?)\) ')
    sw += find_command('PHP', 'command -v php', version_cmd='php --version', version_regex=r'PHP (.*?) \(.*')
    sw += find_command('PostgreSQL', 'command -v psql', version_cmd='psql --version', version_regex=r'\(PostgreSQL\) (.*)')
    sw += find_command('Python2', 'command -v python2', version_cmd='python --version', version_regex=r' (.*)')
    sw += find_command('Python3', 'command -v python3', version_cmd='python3 --version', version_regex=r' (.*)')
    sw += find_command('RabbitMQ-Server', 'command -v rabbitmq-server')
    sw += find_command('Redis-Server', 'command -v redis-server', version_cmd='redis-server --version', version_regex=r' v=(.*?) ')
    sw += find_command('Sublime Text', 'command -v subl', version_cmd='subl --version', version_regex=r'.* (.*)$')
    sw += find_command('TeamViewer', 'command -v teamviewer', version_cmd='teamviewer --version', version_regex=r'   (.*) ')
    
    if sw:
        return sw[:-2]
    else:
        return ''


def get_os_info():
    os_info = os.uname()
    platform_info = platform.linux_distribution()
    return '{} {} {}'.format(platform_info[0], platform_info[1], os_info[2])


def get_python_modules():
    pm = ''
    try:
        import psutil
        pm += 'psutil {}, '.format(psutil.__version__)
    except:
        pm += ''
    try:
        import mysql.connector
        pm += 'mysql.connector {}, '.format(mysql.connector.__version__)
    except:
        pm += ''
    if pm:
        return pm[:-2]
    else:
        return ''


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)


    msg = ''
    perfdata = ''
    state = STATE_OK


    sys_dimensions = get_sys_dimensions()
    if sys_dimensions['cpu'] == 1:
        msg += '{} CPU, '.format(sys_dimensions['cpu'])
    else:
        msg += '{} CPUs, '.format(sys_dimensions['cpu'])
    msg += bytes2human(sys_dimensions['ram']) + ' RAM, '
    if sys_dimensions['disks'] == 1:
        msg += '{} Disk ({}), '.format(sys_dimensions['disks'], sys_dimensions['disk-sizes'])
    else:
        msg += '{} Disks ({}), '.format(sys_dimensions['disks'], sys_dimensions['disk-sizes'])
    msg = msg[:-2]

    doubtful_tools = get_doubtful_tools()
    if doubtful_tools:
        msg += ' - Doubtful: ' + doubtful_tools
        if not parsed.NO_WARN:
            state = STATE_WARN
            msg += ' (WARN)'

    repo_sw = get_repo_sw()
    if repo_sw:
        msg += ' - Software: ' + repo_sw 

    apps = get_apps()
    if apps:
        msg += ' - Apps: ' + apps 

    simple_tools = get_simple_tools()
    if simple_tools:
        msg += ' - Tools: ' + simple_tools

    pm = get_python_modules()
    if pm:
        msg += ' - Python modules: ' + pm 

    
    msg += ' - OS: ' + get_os_info()


    perfdata += unpack_perfdata('cpu', sys_dimensions['cpu'], None, None, None, 0, None)
    perfdata += unpack_perfdata('ram', sys_dimensions['ram'], 'B', None, None, 0, None)
    perfdata += unpack_perfdata('disks', sys_dimensions['disks'], None, None, None, 0, None)

    print(msg + '|' + perfdata.strip())
    exit(state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
