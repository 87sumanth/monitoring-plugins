#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019122801'

DESCRIPTION = 'This check is just a development template. It gets a random number with a bash command between 0 and 100 and compares the result against given thresholds. As an extra feature it also uses a temp file to store the last five results.'

bash_command = 'tr -dc 0-9 < /dev/urandom | head -c 4'

DEFAULT_WARN = 33.33
DEFAULT_CRIT = 66.67
DEFAULT_STRING = 'hello'
DEFAULT_CSV = 'a, b, c'
DEFAULT_LIST = []
DEFAULT_NO_FEATURE = False
DEFAULT_FEATURE = True


#====================
from lib.globals import *

import argparse
from traceback import print_exc
import datetime
import pickle
try:
    import psutil
except ImportError, e:
    print('Python module "psutil" is not installed. Try `yum -y install epel-release;yum -y install python2-psutil`.')
    exit(STATE_UNKNOWN)

from lib.output import unpack_perfdata, state_to_string, format_as_table
from lib.parse_arguments import csv
from lib.parse_input import evaluate_greater
from lib.utils import execute_command


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('--choices',
        help = 'Expected systemd ActiveState. Default: %(default)s',
        dest = 'ACTIVESTATE',
        default = DEFAULT_STRING,
        choices = ['active', 'failed', 'inactive'],
        )

    parser.add_argument('-c', '--critical', 
        help = 'Set the CRIT threshold. Default: >= %(default)s',
        dest = 'CRIT',
        type = float,
        default = DEFAULT_CRIT,
        )

    parser.add_argument('--csv',
        help = 'Wants comma separated values. Default: "%(default)s"',
        dest = 'CSV',
        type = csv,
        default = DEFAULT_CSV,
        #required = True,
        )

    parser.add_argument('--no-feature',
        help = 'This option explicitly disables ... Default: %(default)s',
        dest = 'NO_FEATURE',
        action = 'store_true',
        default = DEFAULT_NO_FEATURE,   # False
        )

    parser.add_argument('--feature',
        help = 'This option explicitly enables .... Default: %(default)s',
        dest = 'FEATURE',
        action = 'store_false',
        default = DEFAULT_FEATURE,      # True
        )

    parser.add_argument('--repeat',
        help = 'Repeating arguments, multiple times.',
        dest = 'REPEAT',
        default = DEFAULT_LIST,
        action = 'append',         # then the default variable has to be a list
        #required = True,
        )

    parser.add_argument('--repeating-csv',
        help = 'Wants comma separated values, multiple times.',
        dest = 'REPEAT',
        type = csv,
        default = DEFAULT_LIST,
        action = 'append',         # then the default variable has to be a list
        #required = True,
        )

    # instead of post-processing args ("a, b, c")
    # better use type "csv"
    parser.add_argument('-m', '--mount',
        help = 'The mount point. Default: %(default)s',
        dest = 'MOUNT',
        type = lambda s: [str(item).strip() for item in s.split(',')],
        default = DEFAULT_STRING,
        )

    parser.add_argument('-w', '--warning',
        help = 'Set the WARN threshold. Default: >= %(default)s',
        dest = 'WARN',
        type = float,
        default = DEFAULT_WARN,
        )
    

    return parser.parse_args()


# instead of using tempfiles, use a sqlite database
# https://docs.python.org/2/library/sqlite3.html
def sqlcode():
    import sqlite3
    conn = sqlite3.connect('/tmp/0-example.db')
    # You can also supply the special name :memory: to create a database in RAM, but
    # its content is lost after conn.close() or the script finishes.

    c = conn.cursor()

    # Create table
    try:
        c.execute('''CREATE TABLE stocks
                 (date text, trans text, symbol text, qty integer, price real)''')
    except:
        print('/tmp/0-example.db cannot be written')
        exit(STATE_UNKNOWN)

    # Insert a row of data
    c.execute("INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)")

    # Save (commit) the changes
    conn.commit()

    # Usually your SQL operations will need to use values from Python variables. You shouldn’t assemble your query using Python’s string operations because doing so is insecure; it makes your program vulnerable to an SQL injection attack
    # Instead, use the DB-API’s parameter substitution. Put ? as a placeholder wherever you want to use a value, and then provide a tuple of values as the second argument to the cursor’s execute() method.
    value = ('RHAT',)
    c.execute('SELECT * FROM stocks WHERE symbol=?', value)
    print c.fetchone()

    # Larger example that inserts many records at a time
    purchases = [('2006-03-28', 'BUY', 'IBM', 1000, 45.00),
                 ('2006-04-05', 'BUY', 'MSFT', 1000, 72.00),
                 ('2006-04-06', 'SELL', 'IBM', 500, 53.00),
                ]
    c.executemany('INSERT INTO stocks VALUES (?,?,?,?,?)', purchases)

    # Save (commit) the changes
    conn.commit()

    for row in c.execute('SELECT * FROM stocks ORDER BY price'):
        print row

    # We can close the connection if we are done with it.
    # Just be sure any changes have been committed or they will be lost.
    conn.close()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    print(parsed)

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(bash_command, shell=True) # only use shell=True when needed (todo: when?)
    if (stderr or retc != 0):
        print('Bash command `{}` failed.'.format(bash_command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)
    result = float('{}.{}'.format(int(stdout[:2]), int(stdout[2:])))


    # ------------
    # Temp Files
    # for dealing with a temporary file, you need the pickle library


    # ------------
    # SQLite
    # use sqlite instead of tempfiles (have a look at the function above, or at cpu-usage)


    # ------------
    # GET and POST requests
    # * nextcloud-security-scan
    # * rocket.chat-stats


    # need to check for the version of a library, for example psutil?
    if psutil.__version__ >= '5.3.0':
        # do this
        print('>= 5.3.0')
    else:
        # do that
        print('< 5.3.0')


    # need to check if a library is installed?
    try:
        import tempfile
    except ImportError, e:
        print('Python module "tempfile" is not installed. Try `yum -y install python-tempfile` or `pip install tempfile`.')
        exit(STATE_UNKNOWN)


    msg = ''
    perfdata = ''
    state = STATE_OK
    

    # calculating the final check state
    state = evaluate_greater(result, parsed.WARN, parsed.CRIT)
    if state == STATE_CRIT:
        print('Result {} is >= 66.67.'.format(result))
    elif state == STATE_WARN:
        print('Result {} is between 33.33 and 66.67.'.format(result))
    else:
        print('Result {} is between 0 and 33.33.'.format(result))


    # print additional output
    table = format_as_table(new_data, ['index', 'value'], ['', 'value'], 'index')
    if table:
        print('\n{}'.format(table.strip()))


    # print out perfdata
    perfdata = unpack_perfdata('random_value', result, None, parsed.WARN, parsed.CRIT, 0, 100)
    print('|' + perfdata.strip())

    exit(state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
