#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019112801'

DESCRIPTION = 'This check is just a development template. It gets a random number with a bash command between 0 and 100 and compares the result against given thresholds. As an extra feature it also uses a temp file to store the last five results.'

bash_command = 'tr -dc 0-9 < /dev/urandom | head -c 4'

DEFAULT_WARN = 33.33
DEFAULT_CRIT = 66.67


#====================
import argparse
import pickle
import datetime
import tempfile

from lib3.globals import *
from lib3.utils import execute_command
from lib3.parse_input import evaluate_greater
from lib3.output import unpack_perfdata, state_to_string, format_as_table


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version', action='version', version=f'%(prog)s: v{__version__} by {__author__}')
    parser.add_argument('-c', '--critical', help='Set the CRIT threshold. Default: >= %(default)s', default=DEFAULT_CRIT, type=float, dest='CRIT')
    parser.add_argument('-w', '--warning', help='Set the WARN threshold. Default: >= %(default)s', default=DEFAULT_WARN, type=float, dest='WARN')

    return parser.parse_args()



def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)


    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(bash_command, shell=True)
    if (stderr or retc != 0):
        print(f'Bash command `{bash_command}` failed.')
        print(f'Stdout: {stdout}\nStderr: {stderr}')
        exit(STATE_UNKNOWN)
    result = float(f'{int(stdout[:2])}.{int(stdout[2:])}')


    # dealing with a temporary file

    # try to read the latest data from the temporary file
    try:
        latest_data = pickle.load(open('{}/example'.format(tempfile.gettempdir()), 'rb'))
    except Exception as e:
        latest_data = {}

    # insert the newest value at index 0 while keeping the last 4 values from latest_data
    # so that we have 5 values in total
    checkdata = []
    old_random_values = latest_data.get('random_value')
    if old_random_values:
        old_random_values.insert(0, result)
        old_random_values = old_random_values[:5]
        current_data = {'random_value': old_random_values}

        for index, value in enumerate(old_random_values):
            checkdata.append({
                'index': index,
                'value': value,
                })
    else:
        current_data = {'random_value': [result]}

    # saves the temporary data
    pickle.dump(current_data, open('{}/example'.format(tempfile.gettempdir()), 'wb+'))


    # calculating the final check state
    overall_state = evaluate_greater(result, parsed.WARN, parsed.CRIT)
    if overall_state == STATE_CRIT:
        print(f'Result {result} is >= 66.67.')
    elif overall_state == STATE_WARN:
        print(f'Result {result} is between 33.33 and 66.67.')
    else:
        print(f'Result {result} is between 0 and 33.33.')


    # print additional output
    table = format_as_table(checkdata, ['index', 'value'], ['', 'value'], 'index')
    if table:
        print(f'\n{table}', end='')


    # print out perfdata
    perfdata = unpack_perfdata('random_value', result, None, parsed.WARN, parsed.CRIT, 0, 100)
    print(f'|{perfdata}')

    exit(overall_state)


if __name__ == '__main__':
    main()
