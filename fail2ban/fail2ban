#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020040701'

DESCRIPTION = 'In fail2ban, checks the amount of banned IP addresses (for a list of jails).'

command_installed = 'command -v fail2ban-client'
command = 'fail2ban-client'

DEFAULT_CRIT = 10000
DEFAULT_WARN = 1000

#====================
from lib.globals import *

import lib.base

import argparse
import re
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('--always-ok',
        help = 'Always returns OK.',
        dest = 'ALWAYS_OK',
        action = 'store_true',
        default = False,
        )

    parser.add_argument('-c', '--critical',
        help = 'Set the critical threshold for banned IPs. Default: %(default)s',
        dest = 'CRIT',
        type = int,
        default = DEFAULT_CRIT,
        )

    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold for banned IPs. Default: %(default)s',
        dest = 'WARN',
        type = int,
        default = DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # check if shell command is available
    stdout, stderr, retc = lib.base.shell_exec(command_installed)
    if (retc != 0):
        print('`fail2ban-client` is missing.')
        exit(STATE_UNKNOWN)

    # fail2ban-client ping
    stdout, stderr, retc = lib.base.shell_exec(command + ' ping')
    if retc:
        print('Problem while testing if the fail2ban server is alive.')
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)

    # fail2ban-client status
    stdout, stderr, retc = lib.base.shell_exec(command + ' status')
    if (retc != 0):
        print('Bash command `{}` failed.'.format(command_cmd))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)

    # extract the jail list
    jail_list = re.search(r'Jail list:\t(.*)\n', stdout)
    jail_list = jail_list.group(1).strip().split(', ')
    
    msg = ''
    perfdata = ''
    state = STATE_OK

    # let's do the checks
    # for each jail_name:
    #     fail2ban-client status jail_name
    for jail in jail_list:

        stdout, stderr, retc = lib.base.shell_exec(command + ' status {}'.format(jail))
        if (retc != 0):
            print('Bash command `{}` failed.'.format(command_cmd))
            print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
            exit(STATE_UNKNOWN)

        f2b_filelist = re.search(r'File list:\t(.*)\n', stdout)
        if f2b_filelist:
            f2b_filelist = f2b_filelist.group(1).strip()
        f2b_currently_banned = re.search(r'Currently banned:\t(.*)\n', stdout)
        # important to convert the result to an integer
        # for the comparison later on
        if f2b_currently_banned:
            f2b_currently_banned = int(f2b_currently_banned.group(1).strip())
        else:
            f2b_currently_banned = 0

        msg += '{} IPs banned in jail "{}"'.format(f2b_currently_banned, jail)
        if f2b_filelist:
            msg += ' (acting on {})'.format(f2b_filelist)
        msg += ', '

        perfdata += lib.base.get_perfdata(jail, f2b_currently_banned, None, args.WARN, args.CRIT, 0, None)
        if f2b_currently_banned >= args.CRIT:
            state = lib.base.get_worst(state, STATE_CRIT)
        elif f2b_currently_banned >= args.WARN:
            state = lib.base.get_worst(state, STATE_WARN)

    msg = msg[:-2]
    lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
