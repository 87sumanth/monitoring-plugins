#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020012801'

DESCRIPTION = 'Counts how many users are currently logged in, both via tty and pts.'

DEFAULT_WARN_PTS = None
DEFAULT_WARN_TTY = 1
DEFAULT_CRIT_PTS = None
DEFAULT_CRIT_TTY = None

bash_command = '/usr/bin/w'


#====================
import argparse
from traceback import print_exc

from lib.globals import *
from lib.utils import execute_command
from lib.output import unpack_perfdata, state_to_string
from lib.parse_arguments import csv
from lib.parse_input import evaluate_greater


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-c', '--critical',
        default = [DEFAULT_CRIT_TTY, DEFAULT_CRIT_PTS],
        dest = 'CRIT',
        help = 'Set the critical threshold for logged in tty/pts users, in the format "3,10". Default: %(default)s',
        type = csv,
        )

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__),
        )

    parser.add_argument('-w', '--warning',
        default = [DEFAULT_WARN_TTY, DEFAULT_WARN_PTS],
        dest = 'WARN',
        help = 'Set the warning threshold for logged in tty/pts users, in the format "1,5". Default: %(default)s',
        type = csv,
        )
    
    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    if parsed.WARN[0] and parsed.WARN[0] != 'None':
        WARN_TTY = int(parsed.WARN[0])
    else:
        WARN_TTY = None

    if parsed.WARN[1] and parsed.WARN[1] != 'None':
        WARN_PTS = int(parsed.WARN[1])
    else:
        WARN_PTS = None

    if parsed.CRIT[0] and parsed.CRIT[0] != 'None':
        CRIT_TTY = int(parsed.CRIT[0])
    else:
        CRIT_TTY = None

    if parsed.CRIT[1] and parsed.CRIT[1] != 'None':
        CRIT_PTS = int(parsed.CRIT[1])
    else:
        CRIT_PTS = None


    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(bash_command)
    if (stderr or retc != 0):
        print('Bash command `{}` failed.'.format(bash_command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)
    result = stdout.strip()


    # calculating the final check state
    lines = result.splitlines()[1:] # ignore the first line
    count_pts = 0
    count_tty = 0
    for line in lines:
        value = line.split()[1]
        if 'tty' in value or ':' in value:
            # for example, ":0", the 0. host display (https://unix.stackexchange.com/questions/16815/what-does-display-0-0-actually-mean)
            count_tty += 1

        if 'pts' in value:
            count_pts += 1

    msg = ''
    perfdata =  unpack_perfdata('tty', count_tty, None, WARN_TTY, CRIT_TTY, 0, None)
    perfdata += unpack_perfdata('pts', count_pts, None, WARN_PTS, CRIT_PTS, 0, None)
    state = STATE_OK

    if count_tty == 0 and count_pts == 0:
        msg = 'No one is logged in.'
    else:
        if CRIT_TTY and count_tty >= CRIT_TTY:
            msg += 'TTY: {} (CRIT)'.format(count_tty)
            state = get_greater_state(state, STATE_CRIT)
        elif WARN_TTY and count_tty >= WARN_TTY:
            msg += 'TTY: {} (WARN)'.format(count_tty)
            state = get_greater_state(state, STATE_WARN)
        else:
            msg += 'TTY: {}'.format(count_tty)

        if CRIT_PTS and ount_pts >= CRIT_PTS:
            msg += ', PTS: {} (CRIT)'.format(count_pts)
            state = get_greater_state(state, STATE_CRIT)
        elif WARN_PTS and count_pts >= WARN_PTS:
            msg += ', PTS: {} (WARN)'.format(count_pts)
            state = get_greater_state(state, STATE_WARN)
        else:
            msg += ', PTS: {}'.format(count_pts)

        msg += '\n' + '\n'.join(lines[1:])

    print(msg.strip() + '|' + perfdata)
    exit(state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
