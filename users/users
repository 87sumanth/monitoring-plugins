#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019122701'

DESCRIPTION = 'Counts how many users are currently logged in, both via tty and pts.'

DEFAULT_WARN_PTS = None
DEFAULT_WARN_TTY = 1
DEFAULT_CRIT_PTS = None
DEFAULT_CRIT_TTY = None

bash_command = '/usr/bin/w'


#====================
import argparse

from lib2.globals import *
from lib2.utils import execute_command
from lib2.output import unpack_perfdata
from lib2.parse_arguments import csv_arg


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-c', '--critical', help='Set the critical threshold for logged in tty/pts users, in the format "3,10". Default: %(default)s',
                      default=[DEFAULT_CRIT_TTY,DEFAULT_CRIT_PTS], type=csv_arg, dest='CRIT')
    parser.add_argument('-V', '--version', action='version', version='{0}: v{1} by {2}' . format('%(prog)s', __version__, __author__))
    parser.add_argument('-w', '--warning', help='Set the warning threshold for logged in tty/pts users, in the format "1,5". Default: %(default)s',
                      default=[DEFAULT_WARN_TTY,DEFAULT_WARN_PTS], type=csv_arg, dest='WARN')
    
    return parser.parse_args()


def get_new_state(old_state, new_state):
    if old_state == STATE_CRIT or new_state == STATE_CRIT:
        return STATE_CRIT
    if old_state == STATE_OK and new_state == STATE_OK:
        return STATE_OK
    return STATE_WARN


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    WARN_TTY = int(parsed.WARN[0]) if parsed.WARN[0] else None
    WARN_PTS = int(parsed.WARN[1]) if parsed.WARN[1] else None

    CRIT_TTY = int(parsed.CRIT[0]) if parsed.CRIT[0] else None
    CRIT_PTS = int(parsed.CRIT[1]) if parsed.CRIT[1] else None


    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(bash_command, shell=True)
    if (stderr or retc != 0):
        print('Bash command `{}` failed.'.format(bash_command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)
    result = stdout.strip()


    # calculating the final check state
    lines = result.splitlines()[1:] # ignore the first line
    count_pts = 0
    count_tty = 0
    for line in lines:
        # if 'tty' in line or ':0' in line: # todo :0 kommt zb in der uhrzeit vor
        if 'tty' in line:
            count_tty += 1
        if 'pts' in line:
            count_pts += 1


    msg = ''
    perfdata =  unpack_perfdata('tty', count_tty, None, WARN_TTY, CRIT_TTY, 0, None)
    perfdata += unpack_perfdata('pts', count_pts, None, WARN_PTS, CRIT_PTS, 0, None)
    state = STATE_OK

    if count_tty == 0 and count_pts == 0:
        msg = 'No one is logged in.'
    else:
        if CRIT_TTY and count_tty >= CRIT_TTY:
            msg += 'TTY: {} (CRIT)' . format(count_tty)
            state = get_new_state(state, STATE_CRIT)
        elif WARN_TTY and count_tty >= WARN_TTY:
            msg += 'TTY: {} (WARN)' . format(count_tty)
            state = get_new_state(state, STATE_WARN)
        else:
            msg += 'TTY: {}' . format(count_tty)

        if CRIT_PTS and ount_pts >= CRIT_PTS:
            msg += ', PTS: {} (CRIT)' . format(count_pts)
            state = get_new_state(state, STATE_CRIT)
        elif WARN_PTS and count_pts >= WARN_PTS:
            msg += ', PTS: {} (WARN)' . format(count_pts)
            state = get_new_state(state, STATE_WARN)
        else:
            msg += ', PTS: {}' . format(count_pts)


    msg += '\n\n' + '\n'.join(lines[1:])
    print(msg.strip() + '|' + perfdata)
    exit(state)


if __name__ == '__main__':
    main()
