#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import argparse
import json
import os
import sys

from traceback import print_exc

from lib.globals import STATE_OK, STATE_WARN, STATE_UNKNOWN

import lib.args
import lib.base

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020081701'

DESCRIPTION = 'Checks if there is an update for a python package installed via `pip`.'

pip_list_command = 'pip list --outdated --format=json'
pip_show_comand = 'pip show'


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V',
        '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__),
        )

    parser.add_argument(
        '--package',
        dest='PACKAGE',
        help='Name of the python package.',
        )

    parser.add_argument(
        '--virtualenv',
        dest='VIRTUALENV',
        help='Path of the virtualenv that will be activated before checking for updates. For example: "/opt/sphinx/bin/activate".',
        )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if args.TEST is None:
        # execute the shell command and return its result and exit code
        if args.VIRTUALENV:
            stdout, stderr, retc = lib.base.coe(lib.base.shell_exec('. {} && {}'.format(args.VIRTUALENV, pip_list_command), shell=True))
        else:
            stdout, stderr, retc = lib.base.coe(lib.base.shell_exec(pip_list_command))
        if retc != 0:
            lib.base.oao('{}'.format(stderr), STATE_UNKNOWN)
    else:
        # do not call the command, put in test data
        if args.TEST[0] and os.path.isfile(args.TEST[0]):
            f = open(args.TEST[0], 'r')
            stdout = f.read()
            f.close()
        else:
            stdout = args.TEST[0]
        if args.TEST[1] and os.path.isfile(args.TEST[1]):
            f = open(args.TEST[1], 'r')
            stderr = f.read()
            f.close()
        else:
            stderr = args.TEST[1]
        retc = int(args.TEST[2])

    result = json.loads(stdout)

    for package in result:
        if package['name'] == args.PACKAGE:
            lib.base.oao('{} {} is available (installed: {}).'.format(args.PACKAGE, package['version'], package['latest_version']), STATE_WARN)

    if args.TEST is None:
    # execute the shell command and return its result and exit code
        if args.VIRTUALENV:
            stdout, stderr, retc = lib.base.coe(lib.base.shell_exec('. {} && {} {}'.format(args.VIRTUALENV, pip_show_comand, args.PACKAGE), shell=True))
        else:
            stdout, stderr, retc = lib.base.coe(lib.base.shell_exec('{} {}'.format(pip_show_comand, args.PACKAGE)))
    else:
        # do not call the command, put in test data
        if args.TEST[3] and os.path.isfile(args.TEST[3]):
            f = open(args.TEST[3], 'r')
            stdout = f.read()
            f.close()
        else:
            stdout = args.TEST[3]
        if args.TEST[4] and os.path.isfile(args.TEST[4]):
            f = open(args.TEST[4], 'r')
            stderr = f.read()
            f.close()
        else:
            stderr = args.TEST[4]
        retc = int(args.TEST[5])
    if retc != 0:
        lib.base.oao('{}'.format(stderr), STATE_UNKNOWN)

    for line in stdout.splitlines():
        if line.startswith('Version: '):
            installed_version = line.split(': ')[1]
            break

    lib.base.oao('{} {} is up to date.'.format(args.PACKAGE, installed_version), STATE_OK)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
