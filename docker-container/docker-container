#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020010901'

DESCRIPTION = 'Checks the stats and number of docker containers.'

command_installed = 'command -v docker'
command_stats = 'docker stats --no-stream'
command_info = 'docker info'

# for testing
# command_installed = 'true'
# command_stats = 'cat examples/EXAMPLE02-stats'
# command_info = 'cat examples/EXAMPLE02-info'

DEFAULT_STAT_WARN = 90.0
DEFAULT_STAT_CRIT = 95.0

DEFAULT_CONTAINERS_WARN = None
DEFAULT_CONTAINERS_CRIT = None
DEFAULT_RUNNING_CONTAINERS_WARN = None
DEFAULT_RUNNING_CONTAINERS_CRIT = None

#====================

import argparse
from traceback import print_exc

from lib.globals import *
from lib.utils import execute_command
from lib.output import unpack_perfdata, state_to_string, format_as_table
from lib.parse_arguments import csv
from lib.parse_input import evaluate_greater, evaluate_smaller, mltext2array, str2bytes

def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold for the CPU and memory usage percentage. Default: %(default)s',
        dest = 'STAT_WARN',
        type = float,
        default = DEFAULT_STAT_WARN,
        )

    parser.add_argument('-c', '--critical',
        help = 'Set the critical threshold for the CPU and memory usage percentage. Default: %(default)s',
        dest = 'STAT_CRIT',
        type = float,
        default = DEFAULT_STAT_CRIT,
        )

    parser.add_argument('--w_containers',
        help = 'Set the warning threshold for the number of total containers. Default: %(default)s',
        dest = 'CONTAINERS_WARN',
        type = int,
        default = DEFAULT_CONTAINERS_WARN,
        )

    parser.add_argument('--c_containers',
        help = 'Set the critical threshold for the number of total containers. Default: %(default)s',
        dest = 'CONTAINERS_CRIT',
        type = int,
        default = DEFAULT_CONTAINERS_CRIT,
        )

    parser.add_argument('--w_running_containers',
        help = 'Set the warning threshold for the number of running containers. Default: %(default)s',
        dest = 'RUNNING_CONTAINERS_WARN',
        type = int,
        default = DEFAULT_RUNNING_CONTAINERS_WARN,
        )

    parser.add_argument('--c_running_containers',
        help = 'Set the critical threshold for the number of running containers. Default: %(default)s',
        dest = 'RUNNING_CONTAINERS_CRIT',
        type = int,
        default = DEFAULT_RUNNING_CONTAINERS_CRIT,
        )

    parser.add_argument('--docker_names',
        help = 'Set a list of container names which should be Up, in the format "containername1,containername2".',
        dest = 'DOCKER_NAMES',
        type = csv,
        )

    return parser.parse_args()


def main():
    try:
        parsed = parse_args()
    except:
        exit(STATE_UNKNOWN)

    # check if shell command is available
    stdout, stderr, retc = execute_command(command_installed)
    if (retc != 0):
        print('"docker" is missing.')
        exit(STATE_UNKNOWN)

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(command_stats)
    if (stderr or retc != 0):
        print('Bash command `{}` failed.'.format(command_stats))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)

    result_stats = mltext2array(stdout, skip_header=True, sort_key=1)

    overall_state = STATE_OK
    msg = ''
    table_data = []
    perfdata = ''
    cpu_sum = 0
    running_container_names = []
    for container in result_stats:
        if container[0] != '--':
            state = STATE_OK
            container_id, name, cpu_pcent, mem_usage, tmp, mem_limit, mem_pcent, net_in, tmp, net_out, block_in, tmp, block_out, pids = container
            running_container_names.append(name)
            cpu_sum += float(cpu_pcent.replace('%', ''))

            cpu_pcent_raw = float(cpu_pcent.replace('%', ''))
            state = get_greater_state(state, evaluate_greater(cpu_pcent_raw, parsed.STAT_WARN, parsed.STAT_CRIT))
            perfdata += unpack_perfdata('{}_cpu'.format(name), cpu_pcent_raw, '%', parsed.STAT_WARN, parsed.STAT_CRIT, 0, 100)

            mem_pcent_raw = float(mem_pcent.replace('%', ''))
            state = get_greater_state(state, evaluate_greater(mem_pcent_raw, parsed.STAT_WARN, parsed.STAT_CRIT))
            perfdata += unpack_perfdata('{}_mem'.format(name), mem_pcent_raw, '%', parsed.STAT_WARN, parsed.STAT_CRIT, 0, 100)

            overall_state = get_greater_state(overall_state, state)

            mem_string = '{} of {} ({})'.format(mem_usage, mem_limit, mem_pcent)
            net_string = '{}/{}'.format(net_out, net_in)
            block_string = '{}/{}'.format(block_in, block_out)

            table_data.append({
                'name': '{} {}'.format(name, state_to_string(state)),
                'cpu_pcent': cpu_pcent,
                'mem_string': mem_string,
                'net_string': net_string,
                'block_string': block_string,
                'pids': pids,
                })


    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(command_info)
    if (stderr or retc != 0):
        print('Bash command `{}` failed.'.format(bash_command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)


    for line in stdout.splitlines():
        line = line.strip()
        if line.startswith('Containers: '):
            container_count = int(line.split(': ')[1])

        if line.startswith('Running: '):
            running_container_count = int(line.split(': ')[1])


    container_count_state = evaluate_smaller(container_count, parsed.CONTAINERS_WARN, parsed.CONTAINERS_CRIT)
    overall_state = get_greater_state(overall_state, container_count_state)
    perfdata += unpack_perfdata('container_count', container_count, None, parsed.CONTAINERS_WARN, parsed.CONTAINERS_CRIT, 0, None)
    if container_count_state != STATE_OK:
        msg += '\nThe number of present containers is less than expected (W: {}, C: {}).'.format(parsed.CONTAINERS_WARN, parsed.CONTAINERS_CRIT)


    running_container_count_state = evaluate_smaller(running_container_count, parsed.RUNNING_CONTAINERS_WARN, parsed.RUNNING_CONTAINERS_CRIT)
    overall_state = get_greater_state(overall_state, running_container_count_state)
    perfdata += unpack_perfdata('running_container_count', running_container_count, None, parsed.RUNNING_CONTAINERS_WARN, parsed.RUNNING_CONTAINERS_CRIT, 0, None)
    if running_container_count_state != STATE_OK:
        msg += '\nThe number of running containers is less than expected (W: {}, C: {}).'.format(parsed.RUNNING_CONTAINERS_WARN, parsed.RUNNING_CONTAINERS_CRIT)

    DOCKER_NAMES = parsed.DOCKER_NAMES
    if DOCKER_NAMES:
        docker_names_temp = list(DOCKER_NAMES)
        for name in docker_names_temp:
            if name in running_container_names:
                DOCKER_NAMES.remove(name)

        if len(DOCKER_NAMES) > 0:
            overall_state = get_greater_state(overall_state, STATE_WARN)
            msg += '\nWARN: The following containers should be running but are not:'
            for container_name in DOCKER_NAMES:
                msg += '\n* ' + container_name
            msg += '\n'

    if container_count != 0 and running_container_count == 0:
        overall_state = get_greater_state(overall_state, STATE_WARN)
        msg = '{} containers are present but none are running.'.format(container_count) + msg
    else:
        if overall_state == STATE_OK:
            msg = 'All containers are ok. ({} running, {}% CPU)'.format(running_container_count, cpu_sum) + msg
        else:
            msg = 'One or more errors. ({} running, {}% CPU)'.format(running_container_count, cpu_sum) + msg

    table = format_as_table(table_data, ['name', 'cpu_pcent', 'mem_string', 'net_string', 'block_string', 'pids'], ['Name', 'CPU', 'MEM', 'Net (RX/TX)', 'Blocks (r/w)', 'PIDs'], 'name')

    if table:
        print(msg + '\n\n' + table + '|' + perfdata.strip())
    else:
        print(msg + '|' + perfdata.strip())
    exit(overall_state)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
