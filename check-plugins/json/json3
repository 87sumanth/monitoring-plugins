#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import argparse
import json
import sys
import urllib
from traceback import print_exc

import lib.base3
import lib.url3
from lib.globals3 import STATE_UNKNOWN

try:
    from smb.SMBHandler import SMBHandler
except ImportError as e:
    lib.base3.oao('Python module "pysmb" is not installed.', STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020121801'

DESCRIPTION = 'This check parses a json array from a file or url and simply returns the message, state and perfdata from the json.'


DEFAULT_INSECURE = False
DEFAULT_MESSAGE_KEY = 'message'
DEFAULT_NO_PROXY = False
DEFAULT_PERFDATA_KEY = 'perfdata'
DEFAULT_STATE_KEY = 'state'
DEFAULT_TIMEOUT = 3


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument('--filename',
        help='Set the url of the json file. This is mutually exclusive with -u / --url.',
        dest='FILENAME',
        type=str,
        )

    parser.add_argument('--message-key',
        help='Name of the json array key containing the output message. Default: %(default)s',
        dest='MESSAGE_KEY',
        type=str,
        default=DEFAULT_MESSAGE_KEY,
        )

    parser.add_argument('--perfdata-key',
        help='Name of the json array key containing the perfdata. Default: %(default)s',
        dest='PERFDATA_KEY',
        type=str,
        default=DEFAULT_PERFDATA_KEY,
        )

    parser.add_argument('--state-key',
        help='Name of the json array key containing the state. Default: %(default)s',
        dest='STATE_KEY',
        type=str,
        default=DEFAULT_STATE_KEY,
        )

    parser.add_argument('-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('-u', '--url',
        help='Set the url of the json file, either starting with "http://", "https://" or "smb://". This is mutually exclusive with --filename.',
        dest='URL',
        type=str,
        )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure"'
        ' SSL connections. Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
        )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
        )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if args.FILENAME and args.URL:
        lib.base3.oao('The --filename and -u / --url parameter are mutually exclusive. Please only use one.', STATE_UNKNOWN)

    if args.FILENAME:
        with open(args.FILENAME) as json_file:
            result = json.load(json_file)

    if args.URL:
        proto = args.URL.split(':')
        if len(proto) < 2:
            lib.base3.oao(f'Could not parse the protocol of the url "{args.URL}".', STATE_UNKNOWN)
        proto = proto[0]

        if proto in ['http', 'https']:
            result = lib.base3.coe(lib.url3.fetch_json(
                args.URL, insecure=args.INSECURE, no_proxy=args.NO_PROXY,
                timeout=args.TIMEOUT
                ))
        elif proto == 'smb':
            smb_handler = urllib.request.build_opener(SMBHandler)
            urllib.request.install_opener(smb_handler)
            with urllib.request.urlopen(args.URL, timeout=args.TIMEOUT) as response:
                try:
                    result = json.loads(response.read().decode('utf-8'))
                except:
                    lib.base3.oao('ValueError: No JSON object could be decoded', STATE_UNKNOWN)
        else:
            lib.base3.oao(f'The protocol "{proto}" is not supported.', STATE_UNKNOWN)

    msg = result.get(args.MESSAGE_KEY, "") if args.MESSAGE_KEY else ""
    state = result.get(args.STATE_KEY, STATE_UNKNOWN) if args.STATE_KEY else STATE_UNKNOWN
    perfdata = result.get(args.PERFDATA_KEY) if args.PERFDATA_KEY else None

    lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
