#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021021701'

DESCRIPTION = 'Displays the top 3 processes which cause the most IO.'

#====================
from lib.globals2 import *

import lib.base2

import argparse
from traceback import print_exc

try:
    import psutil # pylint: disable=C0413
except ImportError:
    print('Python module "psutil" is not installed.')
    sys.exit(STATE_UNKNOWN)


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
                        action='version',
                        version='%(prog)s: v{} by {}'.format(
                            __version__, __author__)
                        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    msg = ''
    cnt = {}

    try:
        for p in [x.as_dict(attrs=['name', 'io_counters']) for x in psutil.process_iter()]:
            if p['io_counters']:
                if p['name'] not in cnt.keys():
                    cnt[p['name']] = {'r': 0, 'w': 0}
                cnt[p['name']]['r'] += p['io_counters'].read_bytes
                cnt[p['name']]['w'] += p['io_counters'].write_bytes
    except psutil.NoSuchProcess:
        pass

    # cnt.items: [('WebKitNetworkProcess', {'r': 1716224, 'w': 0}), ('ibus-x11', {'r': 0, 'w': 0}), ...
    cnt = sorted(cnt.items(), key=lambda x: x[1]['r']+x[1]['w'], reverse=True)
    for i, (key, value) in enumerate(cnt):
        if i > 2:
            break
        msg += '{}. {}: {}/{} (r/w), '.format(i + 1, key, lib.base2.bytes2human(
            value['r']), lib.base2.bytes2human(value['w']))

    lib.base2.oao(msg[:-2], STATE_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
