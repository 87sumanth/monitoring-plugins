#! /usr/bin/env python2
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.base2 # pylint: disable=C0413
from lib.globals2 import STATE_OK, STATE_UNKNOWN # pylint: disable=C0413

try:
    import psutil # pylint: disable=C0413
except ImportError:
    lib.base2.oao('Python module "psutil" is not installed.', STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021101001'

DESCRIPTION = 'Displays the top 3 processes which cause the most IO.'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # init some vars
    msg = ''
    cnt = {}

    # fetch data
    try:
        for p in [x.as_dict(attrs=['name', 'io_counters']) for x in psutil.process_iter()]:
            if p['io_counters']:
                if p['name'] not in cnt.keys():
                    cnt[p['name']] = {'r': 0, 'w': 0}
                cnt[p['name']]['r'] += p['io_counters'].read_bytes
                cnt[p['name']]['w'] += p['io_counters'].write_bytes
    except psutil.NoSuchProcess:
        pass

    # cnt.items: [('WebKitNetworkProcess', {'r': 1716224, 'w': 0}), ('ibus-x11', {'r': 0, 'w': 0}), ...
    cnt = sorted(cnt.items(), key=lambda x: x[1]['r']+x[1]['w'], reverse=True)
    for i, (key, value) in enumerate(cnt):
        if i > 2:
            break
        msg += '{}. {}: {}/{} (r/w), '.format(i + 1, key, lib.base2.bytes2human(
            value['r']), lib.base2.bytes2human(value['w']))

    # over and out
    lib.base2.oao(msg[:-2], STATE_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base2.cu()
