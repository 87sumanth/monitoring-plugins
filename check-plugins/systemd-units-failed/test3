#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import unittest

from lib.globals3 import STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT
import lib.base3
import lib.shell3

        
class TestCheck(unittest.TestCase):

    check = './systemd-units-failed3'

    def test_if_check_runs_EXAMPLE01(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE01,,0'))
        self.assertRegex(stdout, r'Everything is ok.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE02(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE02,,0'))
        self.assertRegex(stdout, r'There is 1 failed unit.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE03(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE03,,0'))
        self.assertRegex(stdout, r'There are 2 failed units.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE03_ignore1(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --ignore=openipmi.service --test=examples/EXAMPLE03,,0'))
        self.assertRegex(stdout, r'There is 1 failed unit.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE03_ignore2(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --ignore=openipmi.service --ignore=smartd.service --test=examples/EXAMPLE03,,0'))
        self.assertRegex(stdout, r'Everything is ok.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE03_ignore3(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --ignore=openipmi.service --ignore=smartd.service --ignore=fantasy.mount --test=examples/EXAMPLE03,,0'))
        self.assertRegex(stdout, r'Everything is ok.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE04(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE04,,0'))
        self.assertRegex(stdout, r'There is 1 failed unit.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE05(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE05,,0'))
        self.assertRegex(stdout, r'There are 3 failed units.')
        self.assertRegex(stdout, r'unit               ! load      ! active ! sub    ! description')
        self.assertRegex(stdout, r'tomcat8.service    ! not-found ! failed ! failed ! tomcat8.service')
        self.assertRegex(stdout, r'varnish.service    ! loaded    ! failed ! failed ! Varnish HTTP accelerator')
        self.assertRegex(stdout, r'varnishlog.service ! loaded    ! failed ! failed ! Varnish HTTP accelerator log daemon')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)


if __name__ == '__main__':
    unittest.main()