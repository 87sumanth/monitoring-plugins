#! /usr/bin/env python2
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413
from traceback import print_exc # pylint: disable=C0413

import lib.args2 # pylint: disable=C0413
import lib.base2 # pylint: disable=C0413
from lib.globals2 import STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021060201'

DESCRIPTION = """Warns on any failed systemd units."""


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args2.csv,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if args.TEST is None:
        # get the values the normal way
        stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(
            'systemctl --state=failed --no-pager --no-legend'))
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.base2.test(args.TEST)

    if retc != 0:
        lib.base2.oao('systemctl was unable to return any data.', STATE_UNKNOWN)

    failed_units = stdout.splitlines()
    if len(failed_units) == 0:
        msg = 'Everything is ok.'
        table = ''
        state = STATE_OK
    else:
        msg = 'There {} {} failed {}.\n'.format(
            lib.base2.pluralize('', len(failed_units), 'is,are'),
            len(failed_units),
            lib.base2.pluralize('unit', len(failed_units)),
            )
        table_data = []
        for line in failed_units:
            unit = line.split()
            table_data.append({
                'unit': unit[0],
                'load': unit[1],
                'active': unit[2],
                'sub': unit[3],
                'description': ' '.join(unit[4:]),
                })
            state = STATE_WARN
        table = lib.base2.get_table(
            table_data,
            ['unit', 'load', 'active', 'sub', 'description'],
            ['unit', 'load', 'active', 'sub', 'description'],
            )

    perfdata = lib.base2.get_perfdata(
        'systemd-units-failed', len(failed_units), None, 1, None, 0, None)

    # over and out
    lib.base2.oao('{}\n\n{}'.format(msg, table), state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        print_exc()
        sys.exit(STATE_UNKNOWN)
