#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020050101'

DESCRIPTION = 'Checks the number of files presently opened, in percent.'

DEFAULT_WARN  = 90
DEFAULT_CRIT  = 95

#====================
from lib.globals2 import *

import lib.base2

import argparse
import os
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument('-c', '--critical',
        help='Set the critical threshold file number usage percentage. Default: %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
        )

    parser.add_argument('-w', '--warning',
        help='Set the warning threshold file number usage percentage. Default: %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    msg = ''
    perfdata = ''
    state = STATE_OK

    with open('/proc/sys/fs/file-nr') as file:
        fs = [int(item) for item in file.readline().split('\t')]

    files_used = round(fs[0] / fs[2] * 100, 1)

    msg += '{}% files used.'.format(files_used)
    perfdata += lib.base2.get_perfdata('fs-file-usage', files_used, '%', args.WARN, args.CRIT, 0, 100)
    state = lib.base2.get_state(files_used, args.WARN, args.CRIT, 'ge')

    lib.base2.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
