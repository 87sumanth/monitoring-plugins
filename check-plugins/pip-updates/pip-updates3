#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413
from traceback import print_exc # pylint: disable=C0413

import lib.args3 # pylint: disable=C0413
import lib.base3 # pylint: disable=C0413
from lib.globals3 import STATE_CRIT, STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021060901'

DESCRIPTION = """Checks if there are updates for python packages installed via `pip`."""

DEFAULT_WARN = 10
DEFAULT_CRIT = 100


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical threshold for the number of pending updates. Default: %(default)s',
        dest='CRIT',
        default=DEFAULT_CRIT,
        type=lib.args3.int_or_none,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args3.csv,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning threshold for the number of pending updates. Default: %(default)s',
        dest='WARN',
        default=DEFAULT_WARN,
        type=lib.args3.int_or_none,
    )

    parser.add_argument(
        '--virtualenv',
        dest='VIRTUALENV',
        help='Path of the virtualenv that will be activated before checking for updates. For example: "/opt/sphinx-venv/bin/activate".',
        )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    # pip: don't use the --format=json parameter, because older pip versions don't have it
    if args.TEST is None:
        if args.VIRTUALENV:
            cmd = '. {} && {}'.format(args.VIRTUALENV, 'pip list --outdated')
            stdout, stderr, retc = lib.base3.coe(lib.base3.shell_exec(cmd, shell=True))
        else:
            cmd = 'pip list --outdated'
            stdout, stderr, retc = lib.base3.coe(lib.base3.shell_exec(cmd))
    else:
        # do not call the command, put in test data
        if args.TEST[0] and os.path.isfile(args.TEST[0]):
            f = open(args.TEST[0], 'r') # pylint: disable=C0103
            stdout = f.read()
            f.close()
        else:
            stdout = args.TEST[0]
        if args.TEST[1] and os.path.isfile(args.TEST[1]):
            f = open(args.TEST[1], 'r') # pylint: disable=C0103
            stderr = f.read()
            f.close()
        else:
            stderr = args.TEST[1]
        retc = args.TEST[2]
    if retc != 0:
        lib.base3.oao('{}'.format(stderr), STATE_UNKNOWN)

    # init some vars
    msg_body = ''
    perfdata = ''

    # analyze data
    cnt = 0
    for package in stdout.splitlines():
        if package.startswith('Package '):
            continue
        if package.startswith('--------'):
            continue
        cnt += 1
        msg_body += '{}\n'.format(package)

    # build the message
    state = lib.base3.get_state(cnt, args.WARN, args.CRIT)
    if args.VIRTUALENV:
        msg = 'venv {}. '.format(args.VIRTUALENV)
    else:
        msg = 'Not running in a venv. '
    if not stderr and state == STATE_OK:
        msg += 'Everyhing is ok.'
    elif stderr and state == STATE_OK:
        msg += 'pip is complaining about something or about itself, but '
        if cnt > 0:
            msg += 'most of the '
        msg += 'packages are up to date. '.format()
    elif stderr and state != STATE_OK:
        msg += 'pip is complaining about something or about itself, plus '
    if cnt > 0:
        msg += '{} outdated packages{}.'.format(cnt, lib.base3.state2str(state, prefix=' '))
        msg += '\n\n'
        msg += msg_body
    perfdata += lib.base3.get_perfdata('pip_outdated_packages', cnt, None, args.WARN, args.CRIT, 0, None)

    # over and out
    lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        print_exc()
        sys.exit(STATE_UNKNOWN)
