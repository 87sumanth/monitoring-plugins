#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import argparse
import sys
import socket
from socket import AF_INET, SOCK_STREAM, SOCK_DGRAM
from traceback import print_exc
import lib.base3
from lib.globals3 import *

try:
    import psutil
except ImportError as e:
    print('Python module "psutil" is not installed.')
    sys.exit(STATE_UNKNOWN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020050101'

DESCRIPTION = 'Counts tcp, tcp6, udp and udp6 connections.'

AF_INET6 = getattr(socket, 'AF_INET6', object())
proto_map = {
    (AF_INET, SOCK_STREAM): 'tcp',
    (AF_INET6, SOCK_STREAM): 'tcp6',
    (AF_INET, SOCK_DGRAM): 'udp',
    (AF_INET6, SOCK_DGRAM): 'udp6',
}


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        print_exc(e)
        sys.exit(STATE_UNKNOWN)

    proc_names = {}
    # Changed in psutil version 5.3.0: added “attrs” and “ad_value” parameters.
    if lib.base3.version(psutil.__version__) >= lib.base3.version('5.3.0'):
        for p in psutil.process_iter(attrs=['pid', 'name']):
            proc_names[p.info['pid']] = p.info['name']
    else:
        for p in psutil.process_iter():
            try:
                proc_names[p.pid] = p.name()
            except psutil.Error:
                pass

    stats = {}
    for c in psutil.net_connections(kind='inet'):
        key = proto_map[(c.family, c.type)] + '_' + c.status
        if key not in list(stats.keys()):
            stats[key] = 1
        else:
            stats[key] += 1

    msg = ''
    perfdata = ''

    for item in lib.base3.sort(stats, reverse=True):
        proto, value = item
        if value:
            msg += '{}: {}, '.format(proto.replace('_', ' '), value)
        perfdata += lib.base3.get_perfdata(proto, value, None, None, None, None, None)

    lib.base3.oao(msg[:-2], STATE_OK, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
