#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021021702'

DESCRIPTION = 'Checks dmesg for emerg, alert, crit and err messages. Uses "dmesg --level=emerg,alert,crit,err --reltime". If you fixed the issues (or just want to clear them), use "dmesg --clear" to clear the Kernel Ring Buffer Messages.'

command = 'dmesg --level=emerg,alert,crit,err --reltime'

# ignore false positives / bugs:
ignore = [
    ' Asking for cache data failed',
    ' Assuming drive cache: write through',
    ' cpufreq: __cpufreq_add_dev: ->get() failed',
    ' ERST: Failed to get Error Log Address Range.',
    ' Ignoring unsafe software power cap!',
    ' ioctl error in smb2_get_dfs_refer rc=-5',         # https://access.redhat.com/solutions/3496971
    ' No Caching mode page found',
    ' SMBus Host Controller not enabled!',
    ' tsc: Fast TSC calibration failed',
    ' unhandled rdmsr: ',                               # https://access.redhat.com/solutions/59299
    ' unhandled wrmsr: ',                               # https://bugzilla.redhat.com/show_bug.cgi?id=874627
    'i8042: No controller found',
]


#====================
from lib.globals2 import *

import lib.args2
import lib.base2

import argparse
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument('--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args2.csv,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    if args.TEST == None:
        # execute the shell command and return its result and exit code
        stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(command))
        if (stderr or retc != 0):
            lib.base2.oao('{}'.format(stderr), STATE_UNKNOWN)
    else:
        # do not call the command, put in test data
        if args.TEST[0] and os.path.isfile(args.TEST[0]):
            f = open(args.TEST[0], 'r')
            stdout = f.read()
            f.close()
        else:
            stdout = args.TEST[0]
        if args.TEST[1] and os.path.isfile(args.TEST[1]):
            f = open(args.TEST[1], 'r')
            stderr = f.read()
            f.close()
        else:
            stderr = args.TEST[1]
        retc = args.TEST[2]

    result = stdout.strip()
    result = lib.base2.filter_mltext(result, ignore)

    if len(result) > 0:
        msg = '{} in dmesg.\n{}'.format(lib.base2.pluralize('Error', len(result)), result)
        state = STATE_CRIT
    else:
        msg = 'No important errors in dmesg.'
        state = STATE_OK

    lib.base2.oao(msg, state, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
