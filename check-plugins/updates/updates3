#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


import argparse
import sys
from traceback import print_exc

import lib.args3
import lib.base3
from lib.globals3 import STATE_OK, STATE_UNKNOWN


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021021701'

DESCRIPTION = 'Checks the number of pending updates.'

DEFAULT_WARN = 1
DEFAULT_CRIT = 50


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__),
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        default=DEFAULT_CRIT,
        dest='CRIT',
        help='Set the critical threshold for the number of pending updates. Default: %(default)s',
        type=lib.args3.int_or_none,
    )

    parser.add_argument(
        '-w', '--warning',
        default=DEFAULT_WARN,
        dest='WARN',
        help='Set the warning threshold for the number of pending updates. Default: %(default)s',
        type=lib.args3.int_or_none,
    )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    cmd = '''
    powershell -Command "
    $WindowsUpdates = New-Object -ComObject 'Microsoft.Update.Session';
    $SearchIndex = $WindowsUpdates.CreateUpdateSearcher();
    $Pending = $SearchIndex.Search('IsInstalled=0');
    foreach ($update in $Pending.Updates) {
        [string]$name = [string]::Format('{0} [{1}]', $update.Title, $update.LastDeploymentChangeTime);
        Write-Output $name;
    }
    "'''
    # execute the shell command and return its result and exit code
    stdout, stderr, retc = lib.base3.coe(lib.base3.shell_exec(cmd))
    if stderr:
        # Could not find any documentation in the return codes of 'query user'. Therefore we assume any is ok.
        lib.base3.oao('{}'.format(stderr), STATE_UNKNOWN)
    result = stdout.strip()

    count = sum(1 for line in result.splitlines())
    perfdata = lib.base3.get_perfdata('pending_updates', count, None, args.WARN, args.CRIT, 0, None)

    if count:
        state = lib.base3.get_state(count, args.WARN, args.CRIT)
        lib.base3.oao(f'There are {count} pending updates:\n\n* ' + result.replace('\n', '\n* '), state, perfdata, always_ok=args.ALWAYS_OK)
    lib.base3.oao('There are no pending updates.', STATE_OK, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
