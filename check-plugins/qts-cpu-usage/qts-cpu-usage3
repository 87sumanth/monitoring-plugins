#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import base64 # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.base3 # pylint: disable=C0413
import lib.db_sqlite3 # pylint: disable=C0413
import lib.txt3 # pylint: disable=C0413
import lib.url3 # pylint: disable=C0413
from lib.globals3 import STATE_OK, STATE_WARN, STATE_CRIT, STATE_UNKNOWN # pylint: disable=C0413

try:
    import xmltodict # pylint: disable=C0413
except ImportError as e:
    lib.base3.oao('Python module "xmltodict" is not installed.', STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2022021602'

DESCRIPTION = """Returns the current system-wide CPU utilization as a percentage from QNAP
                 Appliances running QTS via API. Warns only if the overall CPU usage is above a
                 certain threshold within the last n checks (default: 5). The authentication is
                 done via a single API token (Token-based authentication), not via Session-based
                 authentication, which is stated as "legacy"."""

DEFAULT_WARN = 80      # %
DEFAULT_CRIT = 90      # %
DEFAULT_COUNT = 5       # measurements; if check runs once per minute, this is a 5 minute interval
DEFAULT_INSECURE = False
DEFAULT_NO_PROXY = False
DEFAULT_TIMEOUT = 3
DEFAULT_USERNAME = 'admin'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--count',
        help='Number of times the value has to be above the given thresholds. Default: %(default)s',
        dest='COUNT',
        type=int,
        default=DEFAULT_COUNT,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical threshold CPU Usage Percentage. Default: %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--password',
        help='QTS Password.',
        dest='PASSWORD',
        required=True,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '--url',
        help='QTS-based Appliance URL, for example https://192.168.1.1:8080.',
        dest='URL',
        required=True,
    )

    parser.add_argument(
        '--username',
        help='QTS User. Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning threshold CPU Usage Percentage. Default: %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def get_from_db(conn, threshold):
    result = lib.base3.coe(lib.db_sqlite3.select(
        conn,
        '''
        SELECT count(*) as cnt
        FROM perfdata
        WHERE cpu_usage > :cpu_usage
        ''',
        {'cpu_usage': threshold},
        fetchone=True
    ))
    return int(result['cnt'])


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # authenticate and get the authSid
    url = '{}/cgi-bin/authLogin.cgi'.format(args.URL)
    data = {
        'user': args.USERNAME,
        'pwd': lib.txt3.to_text(base64.b64encode(lib.txt3.to_bytes(args.PASSWORD))),
    }
    result = lib.base3.coe(lib.url3.fetch(url, data=data, insecure=args.INSECURE, no_proxy=args.NO_PROXY, timeout=args.TIMEOUT))
    data = xmltodict.parse(result)['QDocRoot']

    auth_passed = data['authPassed']
    if auth_passed is not None and len(auth_passed) == 1 and auth_passed == "0":
        lib.base3.oao('Failed to authenticate.', STATE_UNKNOWN)
    authSid = data['authSid']

    # get the cpu usage
    url = '{}/cgi-bin/management/manaRequest.cgi?subfunc=sysinfo&hd=no&multicpu=1&sid={}'.format(args.URL, authSid)
    result = lib.base3.coe(lib.url3.fetch(url, data=data, insecure=args.INSECURE, no_proxy=args.NO_PROXY, timeout=args.TIMEOUT))
    data = xmltodict.parse(result)['QDocRoot']

    stats = {}
    stats['cpu_usage'] = float(data['func']['ownContent']['root']['cpu_usage'].replace('%', ''))

    # create the db table
    definition = '''
                cpu_usage REAL NOT NULL
        '''
    conn = lib.base3.coe(lib.db_sqlite3.connect(filename='qts-cpu-usage.db'))
    lib.base3.coe(lib.db_sqlite3.create_table(conn, definition))

    # save trend data to local sqlite database, limited to "count" rows max.
    lib.base3.coe(lib.db_sqlite3.insert(conn, stats))
    lib.base3.coe(lib.db_sqlite3.cut(conn, _max=args.COUNT))
    lib.base3.coe(lib.db_sqlite3.commit(conn))

    # now, calculate the WARN or CRIT.
    # overall state is not ok, if ...
    #   in a row in any column there is a value above the threshold
    #   and this is true for every row
    state = STATE_OK
    if get_from_db(conn, args.CRIT) == args.COUNT:
        state = STATE_CRIT
    elif get_from_db(conn, args.WARN) == args.COUNT:
        state = STATE_WARN
    lib.db_sqlite3.close(conn)

    # build the message
    msg = '{}%'.format(stats['cpu_usage'])
    perfdata = lib.base3.get_perfdata('cpu-usage', stats['cpu_usage'], '%', args.WARN, args.CRIT, 0, 100)

    # over and out
    lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
