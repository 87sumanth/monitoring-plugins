#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413
import tempfile # pylint: disable=C0413
from traceback import print_exc # pylint: disable=C0413

import lib.base3 # pylint: disable=C0413
import lib.disk3 # pylint: disable=C0413
from lib.globals3 import STATE_CRIT, STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021050501'

DESCRIPTION = """Tests whether a file can be written to a specific path and then deleted."""

DEFAULT_PATH = [tempfile.gettempdir()]
DEFAULT_SERVERITY = 'warn'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument('--path',
        help='Path to which the file is to be written and from which it will be deleted '
                '(repeating). Default: %(default)s',
        dest='PATH',
        default=DEFAULT_PATH,
        action='append',
    )

    parser.add_argument(
        '--severity',
        help='Severity for alerting. One of "warn" or "crit". Default: %(default)s',
        dest='SEVERITY',
        default=DEFAULT_SERVERITY,
        choices=['warn', 'crit'],
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # init some vars
    msg = ''
    state = STATE_OK

    filename = '__LINUXFABRIK_PATH_RW_TEST__'
    content = 'Linuxfabrik GmbH, Zurich, Switzerland'
    file_state = STATE_CRIT if args.SEVERITY == 'crit' else STATE_WARN

    # do the test
    for path in args.PATH:
        file = os.path.join(path, filename)

        # test writing the file
        success, result = lib.disk3.write_file(file, content)
        if not success:
            msg += '{}: {}{}, '.format(path, result, lib.base3.state2str(file_state, prefix=' '))
            state = file_state
        else:
            # test deleting the file
            success, result = lib.disk3.rm_file(file)
            if not success:
                msg += '{}: {}{}, '.format(path, result, lib.base3.state2str(file_state, prefix=' '))
                state = file_state

    # build the message
    if msg == '':
        msg = 'Everything is ok.'
    else:
        msg = msg[:-2]

    # over and out
    lib.base3.oao(msg, state, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        print_exc()
        sys.exit(STATE_UNKNOWN)
