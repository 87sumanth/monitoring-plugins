#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021042902'

DESCRIPTION = 'This check fetches information from a LibreNMS instance, using its API.'

DEFAULT_INSECURE = False
DEFAULT_LENGTHY = False
DEFAULT_NO_PROXY = False
DEFAULT_TIMEOUT = 3
DEFAULT_URL = 'http://localhost'


#====================
from lib.globals2 import *

import lib.args2
import lib.base2
import lib.librenms2

import argparse
from pprint import pprint
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL '
             'connections. Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--lengthy',
        help='Extended reporting.',
        dest='LENGTHY',
        action='store_true',
        default=DEFAULT_LENGTHY,
        )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
        )

    parser.add_argument(
        '--token',
        help='LibreNMS API token',
        dest='TOKEN',
        required=True,
        )

    parser.add_argument(
        '--url',
        help='LibreNMS API URL. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # init some vars
    state = STATE_OK
    perfdata = ''

    devices = {}
    alerts = {}
    
    # return a list of devices from LibreNMS
    result = lib.librenms2.get_data(args, '/api/v0/devices')

    # build an internal device list with some valuable properties
    device_count = result['count']
    for device in result['devices']:
        if device['disabled']:
            continue
        if device['disable_notify']:
            continue

        device_id = lib.librenms2.get_prop(device, 'device_id', 'int')
        devtype = lib.librenms2.get_prop(device, 'type')
        hardware = lib.librenms2.get_prop(device, 'hardware')
        hostname = lib.librenms2.get_prop(device, 'hostname')
        location = lib.librenms2.get_prop(device, 'location')
        os = lib.librenms2.get_prop(device, 'os')
        sys = lib.librenms2.get_prop(device, 'sysName')
        if not sys:
            sys = lib.librenms2.get_prop(device, 'sysDescr')
        uptime = lib.librenms2.get_prop(device, 'uptime', 'int')
        uptime = lib.base2.seconds2human(uptime) if uptime is not None else ''

        devices[device_id] = {}
        devices[device_id]['device_id'] = device_id
        devices[device_id]['devtype'] = devtype
        devices[device_id]['hardware'] = hardware
        devices[device_id]['hostname'] = hostname
        devices[device_id]['location'] = location
        devices[device_id]['os'] = os
        devices[device_id]['sys'] = sys
        devices[device_id]['timestamp'] = ''
        devices[device_id]['uptime'] = uptime

        devices[device_id]['state'] = STATE_OK
        devices[device_id]['alert_count'] = 0
        devices[device_id]['alert_rule'] = ''


    # return a list of alert rules
    alert_rules = lib.librenms2.get_data(args, '/api/v0/rules')

    # build a alert rule dictionary
    for alert_rule in alert_rules['rules']:
        alert_id = alert_rule['id']
        alert_name = alert_rule['name']
        alerts[alert_id] = alert_name


    # return a list of current alerts, but no "ok" or "acked"
    alert_list = lib.librenms2.get_data(args, '/api/v0/alerts?state=1')

    # check the state of each device and compute the overall state
    alert_count = result['count']
    for alert in alert_list['alerts']:
        device_id = lib.librenms2.get_prop(alert, 'device_id', 'int')
        old_device_state = devices[device_id]['state']
        new_device_state = lib.librenms2.get_state(alert['severity'])
        devices[device_id]['state'] = lib.base2.get_worst(old_device_state, new_device_state)
        state = lib.base2.get_worst(devices[device_id]['state'], state)
        devices[device_id]['alert_count'] += 1
        if old_device_state != devices[device_id]['state']:
            # report the newest/latest worst message only
            devices[device_id]['alert_rule'] = alerts[alert['rule_id']]
            devices[device_id]['timestamp'] = alert['timestamp']


    # create output
    table_values = []
    for device in devices.values():
        table_values.append({
            'devtype': device['devtype'],
            'hardware': device['hardware'],
            'hostname': device['hostname'],
            'location': device['location'],
            'os': device['os'],
            'sys': device['sys'],
            'timestamp': device['timestamp'],
            'uptime': device['uptime'],
            'state': lib.base2.state2str(device['state'], empty_ok=False),
            'alert_count': device['alert_count'],
            'alert_rule': device['alert_rule'],
            })

    if state == STATE_CRIT:
        msg = 'There are one or more criticals.\n\n'
    elif state == STATE_WARN:
        msg = 'There are one or more warnings.\n\n'
    else:
        msg = 'Everything is ok.\n\n'


    if len(table_values) > 0:
        if not args.LENGTHY:
            msg += lib.base2.get_table(
                table_values,
                ['hostname', 'sys', 'alert_count', 'state', 'alert_rule'],
                header=['Hostname', 'SysName', 'Alerts', 'Worst State', 'Latest & Worst Msg'],
                )
        else:
            msg += lib.base2.get_table(
                table_values,
                ['hostname', 'sys', 'alert_count', 'state', 'hardware', 'devtype', 'os', 'location', 'uptime', 'timestamp', 'alert_rule'],
                header=['Hostname', 'SysName', 'Alerts', 'Worst State', 'Hardware', 'Type', 'OS', 'Location', 'Uptime', 'Alert Timestamp', 'Latest & Worst Msg'],
                )

    # over and out
    lib.base2.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
