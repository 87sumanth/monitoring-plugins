#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

# inspired by
# * https://github.com/aparnachaudhary/nagios-plugin-jbossas7/blob/master/check_jbossas7.py
# * https://github.com/gtudan/nagios-plugin-wildlfy/blob/master/check_wildfly.py

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021041901'

DESCRIPTION = 'Returns metrics about Non-XA Datasources of a Wildfly/JBossAS over HTTP.'

DEFAULT_TIMEOUT = 3
DEFAULT_URL = 'http://localhost:9990'
DEFAULT_USERNAME = 'wildfly-admin'


#====================
from lib.globals2 import *

import lib.args2
import lib.base2
import lib.wildfly2

import argparse
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '--instance',
        help='The instance (server-config) to check if running in domain mode.',
        dest='INSTANCE',
        )

    parser.add_argument(
        '--mode',
        help='The mode the server is running.',
        dest='MODE',
        choices=['standalone', 'domain'],
        default='standalone',
        )

    parser.add_argument(
        '--node',
        help='The node (host) if running in domain mode.',
        dest='NODE',
        )

    parser.add_argument(
        '-p', '--password',
        help='WildFly API password.',
        dest='PASSWORD',
        required=True,
        )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
        )

    parser.add_argument(
        '--url',
        help='WildFly API URL. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
        )

    parser.add_argument(
        '--username',
        help='WildFly API username. Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
        required=True,
        )

    return parser.parse_args()


def check_non_xa_datasource(args):
    data = {
        'operation': 'read-resource',
        'include-runtime': 'true',
        'recursive': 'true',
        # /subsystem/datasources/data-source/" + ds_name + "/statistics/pool/
        'address': [{'subsystem': 'datasources'}, {'data-source': '*'}, {'statistics': 'pool'}],
        'json': 1,
    }
    res = lib.wildfly2.get_data(args, data)

    ds_stat_types = [
        'ActiveCount',
        'AvailableCount',
        'AverageBlockingTime',
        'AverageCreationTime',
        'AverageGetTime',
        'AveragePoolTime',
        'AverageUsageTime',
        'BlockingFailureCount',
        'CreatedCount',
        'DestroyedCount',
        'IdleCount',
        'InUseCount',
        'MaxUsedCount',
        'MaxWaitTime',
        'TimedOut',
        'WaitCount',
    ]

    msg = ''
    perfdata = ''
    state = STATE_OK

    for ds in res:
        name = ''
        # get the datasource name
        for v in ds['address']:
            if 'data-source' in v:
                name = v['data-source']
                break
        msg += '{} - '.format(name)
        tmp = ''
        for metric in ds_stat_types:
            if metric in ds['result']:
                if ds['result'][metric] > 0:
                    tmp += '{}: {}, '.format(metric, ds['result'][metric])
                perfdata += lib.base2.get_perfdata('non-xa-datasource-{}-{}'.format(name, metric), ds['result'][metric], None, None, None, 0, None)
        msg += '{}, '.format(tmp) if tmp != '' else 'no interesting data, '

    if msg:
        lib.base2.oao('Non-XA Datasources Statistics. {}'.format(msg[:-2]), state, perfdata, always_ok=args.ALWAYS_OK)
    else:
        lib.base2.oao('Non-XA Datasources Statistics - none.', state)


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # fetch and analyze data
    # https://docs.wildfly.org/23/Admin_Guide.html
    return check_non_xa_datasource(args)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
