#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


import argparse
import sys
from collections import Counter
from traceback import print_exc

import lib.base3
from lib.globals3 import STATE_UNKNOWN

try:
    import psutil
except ImportError as e:
    print('Python module "psutil" is not installed.')
    sys.exit(STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021021701'

DESCRIPTION = 'Displays amount of free and used memory in the system, checks against used memory in percent.'

DEFAULT_WARN = 90 # %
DEFAULT_CRIT = 95 # %


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical threshold for memory usage (in percent). Default: %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
        )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning threshold for memory usage (in percent). Default: %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    virt = psutil.virtual_memory()
    mem_usage_percent = float(getattr(virt, 'percent', 0))

    msg_header = '{}% - total: {}, used: {}, free: {}, available: {}\n'.format(
        mem_usage_percent,
        lib.base3.bytes2human(virt.total),
        lib.base3.bytes2human(virt.used),
        lib.base3.bytes2human(virt.free),
        lib.base3.bytes2human(getattr(virt, 'available', 0)),
    )

    stats = {}
    if hasattr(virt, 'shared'): stats['shared'] = getattr(virt, 'shared')
    if hasattr(virt, 'buffers'): stats['buffers'] = getattr(virt, 'buffers')
    if hasattr(virt, 'cached'): stats['cached'] = getattr(virt, 'cached')

    msg_body = ''
    for key, value in list(stats.items()):
        msg_body += f'{key}: {value}, '
    # strip leading ', '
    if msg_body: msg_body = msg_body.rstrip(', ') + '\n'

    cnt = Counter()
    msg_body += '\nTop3 most memory consuming processes:\n'
    if lib.base3.version(psutil.__version__) >= lib.base3.version('5.3.0'):
        try:
            for p in psutil.process_iter(attrs=['name', 'memory_percent']):
                cnt[p.info['name']] += p.info['memory_percent']
        except psutil.NoSuchProcess:
            pass
    else:
        try:
            for p in [x.as_dict(attrs=['name', 'memory_percent']) for x in psutil.process_iter()]:
                cnt[p['name']] += p['memory_percent']
        except psutil.NoSuchProcess:
            pass

    for i, p in enumerate(cnt.most_common(3)):
        msg_body += '{}. {}: {:.2f}%\n'.format(i + 1, p[0], p[1])

    perfdata = lib.base3.get_perfdata('usage_percent', mem_usage_percent, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base3.get_perfdata('total', virt.total, 'B', None, None, 0, virt.total)
    perfdata += lib.base3.get_perfdata('used', virt.used, 'B', None, None, 0, virt.total)
    perfdata += lib.base3.get_perfdata('free', virt.free, 'B', None, None, 0, virt.total)
    perfdata += lib.base3.get_perfdata('shared', getattr(virt, 'shared', 0), 'B', None, None, 0, virt.total)
    perfdata += lib.base3.get_perfdata('buffers', getattr(virt, 'buffers', 0), 'B', None, None, 0, virt.total)
    perfdata += lib.base3.get_perfdata('cached', getattr(virt, 'cached', 0), 'B', None, None, 0, virt.total)
    perfdata += lib.base3.get_perfdata('available', getattr(virt, 'available', 0), 'B', None, None, 0, virt.total)

    state = lib.base3.get_state(mem_usage_percent, args.WARN, args.CRIT, operator='ge')
    lib.base3.oao(msg_header + msg_body, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
