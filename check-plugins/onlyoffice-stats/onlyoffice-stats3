#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021041301'

DESCRIPTION = 'Exports OnlyOffice statistics via HTTP.'

DEFAULT_URL = 'http://localhost'
DEFAULT_TIMEOUT = 3


#====================
from lib.globals3 import *

import lib.args3
import lib.base3
import lib.url3

import argparse
import json
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('--url',
        help='OnlyOffice API URL. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
        )

    parser.add_argument('--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args3.csv,
        )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    if args.TEST is None:
        result = lib.base3.coe(lib.url3.fetch_json(
            args.URL + '/info/info.json', timeout=args.TIMEOUT
            ))
    else:
        # do not call the command, put in test data
        if args.TEST[0] and os.path.isfile(args.TEST[0]):
            f = open(args.TEST[0], 'r')
            stdout = f.read()
            f.close()
        else:
            stdout = args.TEST[0]
        if args.TEST[1] and os.path.isfile(args.TEST[1]):
            f = open(args.TEST[1], 'r')
            stderr = f.read()
            f.close()
        else:
            stderr = args.TEST[1]
        retc = args.TEST[2]
        try:
            result = json.loads(stdout)
        except:
            lib.base3.oao('ValueError: No JSON object could be decoded', STATE_UNKNOWN)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''

    # get thresholds automatically
    max_conn = result['licenseInfo']['connections']
    max_conn_warn = max_conn * 0.9
    max_conn_crit = max_conn * 0.95

    # build the message and perfdata
    msg += 'Max {} {}, '.format(max_conn, lib.base3.pluralize('connection', max_conn))

    # license; expired?
    now = lib.base3.now(as_type='iso')
    msg += 'licensed' if result['licenseInfo']['hasLicense'] else 'no license'
    if result['licenseInfo']['endDate']:
        if result['licenseInfo']['endDate'][0:10] <= now[0:10]:
            msg += ' (expired) [WARNING]'
            state = lib.base3.get_worst(STATE_WARN, state)
        expires_in = lib.base3.timestrdiff(result['licenseInfo']['endDate'][0:10], now[0:10], pattern1='%Y-%m-%d', pattern2='%Y-%m-%d')
        if expires_in <= 10 * 24 * 60 * 60:
            msg += ' (expires in {}) [WARNING]'.format(lib.base3.seconds2human(expires_in))
            state = lib.base3.get_worst(STATE_WARN, state)
    msg += ', '

    view_state = lib.base3.get_state(result['connectionsStat']['hour']['view']['max'], max_conn_warn, max_conn_crit, operator='ge')
    state = lib.base3.get_worst(view_state, state)
    msg += 'last hour: {}/{}/{} views{} '.format(
        result['connectionsStat']['hour']['view']['min'],
        result['connectionsStat']['hour']['view']['avr'],
        result['connectionsStat']['hour']['view']['max'],
        lib.base3.state2str(view_state, prefix=' ')
        )
    perfdata += lib.base3.get_perfdata('conn_hour_view_min', result['connectionsStat']['hour']['view']['min'], None, max_conn_warn, max_conn_crit, 0, result['licenseInfo']['connections'])
    perfdata += lib.base3.get_perfdata('conn_hour_view_avr', result['connectionsStat']['hour']['view']['avr'], None, max_conn_warn, max_conn_crit, 0, result['licenseInfo']['connections'])
    perfdata += lib.base3.get_perfdata('conn_hour_view_max', result['connectionsStat']['hour']['view']['max'], None, max_conn_warn, max_conn_crit, 0, result['licenseInfo']['connections'])

    edit_state = lib.base3.get_state(result['connectionsStat']['hour']['edit']['max'], max_conn_warn, max_conn_crit, operator='ge')
    state = lib.base3.get_worst(edit_state, state)
    msg += 'and {}/{}/{} edits{} (min/avr/max), '.format(
        result['connectionsStat']['hour']['edit']['min'],
        result['connectionsStat']['hour']['edit']['avr'],
        result['connectionsStat']['hour']['edit']['max'],
        lib.base3.state2str(edit_state, prefix=' ')
        )
    perfdata += lib.base3.get_perfdata('conn_hour_edit_min', result['connectionsStat']['hour']['edit']['min'], None, max_conn_warn, max_conn_crit, 0, result['licenseInfo']['connections'])
    perfdata += lib.base3.get_perfdata('conn_hour_edit_avr', result['connectionsStat']['hour']['edit']['avr'], None, max_conn_warn, max_conn_crit, 0, result['licenseInfo']['connections'])
    perfdata += lib.base3.get_perfdata('conn_hour_edit_max', result['connectionsStat']['hour']['edit']['max'], None, max_conn_warn, max_conn_crit, 0, result['licenseInfo']['connections'])

    if 'usersInfo' in result:
        msg += '{} unique {}, '.format(result['usersInfo']['uniqueUserCount'], lib.base3.pluralize('user', result['usersInfo']['uniqueUserCount']))
        perfdata += lib.base3.get_perfdata('unique_users', result['usersInfo']['uniqueUserCount'], None, None, None, 0, None)

    msg += 'v{}, '.format(result['serverInfo']['buildVersion'])


    # over and out
    lib.base3.oao(msg[:-2], state, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
