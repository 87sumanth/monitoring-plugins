#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021021701'

DESCRIPTION = 'Displays amount of free and used swap space in the system, checks against used swap in percent.'

DEFAULT_WARN  = 70  # %
DEFAULT_CRIT  = 90  # %

#====================
from lib.globals2 import *

import lib.base2

import argparse
try:
    import psutil
except ImportError as e:
    print('Python module "psutil" is not installed.')
    exit(STATE_UNKNOWN)
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__),
        )

    parser.add_argument('--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument('-c', '--critical',
        default=DEFAULT_CRIT,
        dest='CRIT',
        help='Set the critical threshold for swap usage (in percent). Default: %(default)s',
        type=int,
        )

    parser.add_argument('-w', '--warning',
        default=DEFAULT_WARN,
        dest='WARN',
        help='Set the warning threshold for swap usage (in percent). Default: %(default)s',
        type=int,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    swap = psutil.swap_memory()
    swap_usage_percent = swap.percent

    msg_header = '{}% - total: {}, used: {}, free: {}'.format(
        swap_usage_percent,
        lib.base2.bytes2human(swap.total),
        lib.base2.bytes2human(swap.used),
        lib.base2.bytes2human(swap.free),
    )
    msg_body = 'swapped in: {}, swapped out: {} (both cumulative)'.format(
        lib.base2.bytes2human(getattr(swap, 'sin', 0)),
        lib.base2.bytes2human(getattr(swap, 'sout', 0)),
    )

    perfdata =  lib.base2.get_perfdata('usage_percent', swap_usage_percent, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base2.get_perfdata('total', swap.total, 'B', None, None, 0, swap.total)
    perfdata += lib.base2.get_perfdata('used', swap.used, 'B', None, None, 0, swap.total)
    perfdata += lib.base2.get_perfdata('free', swap.free, 'B', None, None, 0, swap.total)
    perfdata += lib.base2.get_perfdata('sin', getattr(swap, 'sin', 0), 'B', None, None, 0, None)
    perfdata += lib.base2.get_perfdata('sout', getattr(swap, 'sout', 0), 'B', None, None, 0, None)

    # calculating the final check state
    state = lib.base2.get_state(swap_usage_percent, args.WARN, args.CRIT)
    lib.base2.oao(msg_header + '\n' + msg_body, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
