#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import base64 # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.base3 # pylint: disable=C0413
import lib.txt3 # pylint: disable=C0413
import lib.url3 # pylint: disable=C0413
from lib.globals3 import STATE_OK, STATE_WARN, STATE_CRIT, STATE_UNKNOWN # pylint: disable=C0413

try:
    import xmltodict
except ImportError as e:
    lib.base3.oao('Python module "xmltodict" is not installed.', STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2022021501'

DESCRIPTION = 'Checks the disk SMART values returned by QTS.'

DEFAULT_INSECURE = False
DEFAULT_NO_PROXY = False
DEFAULT_TIMEOUT = 3
DEFAULT_USERNAME = 'admin'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--password',
        help='QTS Password.',
        dest='PASSWORD',
        required=True,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '--url',
        help='QTS-based Appliance URL, for example https://192.168.1.1:8080.',
        dest='URL',
        required=True,
    )

    parser.add_argument(
        '--username',
        help='QTS User. Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # authenticate and get the authSid
    url = '{}/cgi-bin/authLogin.cgi'.format(args.URL)
    data = {
        'user': args.USERNAME,
        'pwd': lib.txt3.to_text(base64.b64encode(lib.txt3.to_bytes(args.PASSWORD))),
    }
    result = lib.base3.coe(lib.url3.fetch(url, data=data, insecure=args.INSECURE, no_proxy=args.NO_PROXY, timeout=args.TIMEOUT))
    data = xmltodict.parse(result)['QDocRoot']

    auth_passed = data['authPassed']
    if auth_passed is not None and len(auth_passed) == 1 and auth_passed == "0":
        lib.base3.oao('Failed to authenticate.', STATE_UNKNOWN)
    authSid = data['authSid']

    # get the values
    url = '{}/cgi-bin/disk/qsmart.cgi?func=all_hd_data&sid={}'.format(args.URL, authSid)
    result = lib.base3.coe(lib.url3.fetch(url, data=data, insecure=args.INSECURE, no_proxy=args.NO_PROXY, timeout=args.TIMEOUT))
    data = xmltodict.parse(result)['QDocRoot']

    disk_count = 0
    state = STATE_OK
    msg_body = ''
    perfdata = ''
    for disk in data["Disk_Info"]["entry"]:
        if disk['Serial']: # skip empty entries
            disk_count += 1
            disk_state = STATE_OK
            if disk['Health'] != 'OK':
                disk_state = STATE_WARN

            temperature = disk['Temperature'].get('oC', None)
            if temperature:
                perfdata += lib.base3.get_perfdata('{}_{}_{}_{}'.format(
                    disk.get('Disk_Alias', 'Unknown Alias').replace(' ', '_'),
                    disk['Model'].replace(' ', '_'),
                    disk['Serial'].replace(' ', '_'),
                    'temperature'), temperature, None, None, None, 0, None)

            state = lib.base3.get_worst(disk_state, state)
            msg_body += '* {}{} ({}, SerNo {}, Temp {}Â°C)\n'.format(
                lib.base3.state2str(disk_state, prefix='', suffix=' '),
                disk.get('Disk_Alias', 'Unknown Alias'),
                disk['Model'],
                disk['Serial'],
                temperature,
            )

    # build the message
    if disk_count:
        msg_header = 'Checked {} {}.'.format(disk_count, lib.txt3.pluralize('disk', disk_count))
        if state == STATE_CRIT:
            msg_header += ' There are critical errors.'
        elif state == STATE_WARN:
            msg_header += ' There are warnings.'
        else:
            msg_header += ' All are healthy.'
        lib.base3.oao('{}\n{}'.format(msg_header, msg_body), state, perfdata, always_ok=args.ALWAYS_OK)
    else:
        lib.base3.oao('Did not find any disk.', STATE_UNKNOWN, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
