#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413
from traceback import print_exc # pylint: disable=C0413

import lib.base3 # pylint: disable=C0413
from lib.globals3 import STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021062301'

DESCRIPTION = 'Trys to get entries from Name Service Switch (NSS) libraries and warns on errors or no match.'

bash_command = '/usr/bin/getent'

DEFAULT_DATABASE = 'group'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__),
    )

    parser.add_argument(
        '--database',
        default=DEFAULT_DATABASE,
        dest='DATABASE',
        help='May be any of those supported by "getent", for example "group", "hosts" etc. Default: %(default)s',
    )

    parser.add_argument(
        '--key',
        help="""If one or more key arguments are provided, then only the entries that match the
                supplied keys will be fetched. Otherwise, if no key is provided, all entries will be
                fetched (unless the database does not support enumeration). (repeating)""",
        dest='KEY',
        action='append',
    )
    
    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # build the getent command
    cmd = bash_command + ' {}'.format(args.DATABASE)
    if args.KEY:
        for key in args.KEY:
            cmd += ' {}'.format(key)

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = lib.base3.coe(lib.base3.shell_exec(cmd))
    if stderr:
        lib.base3.oao('{}'.format(stderr), STATE_UNKNOWN)

    # build the message
    if retc == 0:
        msg = 'Everything is ok. Executed `{}`.\n\n{}'.format(cmd, stdout)
        state = STATE_OK
    if retc == 1:
        msg = 'Missing arguments for `{}`, or database "{}" unknown.'.format(cmd, args.DATABASE)
        state = STATE_UNKNOWN
    if retc == 2:
        msg = 'One or more supplied keys could not be found in "{}", executing `{}`.'.format(args.DATABASE, cmd)
        state = STATE_WARN
    if retc == 3:
        msg = 'Multiple keys (enumeration) not supported on database "{}".'.format(args.DATABASE)
        state = STATE_UNKNOWN

    # over and out
    lib.base3.oao(msg, state)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        print_exc()
        sys.exit(STATE_UNKNOWN)
