#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

import unittest

from lib.globals3 import STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT
import lib.base3
import lib.shell3

        
class TestCheck(unittest.TestCase):

    check = './disk-smart3'

    def test_if_check_runs_EXAMPLE01(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE01,,0'))
        self.assertRegex(stdout, r'There are critical errors.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)
    def test_if_check_runs_EXAMPLE01_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE01,,0'))
        self.assertRegex(stdout, r'There are critical errors.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)

    def test_if_check_runs_EXAMPLE02(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE02,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE02_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE02,,0'))
        self.assertRegex(stdout, r'There are warnings.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE03(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE03,,0'))
        self.assertRegex(stdout, r'There are critical errors.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)
    def test_if_check_runs_EXAMPLE03_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE03,,0'))
        self.assertRegex(stdout, r'There are critical errors.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)

    def test_if_check_runs_EXAMPLE04(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE04,,0'))
        self.assertRegex(stdout, r'There are critical errors.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)
    def test_if_check_runs_EXAMPLE04_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE04,,0'))
        self.assertRegex(stdout, r'There are critical errors.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)

    def test_if_check_runs_EXAMPLE05(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE05,,0'))
        self.assertRegex(stdout, r'There are warnings.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)
    def test_if_check_runs_EXAMPLE05_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE05,,0'))
        self.assertRegex(stdout, r'There are warnings.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE06(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE06,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE06_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE06,,0'))
        self.assertRegex(stdout, r'There are warnings.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE07(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE07,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE07_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE07,,0'))
        self.assertRegex(stdout, r'There are warnings.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE08(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE08,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE08_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE08,,0'))
        self.assertRegex(stdout, r'There are warnings.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE09(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE09,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE09_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE09,,0'))
        self.assertRegex(stdout, r'There are warnings.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE10(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE10,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE10_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE10,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE11(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE11,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE11_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE11,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE12(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE12,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE12_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE12,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE13(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE13,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE13_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE13,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE14(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE14,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE14_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE14,,0'))
        self.assertRegex(stdout, r'There are warnings.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE15(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE15,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE15_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE15,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE16(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE16,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE16_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE16,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE17(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE17,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE17_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE17,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE18(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE18,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE18_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE18,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE19(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE19,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE19_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE19,,0'))
        self.assertRegex(stdout, r'There are warnings.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE20(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE20,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE20_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE20,,0'))
        self.assertRegex(stdout, r'There are warnings.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE21(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE21,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE21_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE21,,0'))
        self.assertRegex(stdout, r'There are warnings.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE22(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE22,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE22_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE22,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE23(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE23,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE23_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE23,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE24(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE24,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE24_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE24,,0'))
        self.assertRegex(stdout, r'There are warnings.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE25(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE25,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE25_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE25,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE26(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --test=examples/EXAMPLE26,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)
    def test_if_check_runs_EXAMPLE26_full(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --full --test=examples/EXAMPLE26,,0'))
        self.assertRegex(stdout, r'All are healthy.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    
if __name__ == '__main__':
    unittest.main()