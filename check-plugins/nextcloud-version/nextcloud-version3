#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import json # pylint: disable=C0413
import re # pylint: disable=C0413
import sys # pylint: disable=C0413
from traceback import print_exc # pylint: disable=C0413

import lib.base3 # pylint: disable=C0413
import lib.cache3 # pylint: disable=C0413
import lib.url3 # pylint: disable=C0413
from lib.globals3 import  STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021052801'

DESCRIPTION = """This plugin lets you track if Nextcloud server update is available."""

DEFAULT_CACHE_EXPIRE = 24 # hours
DEFAULT_PATH = '/var/www/html/nextcloud'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--cache-expire',
        help='The amount of time after which the update check cache expires, in hours. Default: %(default)s',
        dest='CACHE_EXPIRE',
        type=int,
        default=DEFAULT_CACHE_EXPIRE,
    )

    parser.add_argument(
        '--path',
        help='Local path to your Nextcloud installation, typically within your Webserver\'s Document Root. Default: %(default)s',
        dest='PATH',
        default=DEFAULT_PATH,
    )

    return parser.parse_args()


def get_config(path):
    """Get the whole NC config using the OCC command.
    """
    # get the owner of config.php
    user = lib.base3.get_owner(os.path.join(path, 'config/config.php'))
    occ = os.path.join(path, 'occ')
    # When running a command as a UID, many shells require that the ‘#’ be escaped with a backslash (‘\’). 
    stdout, stderr, retc = lib.base3.coe(lib.base3.shell_exec('sudo -u \\#{} {} config:list'.format(user, occ)))
    if stderr:
        lib.base3.oao('{}'.format(stderr), STATE_UNKNOWN)
    try:
        return json.loads(stdout)
    except:
        lib.base3.oao('ValueError: No JSON object could be decoded', STATE_UNKNOWN)


def get_installed_version(config):
    return config['system']['version']


def has_internet_connection(config):
    return config['system'].get('has_internet_connection', True)


def get_latest_version(expire):
    """Get latest NC version online, but first from cache.
    """
    latest_version = lib.cache3.get('nextcloud-version')
    if latest_version:
        return (True, latest_version)

    # nothing found in cache, get the latest version from NC download site
    url = 'https://download.nextcloud.com/.customers/server/'
    success, html = lib.url3.fetch(url, timeout=7)
    if not success:
        return (success, html)
    
    # parse the output (no need for BeautifulSoup or similar)
    # <tr><td valign="top"><img src="/icons/folder.gif" alt="[DIR]"></td><td><a href="18.0.9-9f639568/">18.0.9-9f639568/</a></td><td align="right">2020-09-10 08:43  </td><td align="right">  - </td><td>&nbsp;</td></tr>
    versions = re.findall(r'>(\d{2}\.\d{1,2}\.\d{1,2})', html)
    latest_version = versions[-1]
    
    lib.cache3.set('nextcloud-version', latest_version, lib.base3.now() + expire)
    return (True, latest_version)


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    config = get_config(args.PATH)

    if not has_internet_connection(config):
        lib.base3.oao('Nextcloud is running in a closed network, so checking for a new version is not possible.',  STATE_OK)

    installed_version = get_installed_version(config)
    latest_version = lib.base3.coe(get_latest_version(args.CACHE_EXPIRE*60*60))
    if lib.base3.version(installed_version) >= lib.base3.version(latest_version):
        lib.base3.oao('Nextcloud v{} is up to date'.format(installed_version), STATE_OK)
    lib.base3.oao('Nextcloud v{} is available (installed: v{})'.format(latest_version, installed_version), STATE_WARN, always_ok=args.ALWAYS_OK)
   

if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        print_exc()
        sys.exit(STATE_UNKNOWN)
