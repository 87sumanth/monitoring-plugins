#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import os  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base3  # pylint: disable=C0413
import lib.shell3  # pylint: disable=C0413
from lib.globals3 import (STATE_OK, STATE_UNKNOWN,  # pylint: disable=C0413
                          STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023021701'

DESCRIPTION = """This plugin lets you track if Nextcloud server updates are available."""

DEFAULT_PATH = '/var/www/html/nextcloud'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--path',
        help='Local path to your Nextcloud installation, typically within your Webserver\'s Document Root. Default: %(default)s',
        dest='PATH',
        default=DEFAULT_PATH,
    )

    return parser.parse_args()


def get_owner(file):
    """Returns the user ID of the owner of a file (for example "0" for "root").
    Returns -1 on failure.
    """
    try:
        return os.stat(file).st_uid
    except:
        return -1


def run_occ(path, cmd, _format='json'):
    """Run the Nextcloud OCC command.
    """
    # get the owner of config.php
    user = get_owner(os.path.join(path, 'config/config.php'))
    occ = os.path.join(path, 'occ')
    # When running a command as a UID, many shells require that the `#` be escaped with a backslash (`\`).
    stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec('sudo -u \\#{} {} {}'.format(user, occ, cmd)))
    if stderr:
        lib.base3.oao('{}'.format(stderr), STATE_UNKNOWN)
    try:
        if _format == 'json':
            return json.loads(stdout)
        return stdout.strip()
    except:
        lib.base3.oao('ValueError: No JSON object could be decoded', STATE_UNKNOWN)


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    config = run_occ(args.PATH, 'config:list')

    if not config['system'].get('has_internet_connection', True):
        lib.base3.oao('Nextcloud is running in a closed network, so checking for a new version is not possible.',  STATE_OK)

    # If you entered your subscription key in the support app, you should be able to find the update URL
    # in your config.php under the key "updater.server.url". It is usually in the form
    # "https://updates.nextcloud.com/customers/YOUR-SUBSCRIPTION-KEY/".
    # But you can't simply ping this URL, as the updater code is sending a rather complex request
    # there to check for updates. Instead, if you have the app "updatenotification" enabled, you can
    # use "occ update:check" and parse the output to check the state. See
    # https://github.com/nextcloud/server/blob/master/apps/updatenotification/lib/Command/Check.php#L92
    result = run_occ(args.PATH, 'update:check', _format='text')

    if result == 'Everything up to date':
        lib.base3.oao('Nextcloud v{} is up to date'.format(config['system']['version']), STATE_OK)

    # include EOL for old version
    # https://github.com/nextcloud/server/wiki/Maintenance-and-Release-Schedule
    major = config['system']['version'].split('.')[0]
    eol = ''
    if major == '25':
        eol = ' (EOL 2023-10)'
    if major == '24':
        eol = ' (EOL 2023-05)'
    if major == '23':
        eol = ' (EOL since 2022-12)'
    if major == '22':
        eol = ' (EOL since 2022-07)'
    if major == '21':
        eol = ' (EOL since 2022-02)'
    if major == '20':
        eol = ' (EOL since 2021-11)'
    if major == '19':
        eol = ' (EOL since 2021-06)'
    if major == '18':
        eol = ' (EOL since 2021-01)'
    if major == '17':
        eol = ' (EOL since 2020-10)'
    if major == '16':
        eol = ' (EOL since 2020-06)'
    if major == '15':
        eol = ' (EOL since 2019-12)'
    if major == '14':
        eol = ' (EOL since 2019-09)'
    if major == '13':
        eol = ' (EOL since 2019-02)'
    if major == '12':
        eol = ' (EOL since 2018-11)'
    if major == '11':
        eol = ' (EOL since 2018-03)'
    if major == '10':
        eol = ' (EOL since 2017-08)'
    if major == '9':
        eol = ' (EOL since 2017-04)'

    lib.base3.oao('Nextcloud v{}{} installed, {}'.format(
        config['system']['version'],
        eol,
        result,
    ), STATE_WARN, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
