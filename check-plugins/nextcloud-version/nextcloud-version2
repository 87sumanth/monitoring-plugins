#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import json # pylint: disable=C0413
import sys # pylint: disable=C0413
from traceback import print_exc # pylint: disable=C0413

import lib.base2 # pylint: disable=C0413
from lib.globals2 import  STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021053101'

DESCRIPTION = """This plugin lets you track if Nextcloud server updates are available."""

DEFAULT_PATH = '/var/www/html/nextcloud'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--path',
        help='Local path to your Nextcloud installation, typically within your Webserver\'s Document Root. Default: %(default)s',
        dest='PATH',
        default=DEFAULT_PATH,
    )

    return parser.parse_args()


def run_occ(path, cmd, format='json'):
    """Run the Nextcloud OCC command.
    """
    # get the owner of config.php
    user = lib.base2.get_owner(os.path.join(path, 'config/config.php'))
    occ = os.path.join(path, 'occ')
    # When running a command as a UID, many shells require that the ‘#’ be escaped with a backslash (‘\’). 
    stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec('sudo -u \\#{} {} {}'.format(user, occ, cmd)))
    if stderr:
        lib.base2.oao('{}'.format(stderr), STATE_UNKNOWN)
    try:
        if format == 'json':
            return json.loads(stdout)
        else:
            return stdout.strip()
    except:
        lib.base2.oao('ValueError: No JSON object could be decoded', STATE_UNKNOWN)


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    config = run_occ(args.PATH, 'config:list')

    if not config['system'].get('has_internet_connection', True):
        lib.base2.oao('Nextcloud is running in a closed network, so checking for a new version is not possible.',  STATE_OK)

    # If you entered your subscription key in the support app, you should be able to find the update URL
    # in your config.php under the key "updater.server.url". It is usually in the form 
    # "https://updates.nextcloud.com/customers/YOUR-SUBSCRIPTION-KEY/".
    # But you can't simply ping this URL, as the updater code is sending a rather complex request
    # there to check for updates. Instead, if you have the app "updatenotification" enabled, you can
    # use "occ update:check" and parse the output to check the state. See
    # https://github.com/nextcloud/server/blob/master/apps/updatenotification/lib/Command/Check.php#L92
    result = run_occ(args.PATH, 'update:check', format='text')

    if result == 'Everything up to date':
        lib.base2.oao('Nextcloud v{} is up to date'.format(config['system']['version']), STATE_OK)

    lib.base2.oao('{} (installed: v{})'.format(result, config['system']['version']), STATE_WARN, always_ok=args.ALWAYS_OK)
   

if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        print_exc()
        sys.exit(STATE_UNKNOWN)
