#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import re  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base3  # pylint: disable=C0413
import lib.shell3  # pylint: disable=C0413
import lib.time3  # pylint: disable=C0413
from lib.globals3 import (STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023031401'

DESCRIPTION = 'Tracks if Postfix is EOL.'

# from https://endoflife.date/api/postfix.json
ENDOFLIFE_DATE = [
  {
    "cycle": "3.7",
    "eol": False,
    "latest": "3.7.4",
    "latestReleaseDate": "2023-01-22",
    "releaseDate": "2022-02-06",
    "lts": False
  },
  {
    "cycle": "3.6",
    "eol": False,
    "latest": "3.6.8",
    "latestReleaseDate": "2023-01-22",
    "releaseDate": "2021-04-29",
    "link": "https://www.postfix.org/announcements/postfix-3.7.4.html",
    "lts": False
  },
  {
    "cycle": "3.5",
    "eol": False,
    "latest": "3.5.18",
    "latestReleaseDate": "2023-01-22",
    "releaseDate": "2020-03-15",
    "link": "https://www.postfix.org/announcements/postfix-3.7.4.html",
    "lts": False
  },
  {
    "cycle": "3.4",
    "eol": False,
    "latest": "3.4.28",
    "latestReleaseDate": "2023-01-22",
    "releaseDate": "2019-02-27",
    "link": "https://www.postfix.org/announcements/postfix-3.7.4.html",
    "lts": False
  },
  {
    "cycle": "3.3",
    "eol": "2022-02-05",
    "latest": "3.3.22",
    "latestReleaseDate": "2022-02-06",
    "releaseDate": "2018-02-22",
    "link": "https://www.postfix.org/announcements/postfix-3.6.5.html",
    "lts": False
  },
  {
    "cycle": "2.8",
    "eol": "2015-02-08",
    "latest": "2.8.20",
    "latestReleaseDate": "2018-02-10",
    "releaseDate": "2018-02-10",
    "link": "https://www.postfix.org/announcements/postfix-2.11.4.html",
    "lts": False
  }
]


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    return parser.parse_args()


def get_installed_version():
    success, result = lib.shell3.shell_exec('postconf -d mail_version')
    if not success:
        return ''
    stdout = result[0].strip()
    # where to find the version number in output?
    version_regex = r'= ([\d\.]+)'
    try:
        stdout = re.search(version_regex, stdout)
        return stdout.group(1).strip()
    except:
        return ''


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    installed_version = get_installed_version()
    if not installed_version:
        lib.base3.oao('Postfix not found.', STATE_UNKNOWN)

    # init some vars
    installed_major, installed_minor, installed_patch = installed_version.split('.')
    msg = 'Postfix v{}'.format(installed_version)
    state = STATE_OK
    perfdata = lib.base3.get_perfdata('postfix-version', '{}.{}{}'.format(installed_major, installed_minor, installed_patch), None, None, None, 0, None)

    # check EOL (json from https://endoflife.date)
    eol = lib.base3.lookup_lod(
        ENDOFLIFE_DATE,
        'cycle',
        '{}.{}'.format(installed_major, installed_minor),
    )
    if eol:
        if eol['eol']:
            if lib.time3.now(as_type='datetime') > lib.time3.timestr2datetime(eol['eol'], pattern='%Y-%m-%d'):
                state = STATE_WARN
            msg += ' (EOL {}){}'.format(eol['eol'], lib.base3.state2str(state, prefix=' '))
        else:
            msg += ' (EOL unknown)'
    else:
        state = STATE_UNKNOWN
        msg += ' (unknown version)'

    # over and out
    lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
