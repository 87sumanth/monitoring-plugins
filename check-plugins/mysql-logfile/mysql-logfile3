#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import re # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.base3 # pylint: disable=C0413
import lib.cache3 # pylint: disable=C0413
import lib.db_mysql3 # pylint: disable=C0413
import lib.disk3 # pylint: disable=C0413
import lib.human3 # pylint: disable=C0413
import lib.shell3 # pylint: disable=C0413
import lib.txt3 # pylint: disable=C0413
from lib.globals3 import STATE_CRIT, STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2022050401'

DESCRIPTION = """Checks MySQL/MariaDB log content the same way MySQLTuner does, but also
                 in case the DB is down."""

DEFAULT_CACHE_FILE = 'linuxfabrik-monitoring-plugins-mysql-logfile.db'
DEFAULT_CACHE_EXPIRE = 7200  # minutes (= 5 days)
DEFAULT_HOSTNAME = '127.0.0.1'
DEFAULT_PORT = '3306'

MAXLINES = 30000  # Maximum lines of log output to read from end


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--cache-expire',
        help='The amount of time after which the cached data expires, in minutes. Default: %(default)s',
        dest='CACHE_EXPIRE',
        type=int,
        default=DEFAULT_CACHE_EXPIRE,
    )

    parser.add_argument(
        '-H', '--hostname',
        help='MySQL/MariaDB hostname. Default: %(default)s',
        dest='HOSTNAME',
        default=DEFAULT_HOSTNAME,
    )

    parser.add_argument(
        '-p', '--password',
        help='Use the indicated password to authenticate the connection.',
        dest='PASSWORD',
        required = True,
    )

    parser.add_argument(
        '--port',
        help='MySQL/MariaDB port. Default: %(default)s',
        dest='PORT',
        default=DEFAULT_PORT,
    )

    parser.add_argument(
        '--server-log',
        help='''One of: 
                Path to error log file (including filename); 
                docker:CONTAINER; 
                podman:CONTAINER; 
                kubectl:CONTAINER; 
                systemd:UNITNAME. 
                If ommitted, this check tries to fetch the logfile location automatically.
            ''',
        dest='SERVER_LOG',
    )

    parser.add_argument(
        '-u', '--username',
        help='MySQL/MariaDB username.',
        dest='USERNAME',
        required = True,
    )

    return parser.parse_args()


def get_vars(conn):
    # Do not implement `get_all_vars()`, just fetch the ones we need for this check.
    # With the GLOBAL modifier, SHOW VARIABLES displays the values that are used for
    # new connections to MariaDB.
    sql = """
        show global variables
        where variable_name like 'datadir'
            or variable_name like 'hostname'
            or variable_name like 'log_error';
          """
    return lib.base3.coe(lib.db_mysql3.select(conn, sql))


def get_log_file_real_path(file, hostname, datadir):
    if file and os.path.isfile(file):
        return file
    if os.path.isfile('{}.log'.format(hostname)):
        return '{}.log'.format(hostname)
    if os.path.isfile('{}.err'.format(hostname)):
        return '{}.err'.format(hostname)
    if os.path.isfile(os.path.join(datadir, '{}.err'.format(hostname))):
        return os.path.join(datadir, '{}.err'.format(hostname))
    if os.path.isfile(os.path.join(datadir, '{}.log'.format(hostname))):
        return os.path.join(datadir, '{}.log'.format(hostname))
    if os.path.isfile(os.path.join(datadir, 'mysql_error.log')):
        return os.path.join(datadir, 'mysql_error.log')
    if os.path.isfile('/var/log/mysql.log'):
        return '/var/log/mysql.log'
    if os.path.isfile('/var/log/mysqld.log'):
        return '/var/log/mysqld.log'
    if os.path.isfile('/var/log/mysql/{}.err'.format(hostname)):
        return '/var/log/mysql/{}.err'.format(hostname)
    if os.path.isfile('/var/log/mysql/{}.log'.format(hostname)):
        return '/var/log/mysql/{}.log'.format(hostname)
    if os.path.isfile('/var/log/mysql/mysql_error.log'):
        return '/var/log/mysql/mysql_error.log'
    return file


def main():
    """The main function. Hier spielt die Musik.
    """

    # logic taken from mysqltuner.pl:log_file_recommendations(), v1.9.8
    # including variable names

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # Try to get the "log_error" setting and save it to cache, so that we know where to get the
    # log info from in case the DB is down.
    log_error = lib.cache3.get('{}-{}'.format(args.HOSTNAME, args.PORT), filename=DEFAULT_CACHE_FILE)
    if not log_error:
        mysql_connection = {
            'user':               args.USERNAME,
            'password':           args.PASSWORD,
            'host':               args.HOSTNAME,
            'port':               args.PORT,
            'raise_on_warnings':  True
        }
        conn = lib.base3.coe(lib.db_mysql3.connect(mysql_connection))
        lib.base3.coe(lib.db_mysql3.check_select_privileges(conn))
        myvar = lib.db_mysql3.lod2dict(get_vars(conn))

        if not args.SERVER_LOG:
            log_error = get_log_file_real_path(myvar['log_error'], myvar['hostname'], myvar['datadir'])
        else:
            log_error = args.SERVER_LOG

        if not log_error:
            lib.base3.oao('No log file set (set log_error).', STATE_UNKNOWN)

        lib.cache3.set('{}-{}'.format(args.HOSTNAME, args.PORT), log_error, lib.time3.now() + args.CACHE_EXPIRE*60, filename=DEFAULT_CACHE_FILE)

    msg, msg_body = '', ''
    state = STATE_OK
    perfdata = ''

    if log_error == 'stderr':
        lib.base3.oao('log_error is set to STDERR, so this check can\'t read it.', STATE_UNKNOWN)

    match = re.search(r'^(docker|podman|kubectl):(.*)', log_error)
    if match:
        cmd = "{} logs --tail={} '{}'".format(match.group(1).strip(), MAXLINES, match.group(2).strip())
        logfile, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(cmd))
        if retc != 0:
            lib.base3.oao('{} exited with error ({}, {}).'.format(cmd, retc, stderr.strip()), STATE_UNKNOWN)
        msg += 'Src: {}, '.format(log_error)

    match = re.search(r'^systemd:(.*)', log_error)
    if match:
        cmd = "journalctl -n {} -b -u '{}'".format(MAXLINES, match.group(1).strip())
        logfile, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(cmd))
        if retc != 0:
            lib.base3.oao('{} exited with error ({}, {}).'.format(cmd, retc, stderr.strip()), STATE_UNKNOWN)
        msg += 'Src: {}, '.format(log_error)
    else:
        # good old logfile
        if not os.path.isfile(log_error):
            lib.base3.oao('Log file {} doesn\'t exist.'.format(log_error), STATE_WARN)
        size = os.path.getsize(log_error)
        if size == 0:
            lib.base3.oao('Log file {} is empty. Assuming log-rotation. Use `--server-log` for explicit file.'.format(log_error), STATE_UNKNOWN)
        msg += 'Src: Log file {} (size: {}), '.format(
            log_error,
            lib.human3.bytes2human(size),
        )
        perfdata += lib.base3.get_perfdata('mysql_logfile_size', size, 'B', None, None, 0, None)
        if size >= 32 * 1024 * 1024:
            size_state = STATE_WARN
            state = lib.base3.get_worst(state, size_state)
            msg += 'bigger than 32 MiB{} (you should analyze why or implement a rotation log), '.format(
                lib.base3.state2str(size_state, prefix=' '),
            )
        logfile = lib.base3.coe(lib.disk3.read_file(log_error))

    # parse the log (slightly extended compared to MySQLTuner)
    lastErrs, lastWarns, lastShutdowns, lastStarts = [], [], [], []
    for logLi in logfile.splitlines():
        haystack = logLi.lower()
        if 'error' in haystack  and 'logging to' not in haystack and ' [warning] ' not in haystack:
            lastErrs.append(logLi)
        if 'warning' in haystack:
            lastWarns.append(logLi)
        if 'shutdown complete' in haystack and 'innodb' not in haystack:
            lastShutdowns.append(logLi)
        if 'ready for connections' in logLi:
            lastStarts.append(logLi)

    if lastErrs:
        errline_state = STATE_CRIT
        state = lib.base3.get_worst(state, errline_state)
        msg += '{} {}{} (last: {}), '.format(
            len(lastErrs),
            lib.txt3.pluralize('error', len(lastErrs)),
            lib.base3.state2str(errline_state, prefix=' '),
            lastErrs[-1]
        )
        msg_body += 'Errors:\n* {}\n'.format('\n* '.join(lastErrs))
    perfdata += lib.base3.get_perfdata('mysql_error_lines', len(lastErrs), None, None, None, 0, None)

    if lastWarns:
        warnline_state = STATE_WARN
        state = lib.base3.get_worst(state, warnline_state)
        msg += '{} {}{} (last: {}), '.format(
            len(lastWarns),
            lib.txt3.pluralize('warning', len(lastWarns)),
            lib.base3.state2str(warnline_state, prefix=' '),
            lastWarns[-1]
        )
        msg_body += 'Warnings:\n* {}\n'.format('\n* '.join(lastWarns))
    perfdata += lib.base3.get_perfdata('mysql_warning_lines', len(lastWarns), None, None, None, 0, None)

    if lastStarts:
        msg += '{} {} (last: {}), '.format(
            len(lastStarts),
            lib.txt3.pluralize('start', len(lastStarts)),
            lastStarts[-1][:15],
        )
        msg_body += 'Starts:\n* {}\n'.format('\n* '.join(lastStarts))
    perfdata += lib.base3.get_perfdata('mysql_startups', len(lastStarts), None, None, None, 0, None)

    if lastShutdowns:
        msg += '{} {} (last: {}), '.format(
            len(lastShutdowns),
            lib.txt3.pluralize('shutdown', len(lastShutdowns)),
            lastShutdowns[-1][:15],
        )
        msg_body += 'Shutdowns:\n* {}\n'.format('\n* '.join(lastShutdowns))
    perfdata += lib.base3.get_perfdata('mysql_shutdowns', len(lastShutdowns), None, None, None, 0, None)

    # over and out
    lib.base3.oao('{}\n{}'.format(msg[:-2], msg_body), state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
