#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021031801'

DESCRIPTION = 'This check is a SNMP application that uses the SNMP GET request to query for information on a network entity. The object identifiers (OIDs) of interest have to be defined in a CSV file, including optional WARN and CRIT parameters.'


#====================
from lib.globals3 import *

import lib.base3
import lib.cache3
import lib.disk3

import argparse
from traceback import print_exc


CSV_COL_OID = 0
CSV_COL_NAME = 1
CSV_COL_RECALC = 2
CSV_COL_UNIT = 3
CSV_COL_WARN = 4
CSV_COL_CRIT = 5
CSV_COL_SIFL = 6
CSV_COL_RCA = 7
CSV_COL_VALUE = 8


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument(
        '--community',
        help='SNMP Version 1 or 2c specific. Set the community string. Defaults to `public`.',
        default='public',
        dest='COMMUNITY',
        )

    parser.add_argument(
        '--device',
        help='The name of a device file containing the SNMP-OIDs, located under `./device-oids`, for example `switch-fs-s3900.csv` or `printer-brother-mfcj5720dw.csv`.',
        dest='DEVICE',
        default='any-any-any.csv',
        )

    parser.add_argument(
        '--hide-ok',
        help='Don\'t print OIDs with OK state.',
        dest='HIDEOK',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '-H',
        '--hostname',
        help='SNMP Appliance address.',
        dest='HOSTNAME',
        required=True,
        )

    parser.add_argument(
        '--mib',
        help='Load given list of MIBs, for example `+FS-MIB` or `FS-MIB:BROTHER-MIB`. Behaves like the `-m` option of `snmpget`.',
        dest='MIB',
        )

    parser.add_argument(
        '--mibdir',
        help='Look in given list of directories for MIBs. Behaves like the `-M` option of `snmpget`. Defaults to `$HOME/.snmp/mibs:/usr/share/snmp/mibs`.',
        dest='MIBDIR',
        default='$HOME/.snmp/mibs:/usr/share/snmp/mibs',
        )

    parser.add_argument(
        '--snmpversion',
        help='Specifies SNMP version to use. Defaults to `2c`.',
        dest='SNMPVERSION',
        choices=['1', '2c', '3'],
        default='2c',
        )

    parser.add_argument(
        '-t',
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=7,
        )

    parser.add_argument('--v3bootstime',
        help='SNMP Version 3 specific. Set destination engine boots/time.',
        dest='V3BOOTSTIME',
        )
    parser.add_argument('--v3context',
        help='SNMP Version 3 specific. Set context name (e.g. bridge1).',
        dest='V3CONTEXT',
        )
    parser.add_argument('--v3contextengineid',
        help='SNMP Version 3 specific. Set context engine ID (e.g. 800000020109840301).',
        dest='V3CONTEXTENGINEID',
        )
    parser.add_argument('--v3securityengineid',
        help='SNMP Version 3 specific. Set security engine ID (e.g. 800000020109840301)',
        dest='V3SECURITYENGINEID',
        )
    parser.add_argument('--v3level',
        help='SNMP Version 3 specific. Set security level.',
        dest='V3LEVEL',
        choices=['noAuthNoPriv', 'authNoPriv', 'authPriv'],
        )
    parser.add_argument('--v3authprotpassword',
        help='SNMP Version 3 specific. Set authentication protocol pass phrase.',
        dest='V3AUTHPROTPASSWORD',
        )
    parser.add_argument('--v3privprotpassword',
        help='SNMP Version 3 specific. Set privacy protocol pass phrase.',
        dest='V3PRIVPROTPASSWORD',
        )
    parser.add_argument('--v3authprot',
        help='SNMP Version 3 specific. Set authentication protocol.',
        dest='V3AUTHPROT',
        choices=['MD5', 'SHA', 'SHA-224', 'SHA-256', 'SHA-384', 'SHA-512'],
        )
    parser.add_argument('--v3privprot',
        help='SNMP Version 3 specific. Set privacy protocol.',
        dest='V3PRIVPROT',
        choices=['DES', 'AES', 'AES-192', 'AES-256'],
        )
    parser.add_argument('--v3username',
        help='SNMP Version 3 specific. Set security name (e.g. bert).',
        dest='V3USERNAME',
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # read oid list for our device from the CSV file
    plugin_path = os.path.join(os.path.dirname(os.path.realpath(__file__)))
    snmp_objects = lib.base3.coe(
        lib.disk3.read_csv(os.path.join(plugin_path, 'device-oids/{}'.format(args.DEVICE)), as_dict=False, skip_empty_rows=True)
    )
    
    # build parameters for snmpget
    # -r 0: set the number of retries to zero
    # -O: Toggle various defaults controlling output display:
    #     q:  quick print for easier parsing
    #     S:  print MIB module-id plus last element
    #     t:  print timeticks unparsed as numeric integers
    #     U:  don't print units
    if args.SNMPVERSION in ['1', '2c']:
        cmd = 'snmpget -v {} '.format(args.SNMPVERSION)
        cmd += '-c {} '.format(args.COMMUNITY) if args.COMMUNITY else ''
    else:
        cmd = 'snmpget -v 3 '
        cmd += '-a {} '.format(args.V3AUTHPROT) if args.V3AUTHPROT else ''
        cmd += '-A {} '.format(args.V3AUTHPROTPASSWORD) if args.V3AUTHPROTPASSWORD else ''
        cmd += '-e {} '.format(args.V3SECURITYENGINEID) if args.V3SECURITYENGINEID else ''
        cmd += '-E {} '.format(args.V3CONTEXTENGINEID) if args.V3CONTEXTENGINEID else ''
        cmd += '-l {} '.format(args.V3LEVEL) if args.V3LEVEL else ''
        cmd += '-n {} '.format(args.V3CONTEXT) if args.V3CONTEXT else ''
        cmd += '-u {} '.format(args.V3USERNAME) if args.V3USERNAME else ''
        cmd += '-x {} '.format(args.V3PRIVPROT) if args.V3PRIVPROT else ''
        cmd += '-X {} '.format(args.V3PRIVPROTPASSWORD) if args.V3PRIVPROTPASSWORD else ''
        cmd += '-Z {} '.format(args.V3BOOTSTIME) if args.V3BOOTSTIME else ''
    cmd += '-OSqtU -r 0 '
    cmd += '-t {} '.format(args.TIMEOUT) if args.TIMEOUT else ''
    cmd += '-M {} '.format(args.MIBDIR) if args.MIBDIR else ''
    cmd += '-m {} '.format(args.MIB) if args.MIB else ''
    cmd += '{} '.format(args.HOSTNAME) if args.HOSTNAME else ''
    cmd += '_OIDS_'

    # Max. 128 object identifiers are allowed in one snmp get request, so divide them into chunks
    oids = []
    count = 0
    tmp = ''
    for snmp_object in snmp_objects[1:]:        # ignore the header row in csv
        tmp += '{} '.format(snmp_object[CSV_COL_OID])
        count += 1
        if count == 128:
            oids.append(tmp)
            count = 0
            tmp = ''
    if tmp:
        oids.append(tmp)

    # fetch the data: execute the shell command and return its result and exit code
    stdout = ''
    for oid in oids:
        tmp, stderr, retc = lib.base3.coe(
            lib.base3.shell_exec(cmd.replace('_OIDS_', oid)))
        if (stderr or retc != 0):
            lib.base3.oao('{}'.format(stderr), STATE_UNKNOWN)
        stdout += tmp

    # enrich snmp_objects with results from snmpget run
    oid_index = 1   # first row in CSV is a header row, so start counting at 1
    for row in stdout.splitlines():
        space_index = row.find(' ') # find first space char (the delimiter used by snmpget)
        oid = row[0:space_index]
        value = row[space_index+1:].replace('Wrong Type (should be Timeticks): ', '').strip()
        snmp_objects[oid_index].append(value)
        oid_index += 1

    # init some vars
    msg, msg_header = '', ''
    state = STATE_OK
    perfdata = ''
    table_values = []

    # evaluate results
    for snmp_object in snmp_objects[1:]:

        name = snmp_object[CSV_COL_NAME] if snmp_object[CSV_COL_NAME] else snmp_object[CSV_COL_OID]
        oid = snmp_object[CSV_COL_OID]
        value = snmp_object[CSV_COL_VALUE]
        if value.lower().startswith('no such '):
            # No Such Instance currently exists at this OID
            # No Such Object available on this agent at this OID
            table_values.append({
                'name': oid,
                'value': value,
                'state': lib.base3.state2str(STATE_UNKNOWN),
                })
            state = lib.base3.get_worst(state, STATE_UNKNOWN)
            continue

        recalc = snmp_object[CSV_COL_RECALC]
        unit = snmp_object[CSV_COL_UNIT]
        warn = snmp_object[CSV_COL_WARN]
        crit = snmp_object[CSV_COL_CRIT]

        show_in_first_line = snmp_object[CSV_COL_SIFL]
        report_change = snmp_object[CSV_COL_RCA]

        if value and recalc:
            value = eval(recalc, {}, {'value': value})

        # check the state
        check_state = True
        value_state = STATE_OK
        if check_state and crit:
            if eval(crit, {}, {'value': value}):
                value_state = STATE_CRIT
                msg_header += '{}: {}{} (CRIT), '.format(name, value, unit)
                check_state = False   # no more checks for this value necessary
        if check_state and warn:
            if eval(warn, {}, {'value': value}):
                value_state = STATE_WARN
                msg_header += '{}: {}{} (WARN), '.format(name, value, unit)
                check_state = False
        if check_state and report_change:
            cache_key = '{}::{}'.format(args.DEVICE, oid)
            cache_value = lib.cache3.get(cache_key)
            if cache_value:                 # there is a previous value
                if cache_value != value:    # that is different from the current one
                    if report_change.lower().startswith('crit'):
                        value_state = STATE_CRIT
                        msg_header += '{}: {}{} (CRIT, changed from "{}"), '.format(name, value, unit, cache_value)
                    else:
                        value_state = STATE_WARN
                        msg_header += '{}: {}{} (WARN, changed from "{}"), '.format(name, value, unit, cache_value)
            else:
                lib.cache3.set(cache_key, value)
        state = lib.base3.get_worst(state, value_state)

        # create message body (the table)
        if ',' in unit:
            # example: "b,c" - convert the first part to human readable bytes, but suffix the perfdata as a continous counter
            unit, perfdata_unit = unit.split(',')
        else:
            perfdata_unit = unit
        if unit == 's':
            if show_in_first_line:
                msg_header += '{}: {}{}, '.format(name, lib.base3.seconds2human(value), lib.base3.state2str(value_state))
            if not args.HIDEOK or value_state:
                table_values.append({
                    'name': name,
                    'value': '{}{}'.format(lib.base3.seconds2human(value), ''),
                    'state': lib.base3.state2str(value_state, empty_ok=False),
                    })
        elif unit.lower() == 'b':
            if show_in_first_line:
                msg_header += '{}: {}{}, '.format(name, lib.base3.bytes2human(value), lib.base3.state2str(value_state))
            if not args.HIDEOK or value_state:
                table_values.append({
                    'name': name,
                    'value': '{}{}'.format(lib.base3.bytes2human(value), ''),
                    'state': lib.base3.state2str(value_state, empty_ok=False),
                    })
        elif unit.lower() == 'bps':
            if show_in_first_line:
                msg_header += '{}: {}{}, '.format(name, lib.base3.bps2human(value), lib.base3.state2str(value_state))
            if not args.HIDEOK or value_state:
                table_values.append({
                    'name': name,
                    'value': '{}{}'.format(lib.base3.bps2human(value), ''),
                    'state': lib.base3.state2str(value_state, empty_ok=False),
                    })
        else:
            if show_in_first_line:
                msg_header += '{}: {}{}{}, '.format(name, value, unit, lib.base3.state2str(value_state))
            if not args.HIDEOK or value_state:
                table_values.append({
                    'name': name,
                    'value': '{}{}'.format(value, unit),
                    'state': lib.base3.state2str(value_state, empty_ok=False),
                    })

        # create perfdata for numeric values
        value_type = lib.base3.guess_type(value)
        if isinstance(value_type, int) or isinstance(value_type, float):
            if perfdata_unit == '%':
                perfdata += lib.base3.get_perfdata(name, value, '%', None, None, 0, 100)
            elif perfdata_unit.upper() in ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']:
                perfdata += lib.base3.get_perfdata(name, value, perfdata_unit.upper(), None, None, 0, None)
            elif perfdata_unit.lower() in ['c', 's', 'ms', 'us',]:
                perfdata += lib.base3.get_perfdata(name, value, perfdata_unit.lower(), None, None, 0, None)
            else:
                # unknown perfdata suffixes, so do not use them
                perfdata += lib.base3.get_perfdata(name, value, None, None, None, 0, None)


    # create output
    if msg_header:
        msg +=  msg_header[:-2] + '\n\n'
    if len(table_values) > 0:
        msg += lib.base3.get_table(
            table_values,
            ['name', 'value', 'state'],
            header=['Key', 'Value', 'State'],
            )

    # over and out
    lib.base3.oao(msg, state, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
