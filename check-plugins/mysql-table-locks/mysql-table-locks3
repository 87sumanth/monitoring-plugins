#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.base3 # pylint: disable=C0413
import lib.db_mysql3 # pylint: disable=C0413
import lib.human3 # pylint: disable=C0413
from lib.globals3 import STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2022071601'

DESCRIPTION = """Checks whether a certain percentage of table locks had to wait in MySQL/MariaDB."""

DEFAULT_HOSTNAME = '127.0.0.1'
DEFAULT_PORT = '3306'
DEFAULT_PASSWORD = ''
DEFAULT_TIMEOUT = 3
DEFAULT_USERNAME = 'root'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-H', '--hostname',
        help='MySQL/MariaDB hostname. Default: %(default)s',
        dest='HOSTNAME',
        default=DEFAULT_HOSTNAME,
    )

    parser.add_argument(
        '-p', '--password',
        help='Use the indicated password to authenticate the connection. Default: %(default)s',
        dest='PASSWORD',
        default=DEFAULT_PASSWORD,
    )

    parser.add_argument(
        '--port',
        help='MySQL/MariaDB port. Default: %(default)s',
        dest='PORT',
        type=int,
        default=DEFAULT_PORT,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '-u', '--username',
        help='MySQL/MariaDB username. Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
    )

    return parser.parse_args()


def get_status(conn):
    # Do not implement `get_all_vars()`, just fetch the ones we need for this check.
    # Without the GLOBAL modifier, SHOW STATUS displays the values that are used for
    # the current connection to MariaDB.
    sql = """
        show global status
        where variable_name like 'Table_locks_immediate'
            or variable_name like 'Table_locks_waited'
            ;
          """
    return lib.base3.coe(lib.db_mysql3.select(conn, sql))


def main():
    """The main function. Hier spielt die Musik.
    """

    # logic taken from mysqltuner.pl:mysql_stats(), section # Table locks, v1.9.8
    # including variable names

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    mysql_connection = {
        'user':               args.USERNAME,
        'password':           args.PASSWORD,
        'host':               args.HOSTNAME,
        'port':               args.PORT,
        'timeout':            args.TIMEOUT,
    }
    conn = lib.base3.coe(lib.db_mysql3.connect(mysql_connection))
    lib.base3.coe(lib.db_mysql3.check_select_privileges(conn))

    mystat = lib.db_mysql3.lod2dict(get_status(conn))
    lib.db_mysql3.close(conn)

    # init some vars
    state = STATE_OK
    perfdata = ''

    # calculations
    mycalc = {}
    if int(mystat['Table_locks_immediate']) > 0:
        if int(mystat['Table_locks_waited']) == 0:
            mycalc['pct_table_locks_immediate'] = 100
        else:
            mycalc['pct_table_locks_immediate'] = round(int(mystat['Table_locks_immediate']) / (int(mystat['Table_locks_waited']) + int(mystat['Table_locks_immediate'])) * 100, 1)
    else:
        mycalc['pct_table_locks_immediate'] = 0

    # Table locks
    msg = '{}% table locks acquired immediately ({} immediate / {} locks)'.format(
        mycalc['pct_table_locks_immediate'],
        lib.human3.number2human(mystat['Table_locks_immediate']),
        lib.human3.number2human(mystat['Table_locks_immediate'])
    )
    if mycalc['pct_table_locks_immediate'] < 95:
        state = STATE_WARN
        msg += '{}. Optimize queries and/or use InnoDB to reduce lock wait.'.format(
            lib.base3.state2str(state, prefix=' '),
        )
    else:
        msg += '.'

    perfdata += lib.base3.get_perfdata('mysql_table_locks_immediate', mystat['Table_locks_immediate'], 'c', None, None, 0, None)
    perfdata += lib.base3.get_perfdata('mysql_table_locks_waited', mystat['Table_locks_waited'], 'c', None, None, 0, None)

    perfdata += lib.base3.get_perfdata('mysql_pct_table_locks_immediate', mycalc['pct_table_locks_immediate'], '%', None, None, 0, 100)

    # over and out
    lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
