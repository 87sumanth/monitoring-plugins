#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import argparse
import sys
from pathlib import Path
from traceback import print_exc

import lib.args3
import lib.base3
from lib.globals3 import STATE_OK, STATE_UNKNOWN

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020122301'

DESCRIPTION = 'Checks the size for a file or directory, in bytes.'


DEFAULT_WARN = 1024*1024*25       # 25M (Mebibyte)
DEFAULT_CRIT = 1024*1024*1024     # 1G (Gibibyte)


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '--filename',
        help='File (or directory) name to check. Supports glob in accordance with https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob. Beware of using recursive globs.',
        dest='FILE',
        required=True,
        )

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical size threshold in bytes. Default: >= %(default)s (1G)',
        dest='CRIT',
        type=lib.args3.float_or_none,
        default=DEFAULT_CRIT,
        )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning size threshold in bytes. Default: >= %(default)s (100M)',
        dest='WARN',
        type=lib.args3.float_or_none,
        default=DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch the data
    path = Path(args.FILE)
    state = STATE_OK
    msg = ''
    file_count = 0
    for item in sorted(Path(path.anchor).glob(str(path.relative_to(path.anchor)))):
        # ignoring directories as the size of a directory is not consistently defined across filesystems, and never is the size of the contents
        if item.is_dir():
            continue

        size = item.stat().st_size
        item_state = lib.base3.get_state(size, args.WARN, args.CRIT)
        state = lib.base3.get_worst(item_state, state)
        file_count += 1
        msg += f'* {item}: {lib.base3.bytes2human(size)}{lib.base3.state2str(item_state, prefix=" ")}\n'

    if file_count == 0:
        msg = 'No files found.'
        lib.base3.oao(msg, STATE_UNKNOWN, always_ok=args.ALWAYS_OK)

    if state == STATE_OK:
        msg = f'All {file_count} {lib.base3.pluralize("file", file_count)} are within the given size range (thresholds {lib.base3.bytes2human(args.WARN)}/{lib.base3.bytes2human(args.CRIT)}).\n\n' + msg
    else:
        msg = f'Not all {file_count} {lib.base3.pluralize("file", file_count)} are within the given size range (thresholds {lib.base3.bytes2human(args.WARN)}/{lib.base3.bytes2human(args.CRIT)}).\n\n' + msg

    # todo: perfdata?
    lib.base3.oao(msg, state, always_ok=args.ALWAYS_OK)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
