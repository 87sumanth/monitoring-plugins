#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413
from traceback import print_exc # pylint: disable=C0413

import lib.base2 # pylint: disable=C0413
from lib.globals2 import STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021061401'

DESCRIPTION = """Checks the current mode of SELinux against a desired mode,
                    and returns a warning on a non-match."""

CMD = 'getenforce'
DEFAULT_SELINUX_MODE = 'enforcing'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__),
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--mode',
        default=DEFAULT_SELINUX_MODE,
        dest='SELINUX_MODE',
        help='The expected SELinux mode, one of "enforcing", "permissive" or "disabled"'
        ' (case-insensitive). Default: %(default)s',
        choices=['enforcing', 'permissive', 'disabled'],
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(CMD))
    if (stderr or retc != 0):
        lib.base2.oao('Bash command `{}` failed.\nStdout: {}\nStderr: {}'.format(
            CMD, stdout, stderr), STATE_UNKNOWN)
    selinux_mode = stdout.strip().lower()

    # calculating the final check state
    msg_body = '\nMake SELinux Enforcing Again.' if selinux_mode != 'enforcing' else ''
    if selinux_mode == args.SELINUX_MODE.lower():
        lib.base2.oao('SELinux mode is {} (as expected).{}'.format(
            selinux_mode, msg_body), STATE_OK)

    # over and out
    lib.base2.oao('SELinux mode is {}, but supposed to be {}.{}'.format(
        selinux_mode, args.SELINUX_MODE, msg_body), STATE_WARN, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        print_exc()
        sys.exit(STATE_UNKNOWN)
