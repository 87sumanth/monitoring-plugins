#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import re # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.base3 # pylint: disable=C0413
import lib.cache3 # pylint: disable=C0413
import lib.shell3 # pylint: disable=C0413
import lib.time3 # pylint: disable=C0413
import lib.url3 # pylint: disable=C0413
from lib.globals3 import STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2022061701'

DESCRIPTION = """With this plugin you can check whether a PHP minor *upgrade* is available or
                whether the installed PHP version is EOL. For example, if you installed PHP 7.3
                while PHP 7.4 is available, you will get a warning. If you're running PHP 7.4 and
                PHP 8 is available (which is a major upgrade), you won't get a warning. To check for
                available upgrades, this plugin uses https://www.php.net/releases/index.php.
                To compare against the current/installed version of PHP, the check calls
                ``php --version``."""

DEFAULT_CACHE_EXPIRE = 24 # hours


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--cache-expire',
        help='The amount of time after which the update check cache expires, in hours. Default: %(default)s',
        dest='CACHE_EXPIRE',
        type=int,
        default=DEFAULT_CACHE_EXPIRE,
    )

    return parser.parse_args()


def get_installed_version():
    success, result = lib.shell3.shell_exec('php --version')
    if not success:
        return ''
    stdout, stderr, retc = result
    stdout = stdout.strip()
    # where to find the version number in output?
    version_regex = r'PHP (.*?) \(.*'
    try:
        stdout = re.match(version_regex, stdout)
        return stdout.group(1).strip()
    except:
        return ''


def get_latest_version(expire, major, minor=None):
    # get version online, but first from cache
    if minor is None:
        latest_version = lib.cache3.get('latest-version-php-{}'.format(major))
        if latest_version:
            return latest_version

        # nothing found in cache, get the latest version
        jsonst = lib.base3.coe(lib.url3.fetch_json('https://www.php.net/releases/index.php?json&version={}'.format(major)))
        try:
            latest_version = jsonst['version']
            lib.cache3.set('latest-version-php-{}'.format(major), latest_version, lib.time3.now() + expire)
            return latest_version
        except:
            lib.base3.oao('PHP.net does not know anything about PHP v{}.'.format(major), STATE_UNKNOWN)

    latest_version = lib.cache3.get('latest-version-php-{}-{}'.format(major, minor))
    if latest_version:
        return latest_version

    # nothing found in cache, get the latest version
    jsonst = lib.base3.coe(lib.url3.fetch_json('https://www.php.net/releases/index.php?json&version={}.{}'.format(major, minor)))
    try:
        latest_version = jsonst['version']
        lib.cache3.set('latest-version-php-{}-{}'.format(major, minor), latest_version, lib.time3.now() + expire)
        return latest_version
    except:
        lib.base3.oao('PHP.net does not know anything about PHP v{}.{}.'.format(major, minor), STATE_UNKNOWN)


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    installed_version = get_installed_version()
    if not installed_version:
        lib.base3.oao('PHP not found.', STATE_UNKNOWN)
    if re.match(r'^\d\.\d\.\d+$', installed_version) is None:
        # we got something unusual like "5.640-0+deb8u12" what is too troublesome to check
        lib.base3.oao('PHP v{} found. Due to the unusual version number, no update check is carried out.'.format(installed_version), STATE_OK)

    # we got a "normal" version number like "5.4.0" or 7.3.38"
    installed_major, installed_minor, installed_patch = installed_version.split('.')
    #latest_patch_version = get_latest_version(args.CACHE_EXPIRE*60*60, installed_major, installed_minor)
    latest_minor_version = get_latest_version(args.CACHE_EXPIRE*60*60, installed_major)
    latest_major, latest_minor, latest_patch = latest_minor_version.split('.')

    # for example as of 2021-07-05:
    #   installed_version:    7.3.10
    #   latest_patch_version: 7.3.29
    #   latest_minor_version: 7.4.21
    # ==> raises a warning because 7.4 is available

    # init some vars
    state = STATE_OK
    perfdata = lib.base3.get_perfdata('php-version', '{}.{}{}'.format(
        installed_major,
        installed_minor,
        installed_patch), None, None, None, 0, None
    )
    msg = 'PHP v{} installed'.format(installed_version)

    # check the installed vs available version
    if lib.base3.version('{}.{}'.format(installed_major, installed_minor)) < lib.base3.version(latest_major + '.' + latest_minor):
        state = STATE_WARN

    # check EOL
    # unfortunately, the "museum" tag in json response doesn't help here, so we have to maintain
    # this list manually (available on https://en.wikipedia.org/wiki/PHP)

    # old version
    if '{}.{}'.format(installed_major, installed_minor) == '5.0':
        msg += ', EOL since 2005-09-05'
        state = STATE_WARN
    if '{}.{}'.format(installed_major, installed_minor) == '5.1':
        msg += ', EOL since 2006-08-24'
        state = STATE_WARN
    if '{}.{}'.format(installed_major, installed_minor) == '5.2':
        msg += ', EOL since 2011-01-06'
        state = STATE_WARN
    if '{}.{}'.format(installed_major, installed_minor) == '5.3':
        msg += ', EOL since 2014-08-14'
        state = STATE_WARN
    if '{}.{}'.format(installed_major, installed_minor) == '5.4':
        msg += ', EOL since 2015-09-03'
        state = STATE_WARN
    if '{}.{}'.format(installed_major, installed_minor) == '5.5':
        msg += ', EOL since 2016-07-10'
        state = STATE_WARN
    if '{}.{}'.format(installed_major, installed_minor) == '5.6':
        msg += ', EOL since 2018-12-31'
        state = STATE_WARN
    if '{}.{}'.format(installed_major, installed_minor) == '7.0':
        msg += ', EOL since 2019-01-10'
        state = STATE_WARN
    if '{}.{}'.format(installed_major, installed_minor) == '7.1':
        msg += ', EOL since 2019-12-01'
        state = STATE_WARN
    if '{}.{}'.format(installed_major, installed_minor) == '7.2':
        msg += ', EOL since 2020-11-30'
        state = STATE_WARN
    if '{}.{}'.format(installed_major, installed_minor) == '7.3':
        msg += ', EOL since 2021-12-06'
        state = STATE_WARN

    # older version, still maintained
    if '{}.{}'.format(installed_major, installed_minor) == '7.4' and lib.time3.now(as_type='iso') > '2022-11-28':
        msg += ', EOL since 2022-11-28'
        state = STATE_WARN
    if '{}.{}'.format(installed_major, installed_minor) == '8.0' and lib.time3.now(as_type='iso') > '2023-11-26':
        msg += ', EOL since 2023-11-26'
        state = STATE_WARN

    # latest version
    if '{}.{}'.format(installed_major, installed_minor) == '8.1' and lib.time3.now(as_type='iso') > '2024-11-25':
        msg += ', EOL since 2024-11-25'
        state = STATE_WARN

    # future release
    if '{}.{}'.format(installed_major, installed_minor) == '8.2' and lib.time3.now(as_type='iso') > '2025-11-24':
        msg += ', EOL since 2025-11-24'
        state = STATE_WARN

    if lib.base3.version(installed_version) >= lib.base3.version(latest_minor_version):
        msg += ', is up to date'
    else:
        msg += ', PHP v{} available at php.net'.format(latest_minor_version)

    # over and out
    lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
