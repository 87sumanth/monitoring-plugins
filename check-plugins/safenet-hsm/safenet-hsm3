#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args3  # pylint: disable=C0413
import lib.base3  # pylint: disable=C0413
import lib.shell3  # pylint: disable=C0413
import lib.test3  # pylint: disable=C0413
import lib.time3  # pylint: disable=C0413
from lib.globals3 import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)


__author__ = """Linuxfabrik GmbH, Zurich/Switzerland;
                originally written by Dominik Riva, UniversitÃ¤tsspital Basel/Switzerland"""
__version__ = '2023022801'

DESCRIPTION = """This checks the health of a Gemalto SafeNet SHM via SSH and PSESH commands."""

DEFAULT_WARN = 80
DEFAULT_COMMAND = 'hsm state'
DEFAULT_CRIT = 90
DEFAULT_USER = 'pseoperator'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--command',
        help='Command to use for the check. Default: >= %(default)s',
        dest='COMMAND',
        default=DEFAULT_COMMAND,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the CRIT threshold as a percentage. Default: >= %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '-H', '--hostname',
        help='SafeNet HSM Hostname',
        dest='HOSTNAME',
        required=True,
    )

    parser.add_argument(
        '-p', '--password',
        help='Password',
        dest='PASSWORD',
        required=True,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args3.csv,
    )

    parser.add_argument(
        '-u', '--username',
        help='Username [admin|pseoperator]. Defautl: %(default)s',
        dest='USER',
        default=DEFAULT_USER,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the WARN threshold as a percentage. Default: >= %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    # status {cpu | date | disk | interface | mac | mem | netstat | ps | time | zone}
    command = ''
    if args.COMMAND == 'hsm state':
        command = 'hsm state'
    elif args.COMMAND == 'cpu':
        command = 'status cpu'
    elif args.COMMAND == 'date':
        command = 'status date'
    elif args.COMMAND == 'disk':
        command = 'status disk'
    elif args.COMMAND == 'interface':
        command = 'status interface'
    elif args.COMMAND == 'mac':
        command = 'status mac'
    elif args.COMMAND == 'mem':
        command = 'status mem'
    elif args.COMMAND == 'netstat':
        command = 'status netstat'
    elif args.COMMAND == 'ps':
        command = 'status ps'
    elif args.COMMAND == 'time':
        command = 'status time'
    elif args.COMMAND == 'zone':
        command = 'status zone'

    if args.TEST is None:
        cmd = 'sshpass -p {} ssh -T \'{}\'@\'{}\' {}'.format(args.PASSWORD, args.USER, args.HOSTNAME, command)
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(cmd)) # pylint: disable=W0612
        if stderr:
            lib.base3.oao('{}'.format(stderr), STATE_UNKNOWN)
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.test3.test(args.TEST)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''

    # analyze data
    if args.COMMAND == 'hsm state':
        for line in stdout.split('\n'):
            if 'HSM device' in line:
                hsm_msg = line.split(':')[1]
                if 'Usage Level' in hsm_msg:
                    value = hsm_msg.split('=')[1].split('%')[0]
                    perfdata += lib.base3.get_perfdata('usage_percent', value, '%', args.WARN, args.CRIT, 0, 100)
                    state = lib.base3.get_state(value, args.WARN, args.CRIT)
                    msg += '{} {}'.format(lib.base3.state2str(state, empty_ok=False), hsm_msg.replace("\t", ''))
                    lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)
                if 'NORMAL MODE' not in hsm_msg:
                    """ what if not normal """
                    state = STATE_CRIT
            if 'hsmstate' in line:
                """ Known error message """
                state = STATE_CRIT
                msg = '{} {}'.format(lib.base3.state2str(state), line)
                break
            if 'Command Result' in line:
                """ command not success """
                if 'Command Result : 0' not in line:
                    state = STATE_CRIT
                    msg = '{} {}'.format(lib.base3.state2str(state), line)
        lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)
    else:
        msg += stdout 
        for line in stdout.split('\n'):
            if 'Command Result' in line:
                """ command not success """
                if 'Command Result : 0' not in line:
                    state = STATE_UNKNOWN
                    msg = '{} {}'.format(lib.base3.state2str(state), stdout)
        lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


    # over and out
    lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)

if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
