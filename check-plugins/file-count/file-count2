#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
if os.path.exists('./monitoring-plugins-venv2'):
    activate_this = './monitoring-plugins-venv2/bin/activate_this.py'

if os.getenv('MONITORING_PLUGINS_VENV2'):
    activate_this = os.getenv('MONITORING_PLUGINS_VENV2') + '/bin/activate_this.py'

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


import argparse
import sys
import glob
from traceback import print_exc

from lib.globals2 import *
import lib.args2
import lib.base2
import lib.smb2

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021021201'

DESCRIPTION = 'Checks the number of matching files.'

DEFAULT_PATTERN = '*'
DEFAULT_TIMEOUT = 3


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '--filename',
        help='File (or directory) name to check. Supports glob in accordance with https://docs.python.org/2.7/library/glob.html. Beware of using recursive globs. This is mutually exclusive with -u / --url.',
        dest='FILENAME',
        )

    parser.add_argument(
        '-u', '--url',
        help='Set the url of the file (or directory) to check, starting with "smb://". This is mutually exclusive with --filename.',
        dest='URL',
        type=str,
        )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
        )

    parser.add_argument(
        '--password',
        help='SMB Password.',
        dest='PASSWORD',
        )

    parser.add_argument(
        '--pattern',
        help="The search string to match against the names of directories or files. This pattern can use '*' as a wildcard for multiple chars and '?' as a wildcard for a single char. Does not support regex patterns. Default: %(default)s.",
        dest='PATTERN',
        default=DEFAULT_PATTERN,
        )

    parser.add_argument(
        '--username',
        help='SMB Username.',
        dest='USERNAME',
        )

    parser.add_argument(
        '--only-dirs',
        help='Only consider directories.',
        dest='ONLY_DIRS',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '--only-files',
        help='Only consider files.',
        dest='ONLY_FILES',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical number of files. Supports ranges.',
        dest='CRIT',
        )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning number of files. Supports ranges.',
        dest='WARN',
        )

    parser.add_argument(
        '--timerange',
        help='Set the timerange (seconds) in which the files should be considered. Supports ranges.',
        dest='TIMERANGE',
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if args.FILENAME and args.URL:
        lib.base2.oao('The --filename and -u / --url parameter are mutually exclusive. Please only use one.', STATE_UNKNOWN)

    now = lib.base2.now()
    msg = ''
    file_count = 0

    if args.FILENAME:
        for item in glob.iglob(args.FILENAME):
            if os.path.isfile(item) and args.ONLY_DIRS:
                continue
            if os.path.isdir(item) and args.ONLY_FILES:
                continue
            if args.TIMERANGE:
                age = (now - os.stat(item).st_mtime)
                if not lib.base2.coe(lib.base2.match_range(age, args.TIMERANGE)):
                    continue

            file_count += 1

    if args.URL:
        split_url = args.URL.split('://')
        if len(split_url) != 2:
            lib.base2.oao('Could not parse the protocol of the url "{}".'.format(args.URL), STATE_UNKNOWN)
        proto, url = split_url

        if proto == 'smb':
            for item in lib.base2.coe(lib.smb2.glob(url, args.USERNAME, args.PASSWORD, args.TIMEOUT, pattern=args.PATTERN)):
                if item.is_file() and args.ONLY_DIRS:
                    continue
                if item.is_dir() and args.ONLY_FILES:
                    continue
                if args.TIMERANGE:
                    age = (now - item.stat().st_mtime)
                    if not lib.base2.coe(lib.base2.match_range(age, args.TIMERANGE)):
                        continue

                file_count += 1
        else:
            lib.base2.oao('The protocol "{}" is not supported.'.format(proto), STATE_UNKNOWN)

    if not lib.base2.coe(lib.base2.match_range(file_count, args.CRIT)):
        state = STATE_CRIT
    elif not lib.base2.coe(lib.base2.match_range(file_count, args.WARN)):
        state = STATE_WARN
    else:
        state = STATE_OK

    msg = 'Found {} matching {} (thresholds {}/{})'.format(file_count, lib.base2.pluralize("file", file_count), args.WARN, args.CRIT)

    perfdata = lib.base2.get_perfdata('file_count', file_count, None, args.WARN, args.CRIT, 0, None)
    lib.base2.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
