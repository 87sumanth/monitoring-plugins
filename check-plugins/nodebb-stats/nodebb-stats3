#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import json # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.args3 # pylint: disable=C0413
import lib.base3 # pylint: disable=C0413
import lib.disk3 # pylint: disable=C0413
import lib.human3 # pylint: disable=C0413
import lib.nodebb3 # pylint: disable=C0413
import lib.time3 # pylint: disable=C0413
from lib.globals3 import STATE_OK, STATE_UNKNOWN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2022021602'

DESCRIPTION = """Gets some statistics from the /api/admin/settings/post and
                 /api/admin/manage/users endpoints for debugging purposes."""

DEFAULT_INSECURE = False
DEFAULT_TIMEOUT = 3
DEFAULT_URL = 'http://localhost:4567/forum'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args3.csv,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '-p', '--token',
        help='NodeBB API Bearer token.',
        dest='TOKEN',
    )

    parser.add_argument(
        '--url',
        help='NodeBB API URL. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    if args.TEST is None:
        result_posts = lib.nodebb3.get_data(args, '/api/admin/settings/post')
        result_users = lib.nodebb3.get_data(args, '/api/admin/manage/users')
    else:
        # do not call the command, put in test data
        success, stdout = lib.disk3.read_file(args.TEST[0] + '-posts')
        result_posts = json.loads(stdout)
        success, stdout = lib.disk3.read_file(args.TEST[0] + '-users')
        result_users = json.loads(stdout)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''

    # analyze data
    count_users = result_users['userCount']
    msg += '{} users, '.format(count_users)
    try:
        last_online = result_users['users'][0]['lastonline'] / 1000
        msg += 'Last user: {} <{}> (online {} ago), '.format(
            result_users['users'][0]['username'],
            result_users['users'][0]['email'],
            lib.human3.seconds2human(lib.time3.now(as_type='epoch') - last_online),
        )
    except:
        pass

    count_groups = len(result_posts['groupsExemptFromPostQueue'])
    msg += '{} groups, '.format(count_groups)
    try:
        create_time = result_posts['groupsExemptFromPostQueue'][0]['createtime'] / 1000
        msg += 'Newest group: "{}" ({}) with {} members (created {} ago)'.format(
            result_posts['groupsExemptFromPostQueue'][0]['name'],
            'private' if result_posts['groupsExemptFromPostQueue'][0]['private'] else 'public',
            result_posts['groupsExemptFromPostQueue'][0]['memberCount'],
            lib.human3.seconds2human(lib.time3.now(as_type='epoch') - create_time),
            )
    except:
        pass

    perfdata += lib.base3.get_perfdata('users', count_users, None, None, None, 0, None)
    perfdata += lib.base3.get_perfdata('groups', count_groups, None, None, None, 0, None)

    # over and out
    lib.base3.oao(msg, state, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
