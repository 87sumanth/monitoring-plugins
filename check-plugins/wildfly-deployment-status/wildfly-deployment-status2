#! /usr/bin/env python2
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.base2 # pylint: disable=C0413
import lib.wildfly2 # pylint: disable=C0413
from lib.globals2 import STATE_CRIT, STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021101201'

DESCRIPTION = 'Checks the deployment status of a Wildfly/JBossAS over HTTP.'

DEFAULT_TIMEOUT = 3
DEFAULT_URL = 'http://localhost:9990'
DEFAULT_USERNAME = 'wildfly-monitoring'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--instance',
        help='The instance (server-config) to check if running in domain mode.',
        dest='INSTANCE',
    )

    parser.add_argument(
        '--mode',
        help='The mode the server is running.',
        dest='MODE',
        choices=['standalone', 'domain'],
        default='standalone',
    )

    parser.add_argument(
        '--node',
        help='The node (host) if running in domain mode.',
        dest='NODE',
    )

    parser.add_argument(
        '-p', '--password',
        help='WildFly API password.',
        dest='PASSWORD',
        required=True,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '--url',
        help='WildFly API URL. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
    )

    parser.add_argument(
        '--username',
        help='WildFly API username. Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
        required=True,
    )

    return parser.parse_args()


def check_deployment_status(args):
    data = {
        'operation': 'read-attribute',
        # /deployment/*
        'address': [{'deployment': '*'}],
        'name': 'status',
        'json': 1,
    }
    res = lib.wildfly2.get_data(args, data)

    msg = '\n\n'
    perfdata = ''
    state = STATE_OK
    deployments = 0

    for result in res:
        deployment = { k: v for d in result.get('address') for k, v in d.items() }.get('deployment')
        deployments += 1
        if result.get('result') in ['OK', 'RUNNING']:
            local_state = STATE_OK
            perfdata += lib.base2.get_perfdata('deployment-state-{}'.format(deployment), 0, None, None, None, 0, 2)
        elif result.get('result') in ['STOPPED']:
            local_state = STATE_WARN
            perfdata += lib.base2.get_perfdata('deployment-state-{}'.format(deployment), 1, None, None, None, 0, 2)
        else:
            local_state = STATE_CRIT
            perfdata += lib.base2.get_perfdata('deployment-state-{}'.format(deployment), 2, None, None, None, 0, 2)
        state = lib.base2.get_worst(state, local_state)
        msg += '* {} is {}{}\n'.format(deployment, result.get('result'), lib.base2.state2str(local_state, prefix=' '))

    if state == STATE_OK:
        msg = '{} {} checked, everything is ok.'.format(deployments, lib.base2.pluralize('Deployment', deployments)) + msg
    else:
        msg = '{} {} checked, there are errors.'.format(deployments, lib.base2.pluralize('Deployment', deployments)) + msg
    lib.base2.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    # https://docs.wildfly.org/23/Admin_Guide.html
    return check_deployment_status(args)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base2.cu()
