#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

# inspired by
# * https://github.com/aparnachaudhary/nagios-plugin-jbossas7/blob/master/check_jbossas7.py
# * https://github.com/gtudan/nagios-plugin-wildlfy/blob/master/check_wildfly.py

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021090801'

DESCRIPTION = 'Checks the memory usage of a Wildfly/JBossAS over HTTP.'

DEFAULT_CRIT = 90
DEFAULT_TIMEOUT = 3
DEFAULT_URL = 'http://localhost:9990'
DEFAULT_USERNAME = 'wildfly-monitoring'
DEFAULT_WARN = 80


#====================
from lib.globals3 import *

import lib.base3
import lib.wildfly3

import argparse


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '--critical',
        help='Set the critical threshold.',
        dest='CRIT',
        default=DEFAULT_CRIT,
        )

    parser.add_argument(
        '--instance',
        help='The instance (server-config) to check if running in domain mode.',
        dest='INSTANCE',
        )

    parser.add_argument(
        '--mode',
        help='The mode the server is running.',
        dest='MODE',
        choices=['standalone', 'domain'],
        default='standalone',
        )

    parser.add_argument(
        '--node',
        help='The node (host) if running in domain mode.',
        dest='NODE',
        )

    parser.add_argument(
        '-p', '--password',
        help='WildFly API password.',
        dest='PASSWORD',
        required=True,
        )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
        )

    parser.add_argument(
        '--url',
        help='WildFly API URL. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
        )

    parser.add_argument(
        '--username',
        help='WildFly API username. Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
        required=True,
        )

    parser.add_argument(
        '--warning',
        help='Set the warning threshold.',
        dest='WARN',
        default=DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''

    # fetch and analyze data
    # https://docs.wildfly.org/23/Admin_Guide.html

    data = {
        'operation': 'read-resource',
        'include-runtime': 'true',
        # /core-service/platform-mbean/type/memory
        'address': [{'core-service': 'platform-mbean'}, {'type': 'memory'}],
        'json': 1,
    }
    res = lib.wildfly3.get_data(args, data)

    mem_used = res['heap-memory-usage']['used']
    mem_committed = res['heap-memory-usage']['committed']
    mem_max = res['heap-memory-usage']['max']

    used_percent = round((float(mem_used) / float(mem_max) * 100), 2)
    used_state = lib.base3.get_state(used_percent, args.WARN, args.CRIT, 'ge')
    committed_percent = round((float(mem_committed) / float(mem_max) * 100), 2)
    committed_state = lib.base3.get_state(committed_percent, args.WARN, args.CRIT, 'ge')

    msg += 'Heap used: {}% ({} of {}){}, Heap committed: {}% ({} of {}){}, '.format(
        used_percent, lib.base3.bytes2human(mem_used), lib.base3.bytes2human(mem_max), lib.base3.state2str(used_state, prefix=' '),
        committed_percent, lib.base3.bytes2human(mem_committed), lib.base3.bytes2human(mem_max), lib.base3.state2str(committed_state, prefix=' '),
    )
    state += lib.base3.get_worst(used_state, committed_state)
    perfdata += lib.base3.get_perfdata('heap-used-percent', used_percent, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base3.get_perfdata('heap-committed-percent', committed_percent, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base3.get_perfdata('heap-used', mem_used, 'B', None, None, 0, mem_max)
    perfdata += lib.base3.get_perfdata('heap-max', mem_max, 'B', None, None, 0, mem_max)
    perfdata += lib.base3.get_perfdata('heap-committed', mem_committed, 'B', None, None, 0, mem_max)

    mem_used = res['non-heap-memory-usage']['used']
    mem_committed = res['non-heap-memory-usage']['committed']
    mem_max = res['non-heap-memory-usage']['max']

    used_percent = round((float(mem_used) / float(mem_max) * 100), 2)
    used_state = lib.base3.get_state(used_percent, args.WARN, args.CRIT, 'ge')
    committed_percent = round((float(mem_committed) / float(mem_max) * 100), 2)
    committed_state = lib.base3.get_state(committed_percent, args.WARN, args.CRIT, 'ge')

    msg += 'Non-Heap used: {}% ({} of {}){}, Non-Heap committed: {}% ({} of {}){}, '.format(
        used_percent, lib.base3.bytes2human(mem_used), lib.base3.bytes2human(mem_max), lib.base3.state2str(used_state, prefix=' '),
        committed_percent, lib.base3.bytes2human(mem_committed), lib.base3.bytes2human(mem_max), lib.base3.state2str(committed_state, prefix=' '),
    )
    state += lib.base3.get_worst(used_state, committed_state)
    perfdata += lib.base3.get_perfdata('non-heap-used-percent', used_percent, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base3.get_perfdata('non-heap-committed-percent', committed_percent, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base3.get_perfdata('non-heap-used', mem_used, 'B', None, None, 0, mem_max)
    perfdata += lib.base3.get_perfdata('non-heap-max', mem_max, 'B', None, None, 0, mem_max)
    perfdata += lib.base3.get_perfdata('non-heap-committed', mem_committed, 'B', None, None, 0, mem_max)

    lib.base3.oao(msg[:-2], state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        lib.base3.cu()
