#! /usr/bin/env python2
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import unittest

from lib.globals2 import STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT
import lib.base2

        
class TestCheck(unittest.TestCase):

    check = './sap-open-concur-com2'

    #self.assertEqual(retc, STATE_CRIT)
    #self.assertIn('Waiting for more data (1).', stdout)
    #self.assertRegexpMatches(stdout, r'1 error in Kernel Ring Buffer.')

    def test_if_check_runs_china_ok_all(self):
        stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(self.check + ' --datacenter=china --service=All --utc-offset=+0200 --test=examples/china-ok,,0'))
        self.assertIn('Everything is ok. (@china, UTC+0200)', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_china_ok_expense(self):
        stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(self.check + ' --datacenter=china --service=Expense --utc-offset=+0200 --test=examples/china-ok,,0'))
        self.assertIn('Expense: normal (@china, UTC+0200)', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_china_ok_xyservice(self):
        stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(self.check + ' --datacenter=china --service=xy --utc-offset=+0200 --test=examples/china-ok,,0'))
        self.assertIn('No result for xy@china.', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_UNKNOWN)

    def test_if_check_runs_china_nok_all(self):
        stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(self.check + ' --datacenter=china --service=All --utc-offset=+0200 --test=examples/china-nok,,0'))
        self.assertIn('Analysis/Intelligence: disruption [CRITICAL], Expense: degradation [WARNING], Imaging: degradation [WARNING], Request: degradation [WARNING] (@china, UTC+0200)', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)

    def test_if_check_runs_china_nok_expense(self):
        stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(self.check + ' --datacenter=china --service=Expense --utc-offset=+0200 --test=examples/china-nok,,0'))
        self.assertIn('Expense: degradation (@china, UTC+0200)', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_china_nok_xyservice(self):
        stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(self.check + ' --datacenter=china --service=xy --utc-offset=+0200 --test=examples/china-nok,,0'))
        self.assertIn('No result for xy@china.', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_UNKNOWN)


if __name__ == '__main__':
    unittest.main()