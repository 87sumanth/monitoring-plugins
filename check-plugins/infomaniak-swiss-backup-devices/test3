#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

import unittest

from lib.globals3 import STATE_OK, STATE_UNKNOWN, STATE_WARN, STATE_CRIT
import lib.base3
import lib.shell3


class TestCheck(unittest.TestCase):

    check = './infomaniak-swiss-backup-devices3'

    #self.assertEqual(retc, STATE_CRIT)
    #self.assertIn('Waiting for more data (1).', stdout)
    #self.assertRegex(stdout, r'1 error in Kernel Ring Buffer.')

    def test_if_check_runs_EXAMPLE01(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --token=TOKEN --account-id=ACCOUNT-ID --test=examples/EXAMPLE01,,0'))
        self.assertIn('There are warnings.', stdout)
        self.assertIn('ID    ! Customer     ! Tags  ! User         ! Name   ! Type  ! Used %          ! Used', stdout)
        self.assertIn('------+--------------+-------+--------------+--------+-------+-----------------+---------------------', stdout)
        self.assertIn('99904 ! BK-200999-1  ! tag01 ! SBI-AB123456 ! bucket ! swift ! 50.5%           ! 4.6TiB / 9.1TiB', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE02(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --token=TOKEN --account-id=ACCOUNT-ID --test=examples/EXAMPLE02,,0'))
        self.assertIn('Everything is ok.', stdout)
        self.assertIn('ID    ! Customer     ! Tags  ! User         ! Name   ! Type  ! Used % ! Used', stdout)
        self.assertIn('------+--------------+-------+--------------+--------+-------+--------+---------------------', stdout)
        self.assertIn('99904 ! BK-200999-1  ! tag01 ! SBI-AB123456 ! bucket ! swift ! 50.5%  ! 4.6TiB / 9.1TiB', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE03(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --token=TOKEN --account-id=ACCOUNT-ID --test=examples/EXAMPLE03,,0'))
        self.assertIn('Everything is ok', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE04_severity_warn(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --token=TOKEN --account-id=ACCOUNT-ID --severity=warn --test=examples/EXAMPLE04,,0'))
        self.assertIn('There are warnings.', stdout)
        self.assertIn('ID    ! Customer     ! Tags  ! User         ! Name   ! Type  ! Used % ! Used', stdout)
        self.assertIn('------+--------------+-------+--------------+--------+-------+--------+---------------------', stdout)
        self.assertIn('99904 ! BK-200999-1  ! tag01 ! SBI-AB123456 ! bucket ! swift ! 50.5%  ! 4.6TiB / 9.1TiB', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE04_severity_crit(self):
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(self.check + ' --token=TOKEN --account-id=ACCOUNT-ID --severity=crit --test=examples/EXAMPLE04,,0'))
        self.assertIn('There are critical errors.', stdout)
        self.assertIn('ID    ! Customer     ! Tags  ! User         ! Name   ! Type  ! Used % ! Used', stdout)
        self.assertIn('------+--------------+-------+--------------+--------+-------+--------+---------------------', stdout)
        self.assertIn('99904 ! BK-200999-1  ! tag01 ! SBI-AB123456 ! bucket ! swift ! 50.5%  ! 4.6TiB / 9.1TiB', stdout)
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)


if __name__ == '__main__':
    unittest.main()
