#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import json # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.args3 # pylint: disable=C0413
import lib.base3 # pylint: disable=C0413
import lib.human3 # pylint: disable=C0413
import lib.infomaniak3 # pylint: disable=C0413
import lib.test3 # pylint: disable=C0413
import lib.time3 # pylint: disable=C0413
import lib.txt3 # pylint: disable=C0413
from lib.globals3 import STATE_CRIT, STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2022031401'

DESCRIPTION = """Checks each device / slot of all your Infomaniak Swiss backup products via the
                 Infomaniak API."""

DEFAULT_CRIT = 90
DEFAULT_SEVERITY = 'warn'
DEFAULT_WARN = 80


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--account-id',
        help='Infomaniak Account-ID',
        dest='ACCOUNT_ID',
        required=True,
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the CRIT threshold as a percentage. Default: >= %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--severity',
        help='Severity for alerting other values. Default: %(default)s',
        dest='SEVERITY',
        default=DEFAULT_SEVERITY,
        choices=['warn', 'crit'],
    )

    parser.add_argument(
        '--token',
        help='Infomaniak API token',
        dest='TOKEN',
        required=True,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args3.csv,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the WARN threshold as a percentage. Default: >= %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch list of products
    if args.TEST is None:
        slots = lib.base3.coe(lib.infomaniak3.get_slots(args.ACCOUNT_ID, args.TOKEN))
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.test3.test(args.TEST)
        slots = json.loads(stdout)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''
    table_data = []

    # analyze data
    for slot in slots:
        for slot_data in slot.get('data'):
            if slot_data.get('storage_used', 0):
                used = round(slot_data.get('storage_used') / slot_data.get('size') * 100, 1)
                used_state = lib.base3.get_state(used, args.WARN, args.CRIT)
            else:
                # Swiss Backup ordered, but not used / no backups found - throw a warning
                used = 0
                used_state = STATE_WARN
            state = lib.base3.get_worst(state, used_state)

            if args.SEVERITY == 'warn':
                locked_state = lib.base3.get_state(slot_data.get('locked', False), True, None, _operator='eq')
            else:
                locked_state = lib.base3.get_state(slot_data.get('locked', False), None, True, _operator='eq')
            state = lib.base3.get_worst(state, locked_state)

            perfdata += lib.base3.get_perfdata('{}-locked'.format(slot_data.get('id')), int(slot_data.get('locked', False)), None, None, None, 0, None)
            perfdata += lib.base3.get_perfdata('{}-percent'.format(slot_data.get('id')), used, '%', args.WARN, args.CRIT, 0, 100)
            perfdata += lib.base3.get_perfdata('{}-total'.format(slot_data.get('id')), slot_data.get('size'), 'B', None, None, 0, slot_data.get('size'))
            perfdata += lib.base3.get_perfdata('{}-usage'.format(slot_data.get('id')), slot_data.get('storage_used'), 'B', None, None, 0, slot_data.get('size'))

            table_data.append({
                'activate_notifications': slot_data.get('activate_notifications'),
                'connection_type': slot_data.get('connection_type'),
                'created_at': slot_data.get('created_at'),
                'customer_name': slot_data.get('customer_name'),
                'id': slot_data.get('id'),
                'lang': slot_data.get('lang'),
                'locked': '{}{}'.format(slot_data.get('locked', False), lib.base3.state2str(locked_state, prefix=' ')),
                'product_customer_name': slot.get('product_customer_name'),
                'product_tags': ', '.join([i['name'] for i in slot.get('product_tags')]),
                'subtype': slot_data.get('subtype'),
                'type': slot_data.get('type'),
                'unit_admin': slot_data.get('unit_admin'),
                'usage_last_check': '{} ago'.format(
                    lib.human3.seconds2human(lib.time3.now(as_type='epoch') - slot_data.get('usage_last_check')),
                ),
                'used': '{}% ({} / {}){}'.format(
                    used,
                    lib.human3.bytes2human(slot_data.get('storage_used')),
                    lib.human3.bytes2human(slot_data.get('size')),
                    lib.base3.state2str(used_state, prefix=' '),
                ),
                'username': slot_data.get('username'),

            })

    # build the message
    if table_data:
        keys = ['id', 'product_customer_name', 'product_tags', 'username', 'customer_name', 'connection_type', 'used', 'usage_last_check', 'locked']
        headers = ['ID', 'Customer', 'Tags', 'User', 'Name', 'Type', 'Usage', 'Checked', 'Locked']
        msg += lib.base3.get_table(table_data, keys, header=headers)

    if state == STATE_CRIT:
        msg = 'There are critical errors.\n\n' + msg
    elif state == STATE_WARN:
        msg = 'There are warnings.\n\n' + msg
    else:
        msg = 'Everything is ok.\n\n' + msg

    # over and out
    lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)

if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
