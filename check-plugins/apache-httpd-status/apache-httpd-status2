#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413
from traceback import print_exc # pylint: disable=C0413

import lib.base2 # pylint: disable=C0413
import lib.url2 # pylint: disable=C0413
from lib.globals2 import STATE_CRIT, STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021052701'

DESCRIPTION = 'Checks how well an Apache httpd server is performing.'

DEFAULT_URL = 'http://localhost/server-status'
DEFAULT_WARN = 80       # %
DEFAULT_CRIT = 95       # %


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical', 
        help='Set the CRIT threshold for the number of workers processing requests in percent. Default: >= %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '-u', '--url',
        help='Apache Server Status URL. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the WARN threshold for the number of workers processing requests in percent. Default: >= %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    URL = args.URL
    if URL[0:4] != 'http':
        lib.base2.oao('--url parameter has to start with "http://" or https://".', STATE_UNKNOWN)
    URL = URL + '?auto'

    # fetch the URL
    result = lib.base2.coe(lib.url2.fetch(URL))
    if 'Scoreboard: ' not in result:
        lib.base2.oao('Malformed Apache server info.', STATE_UNKNOWN)

    result = result.strip().split('\n')


    httpd_bytesperreq = 0
    httpd_bytespersec = 0
    httpd_reqpersec = 0
    httpd_total_accesses = 0
    httpd_total_traffic = 0
    scoreboard = ''
    uptime = 0
    workers_busy_total = 0
    workers_idle_total = 0

    for item in result:
        if ': ' not in item:
            # Apache 2.4.37 (CentOS 8) - just contains "servername" in the first row, ignore it
            continue
        key, value = item.split(': ')

        if key == 'Total Accesses':
            httpd_total_accesses = value
        if key == 'Total kBytes':
            httpd_total_traffic = int(value) * 1024
        if key == 'ReqPerSec':
            httpd_reqpersec = float(value)
        if key == 'BytesPerSec':
            httpd_bytespersec = int(round(float(value), 0))
        if key == 'BytesPerReq':
            httpd_bytesperreq = int(round(float(value), 0))
        if key == 'BusyWorkers':
            workers_busy_total = value
        if key == 'IdleWorkers':
            workers_idle_total = value
        if key == 'Scoreboard':
            scoreboard = value
        if key == 'Uptime' or key == 'ServerUptimeSeconds':
            uptime = value


    workers_total = len(scoreboard)
    if workers_total == 0:
        lib.base2.oao('Malformed Apache server info.', STATE_UNKNOWN)

    workers_closing   = scoreboard.count('C')
    workers_dns       = scoreboard.count('D')
    workers_finishing = scoreboard.count('G')
    workers_free      = scoreboard.count('.')
    workers_idle      = scoreboard.count('I')
    workers_keepalive = scoreboard.count('K')
    workers_logging   = scoreboard.count('L')
    workers_reading   = scoreboard.count('R')
    workers_replying  = scoreboard.count('W')
    workers_starting  = scoreboard.count('S')
    workers_waiting   = scoreboard.count('_')

    
    msg = 'Workers: '
    state = STATE_OK


    workers_pct = int(round(float(workers_busy_total) / float(workers_total) * 100.0, 1))
    state = lib.base2.get_state(workers_pct, args.WARN, args.CRIT)


    # build the message
    msg += '{}/{} busy ({}%{}; {} "G"), {} idle, {} free; {} total accesses, {} req/s; {} total traffic, {}/s, {}/req; Up {}'.format(
        workers_busy_total,
        workers_total,
        workers_pct,
        lib.base2.state2str(state, prefix=' '),
        workers_finishing,
        workers_idle_total,
        workers_free,
        lib.base2.number2human(httpd_total_accesses),
        round(httpd_reqpersec, 0),
        lib.base2.bytes2human(httpd_total_traffic),
        lib.base2.bytes2human(httpd_bytespersec),
        lib.base2.bytes2human(httpd_bytesperreq),
        lib.base2.seconds2human(uptime),
        )

    perfdata = ''
    # lib.base2.get_perfdata(label, value, uom, warn, crit, min, max)
    perfdata += lib.base2.get_perfdata('httpd_total_accesses', httpd_total_accesses, 'c', None, None, 0, None)
    perfdata += lib.base2.get_perfdata('httpd_total_traffic',  httpd_total_traffic,  'B', None, None, 0, None)
    perfdata += lib.base2.get_perfdata('httpd_reqpersec',      httpd_reqpersec,     None, None, None, 0, None)
    perfdata += lib.base2.get_perfdata('httpd_bytespersec',    httpd_bytespersec,    'B', None, None, 0, None)
    perfdata += lib.base2.get_perfdata('httpd_bytesperreq',    httpd_bytesperreq,    'B', None, None, 0, None)

    perfdata += lib.base2.get_perfdata('workers',              workers_pct,          '%', args.WARN, args.CRIT, 0, 100)

    perfdata += lib.base2.get_perfdata('workers_closing',      workers_closing,     None, None, None, 0, workers_total)
    perfdata += lib.base2.get_perfdata('workers_dns',          workers_dns,         None, None, None, 0, workers_total)
    perfdata += lib.base2.get_perfdata('workers_finishing',    workers_finishing,   None, None, None, 0, workers_total)
    perfdata += lib.base2.get_perfdata('workers_idle',         workers_idle,        None, None, None, 0, workers_total)
    perfdata += lib.base2.get_perfdata('workers_keepalive',    workers_keepalive,   None, None, None, 0, workers_total)
    perfdata += lib.base2.get_perfdata('workers_logging',      workers_logging,     None, None, None, 0, workers_total)
    perfdata += lib.base2.get_perfdata('workers_free',         workers_free,        None, None, None, 0, workers_total)
    perfdata += lib.base2.get_perfdata('workers_reading',      workers_reading,     None, None, None, 0, workers_total)
    perfdata += lib.base2.get_perfdata('workers_replying',     workers_replying,    None, None, None, 0, workers_total)
    perfdata += lib.base2.get_perfdata('workers_starting',     workers_starting,    None, None, None, 0, workers_total)
    perfdata += lib.base2.get_perfdata('workers_waiting',      workers_waiting,     None, None, None, 0, workers_total)

    perfdata += lib.base2.get_perfdata('uptime',               uptime,               's', None, None, 0, None)

    lib.base2.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        print_exc()
        sys.exit(STATE_UNKNOWN)
