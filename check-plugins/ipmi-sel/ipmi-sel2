#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021032501'

DESCRIPTION = 'Checks the IPMI System Event Log (SEL) and returns WARN if there are entries. Use "ipmitool sel clear" to clear the IPMI System Event Log (SEL).'


#====================
from lib.globals2 import *

import lib.base2

import argparse
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('--authtype', 
        help='Specify an authentication type to use during IPMIv1.5 lan session activation. Supported types are NONE, PASSWORD, MD2, MD5, or OEM.',
        dest='V15AUTHTYPE',
        choices=['NONE', 'PASSWORD', 'MD2', 'MD5', 'OEM'],
        default='NONE',
        )

    parser.add_argument('-H', '--hostname', 
        help='Remote server address, can be IP address or hostname. This option is required for lan and lanplus interfaces.',
        dest='HOSTNAME',
        default=None,
        )

    parser.add_argument('--interface', 
        help='Selects IPMI interface to use. Supported types are "lan" (= IPMI v1.5) or "lanplus" (= IPMI v2.0).',
        dest='INTERFACE',
        choices=['lan', 'lanplus'],
        default='lan',
        )

    parser.add_argument('--password', 
        help='Remote server password.',
        dest='PASSWORD',
        )

    parser.add_argument('--port',
        help='Remote server UDP port to connect to. Default is 623.',
        dest='PORT',
        default=623,
        )

    parser.add_argument('--privlevel', 
        help='Force session privilege level. Can be CALLBACK, USER, OPERATOR, ADMINISTRATOR. Default is USER.',
        dest='PRIVLEVEL',
        choices=['CALLBACK', 'USER', 'OPERATOR', 'ADMINISTRATOR'],
        default='USER',
        )

    parser.add_argument('--username', 
        help='Remote server username, default is NULL user.',
        dest='USERNAME',
        default='NULL',
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    cmd = 'ipmitool sel elist '
    if args.HOSTNAME:
        # use ipmi with remote parameters
        cmd += '-A {} '.format(args.V15AUTHTYPE) if args.INTERFACE == 'lan' else ''
        cmd += '-H {} '.format(args.HOSTNAME) if args.HOSTNAME else ''
        cmd += '-I {} '.format(args.INTERFACE) if args.INTERFACE else ''
        cmd += '-L {} '.format(args.PRIVLEVEL) if args.PRIVLEVEL else ''
        cmd += '-p {} '.format(args.PORT) if args.PORT else ''
        cmd += '-P {} '.format(args.PASSWORD) if args.PASSWORD else ''
        cmd += '-U {} '.format(args.USERNAME) if args.USERNAME else ''

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(cmd))
    if (retc != 0):
        lib.base2.oao('{}'.format(stderr), STATE_UNKNOWN)

    # everything is ok
    if 'SEL has no entries' in stderr:
        lib.base2.oao('Everything is ok.', STATE_OK)

    # there are entries, so we have to throw a warning about that
    msg = ''
    for line in stdout.splitlines():
        msg += '* ' + line.replace('|', ';') + '\n'
    lib.base2.oao(msg, STATE_WARN)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
