#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import re  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.shell  # pylint: disable=C0413
import lib.version  # pylint: disable=C0413
from lib.globals import (STATE_UNKNOWN) # pylint: disable=C0413

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023070501'

DESCRIPTION = 'Tracks if PostgreSQL is EOL.'

DEFAULT_USERNAME = 'postgres'

# from https://endoflife.date/api/postgresql.json
ENDOFLIFE_DATE = [
  {
    "cycle": "15",
    "eol": "2027-11-11",
    "latest": "15.3",
    "latestReleaseDate": "2023-05-08",
    "releaseDate": "2022-10-10",
    "lts": False
  },
  {
    "cycle": "14",
    "eol": "2026-09-30",
    "latest": "14.8",
    "latestReleaseDate": "2023-05-08",
    "releaseDate": "2021-09-27",
    "lts": False
  },
  {
    "cycle": "13",
    "eol": "2025-11-13",
    "latest": "13.11",
    "latestReleaseDate": "2023-05-08",
    "releaseDate": "2020-09-21",
    "lts": False
  },
  {
    "cycle": "12",
    "eol": "2024-11-14",
    "latest": "12.15",
    "latestReleaseDate": "2023-05-08",
    "releaseDate": "2019-09-30",
    "lts": False
  },
  {
    "cycle": "11",
    "eol": "2023-11-09",
    "latest": "11.20",
    "latestReleaseDate": "2023-05-08",
    "releaseDate": "2018-10-15",
    "lts": False
  },
  {
    "cycle": "10",
    "eol": "2022-11-10",
    "latest": "10.23",
    "latestReleaseDate": "2022-11-07",
    "releaseDate": "2017-10-02",
    "lts": False
  },
  {
    "cycle": "9.6",
    "eol": "2021-11-11",
    "latest": "9.6.24",
    "latestReleaseDate": "2021-11-08",
    "releaseDate": "2016-09-26",
    "lts": False
  },
  {
    "cycle": "9.5",
    "eol": "2021-02-11",
    "latest": "9.5.25",
    "latestReleaseDate": "2021-02-08",
    "releaseDate": "2016-01-04",
    "lts": False
  },
  {
    "cycle": "9.4",
    "eol": "2020-02-13",
    "latest": "9.4.26",
    "latestReleaseDate": "2020-02-10",
    "releaseDate": "2014-12-15",
    "lts": False
  },
  {
    "cycle": "9.3",
    "eol": "2018-11-08",
    "latest": "9.3.25",
    "latestReleaseDate": "2018-11-05",
    "releaseDate": "2013-09-02",
    "lts": False
  },
  {
    "cycle": "9.2",
    "eol": "2017-11-09",
    "latest": "9.2.24",
    "latestReleaseDate": "2017-11-06",
    "releaseDate": "2012-09-06",
    "lts": False
  },
  {
    "cycle": "9.1",
    "eol": "2016-10-27",
    "latest": "9.1.24",
    "latestReleaseDate": "2016-10-24",
    "releaseDate": "2011-09-08",
    "lts": False
  },
  {
    "cycle": "9.0",
    "eol": "2015-10-08",
    "latest": "9.0.23",
    "latestReleaseDate": "2015-10-05",
    "releaseDate": "2010-09-17",
    "lts": False
  },
  {
    "cycle": "8.4",
    "eol": "2014-07-24",
    "latest": "8.4.22",
    "latestReleaseDate": "2014-07-21",
    "releaseDate": "2009-06-27",
    "lts": False
  },
  {
    "cycle": "8.3",
    "eol": "2013-02-07",
    "latest": "8.3.23",
    "latestReleaseDate": "2013-02-04",
    "releaseDate": "2008-02-01",
    "lts": False
  },
  {
    "cycle": "8.2",
    "eol": "2011-12-05",
    "latest": "8.2.23",
    "latestReleaseDate": "2011-12-01",
    "releaseDate": "2006-12-02",
    "lts": False
  },
  {
    "cycle": "8.1",
    "eol": "2010-11-08",
    "latest": "8.1.23",
    "latestReleaseDate": "2010-12-13",
    "releaseDate": "2005-11-05",
    "lts": False
  },
  {
    "cycle": "8.0",
    "eol": "2010-10-01",
    "latest": "8.0.26",
    "latestReleaseDate": "2010-10-01",
    "releaseDate": "2005-01-17",
    "lts": False
  }
]


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--username',
        help='PostgreSQL username for running `psql`. Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
    )

    return parser.parse_args()


def get_installed_version(args):
    success, result = lib.shell.shell_exec(
        'psql --username={} --command="SELECT version();"'.format(args.USERNAME),
    )
    if not success:
        return ''
    stdout = result[0].strip()
    # where to find the version number in output?
    version_regex = r'L (\d+\.\d+)'
    try:
        stdout = re.search(version_regex, stdout)
        return stdout.group(1).strip()
    except:
        return ''


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    installed_version = get_installed_version(args)
    if not installed_version:
        lib.base.oao('PostgreSQL not found or unable to fetch version information.', STATE_UNKNOWN)
    installed_major, installed_minor = installed_version.split('.')

    if int(installed_major) >= 10:
        state, msg = lib.version.check_eol(
            ENDOFLIFE_DATE,
            '{}'.format(installed_major),
        )
    else:
        state, msg = lib.version.check_eol(
            ENDOFLIFE_DATE,
            '{}.{}'.format(installed_major, installed_minor),
        )

    # over and out
    lib.base.oao(
        'PostgreSQL v{} ({})'.format(installed_version, msg),
        state,
        lib.base.get_perfdata(
            'postgresql-version',
            '{}.{}'.format(installed_major, installed_minor),
            None,
            None,
            None,
            0,
            None,
        ),
        always_ok=args.ALWAYS_OK,
    )


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
