#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021021701'

DESCRIPTION = 'Checks for processes that started running before they or some component that they use were updated. Returns WARN if a full reboot is required or if services might need a restart, and in any other case OK. Should be called once a day or after a `yum update` only.'

command_installed  = 'command -v needs-restarting'
command = 'needs-restarting'


#====================
from lib.globals2 import *

import lib.base2

import argparse
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # execute the shell command and return its result and exit code
	# 1. full reboot necessary? check the return code (<> 0: needs reboot): needs-restarting --reboothint
    stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(command + ' --reboothint'))

    # calculating the final check state
    if int(retc) == 1:
    	lib.base2.oao('A system reboot may be required.', STATE_WARN)

    # execute the shell command and return its result and exit code
	# 2. long list of all updated services (process list): needs-restarting
    stdout, tmp_stderr, retc = lib.base2.coe(lib.base2.shell_exec(command))
    service_restart_needed = stdout.strip()

    # calculating the final check state
    if service_restart_needed:
    	lib.base2.oao('Found some running processes that have been updated:\n{}'.format(service_restart_needed), STATE_WARN)
    if not stderr:
        lib.base2.oao('No system or service restart needed.', STATE_OK)
    else:
        lib.base2.oao('No system or service restart needed, but {}'.format(stderr), STATE_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
