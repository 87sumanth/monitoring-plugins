#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.base3 # pylint: disable=C0413
import lib.shell3 # pylint: disable=C0413
from lib.globals3 import STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2022021501'

DESCRIPTION = """Checks for processes that started running before they or some component that they
                use were updated. Returns WARN if a full reboot is required or if services might
                need a restart, and in any other case OK. Should be called once a day or after
                applying updates only."""


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # execute the shell command and return its result and exit code
    # 1. full reboot necessary? check the return code (<> 0: needs reboot): needs-restarting --reboothint
    stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec('needs-restarting --reboothint'))

    # calculating the final check state
    if int(retc) == 1:
        lib.base3.oao('A system reboot may be required.', STATE_WARN)

    # execute the shell command and return its result and exit code
    # 2. long list of all updated services (process list): needs-restarting
    stdout, tmp_stderr, retc = lib.base3.coe(lib.shell3.shell_exec('needs-restarting'))
    service_restart_needed = stdout.strip()

    # calculating the final check state
    if service_restart_needed:
        lib.base3.oao('Found some running processes that have been updated:\n{}'.format(service_restart_needed), STATE_WARN)
    if not stderr:
        lib.base3.oao('No system or service restart needed.', STATE_OK)
    lib.base3.oao('No system or service restart needed, but {}'.format(stderr), STATE_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
