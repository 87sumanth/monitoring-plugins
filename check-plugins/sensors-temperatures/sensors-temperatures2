#! /usr/bin/env python2
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413
import warnings
warnings.filterwarnings("ignore")

import lib.base2 # pylint: disable=C0413
from lib.globals2 import STATE_CRIT, STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413

try:
    import psutil # pylint: disable=C0413
except ImportError:
    lib.base2.oao('Python module "psutil" is not installed.', STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021082501'

DESCRIPTION = 'Return certain hardware temperature sensors (it may be a CPU, an hard disk or something else, depending on the OS and its configuration). All temperatures are expressed in celsius. Check is done automatically against hardware thresholds. If sensors are not supported by the OS OK is returned.'


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    if not hasattr(psutil, 'sensors_temperatures'):
        lib.base2.oao('Platform not supported.', STATE_UNKNOWN, always_ok=args.ALWAYS_OK)

    temps = psutil.sensors_temperatures()
    if not temps:
        lib.base2.oao('Can\'t read any temperature.', STATE_OK, always_ok=args.ALWAYS_OK)

    msg = ''
    state = STATE_OK
    perfdata = ''

    for name, entries in temps.items():
        msg += '* {}: '.format(name)
        for entry in entries:
            perfdata += lib.base2.get_perfdata('{}_{}'.format(name, entry.label).replace(' ', '_').lower(), entry.current, None, entry.high, entry.critical, 0, None)
            sensor_state = lib.base2.get_state(entry.current, entry.high, entry.critical, 'ge')
            msg += '{} = {}Â°C '.format(entry.label or name, entry.current)
            msg += lib.base2.state2str(sensor_state)
            msg = msg.strip() + ', '
            state = lib.base2.get_worst(state, sensor_state)
        msg = msg[:-2] + '\n'

    lib.base2.oao(msg[:-2], state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        lib.base2.cu()