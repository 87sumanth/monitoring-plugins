#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


import argparse
import sys
from traceback import print_exc

import lib.args3
import lib.base3
from lib.globals3 import STATE_OK, STATE_WARN, STATE_CRIT, STATE_UNKNOWN

try:
    import psutil
except ImportError as e:
    print('Python module "psutil" is not installed.')
    sys.exit(STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021021701'

DESCRIPTION = 'Check the state of a Windows service.'

DEFAULT_SERVERITY = 'warn'
DEFAULT_STATUS = ['running']
DEFAULT_STARTTYPE = 'automatic'


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__),
    )

    parser.add_argument(
        '--service',
        help='Name of the service.',
        dest='SERVICE',
        required=True,
    )

    parser.add_argument(
        '--severity',
        help='Severity if something is found. One of "warn" or "crit". Default: %(default)s',
        dest='SEVERITY',
        default=DEFAULT_SERVERITY,
        choices=['warn', 'crit'],
    )

    parser.add_argument(
        '--status',
        help='Expected service status (repeating). Default: %(default)s',
        dest='STATUS',
        default=DEFAULT_STATUS,
        action='append',
        choices=['running', 'paused', 'start_pending', 'pause_pending', 'continue_pending', 'stop_pending', 'stopped'],
    )

    parser.add_argument(
        '--starttype',
        help='Expected service start type. Default: %(default)s',
        dest='STARTTYPE',
        default=DEFAULT_STARTTYPE,
        choices=['automatic', 'manual', 'disabled'],
    )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    try:
        service = psutil.win_service_get(args.SERVICE)
    except psutil.NoSuchProcess:
        lib.base3.oao(f'Service {args.SERVICE} not found', STATE_UNKNOWN)

    start_type = service.start_type()
    status = service.status()

    state = STATE_OK
    msg = f'{args.SERVICE} is {status}, {start_type}'

    # now do the checks
    problem = False
    problem_msg = ''
    if args.STATUS and status not in args.STATUS:
        problem = True
        problem_msg += f'Status is "{status}", but supposed to be "{args.STATUS}"; '
    if args.STARTTYPE and start_type != args.STARTTYPE:
        problem = True
        problem_msg += f'Start Type is "{start_type}", but supposed to be "{args.STARTTYPE}"; '

    if problem:
        msg = f'{args.SERVICE} - ' + problem_msg[:-2]
        state = STATE_CRIT if args.SEVERITY == 'crit' else STATE_WARN

    lib.base3.oao(msg, state)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
