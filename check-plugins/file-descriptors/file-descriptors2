#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021021701'

DESCRIPTION = 'Checks the number of allocated file handles in percent.'

# Not in psutil because it's too complex, too low level and not portable by using a consistent API.
# So we have to call an external command.
CMD = 'sysctl fs.file-nr'

DEFAULT_WARN  = 90      # %
DEFAULT_CRIT  = 95      # %


#====================
from lib.globals2 import *

import lib.base2

import argparse
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument('-c', '--critical',
        help='Set the critical threshold for file descriptor usage (in percent). Default: %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
        )
    
    parser.add_argument('-w', '--warning',
        help='Set the warning threshold for file descriptor usage (in percent). Default: %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(CMD))
    if (stderr or retc != 0):
        lib.base2.oao('{}'.format(stderr), STATE_UNKNOWN)

    file_descriptors = stdout.split('\t')
    # fs.file-nr = 1248\t0\t90913
    # =>  The number of allocated \t unused-but-allocated \t system-wide maximum number of file handles.

    # calculate
    fd_current = float(file_descriptors[0].split(' ')[2])
    fd_max = float(file_descriptors[2].strip())
    fd_percent = round(fd_current / fd_max * 100, 1)


    msg = '{}% file descriptors used ({}/{}).'.format(fd_percent, int(fd_current), int(fd_max))
    perfdata = lib.base2.get_perfdata('fd', fd_percent, '%', args.WARN, args.CRIT, 0, 100)
    state = lib.base2.get_state(fd_percent, args.WARN, args.CRIT, 'ge')

    lib.base2.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
