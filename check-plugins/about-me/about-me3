#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import re # pylint: disable=C0413
import socket # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.base3 # pylint: disable=C0413
import lib.disk3 # pylint: disable=C0413
import lib.human3 # pylint: disable=C0413
import lib.net3 # pylint: disable=C0413
import lib.shell3 # pylint: disable=C0413
import lib.txt3 # pylint: disable=C0413
from lib.globals3 import STATE_OK, STATE_UNKNOWN # pylint: disable=C0413

try:
    import psutil # pylint: disable=C0413
    HAVE_PSUTIL = True
except ImportError:
    HAVE_PSUTIL = False


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2022061809'

DESCRIPTION = 'Reports a quick overview about the host dimensions and installed software.'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    return parser.parse_args()


def get_apps():
    """ try to find some (manual installed)  applications - here called "apps";
    mainly found in /home, /opt or /var/www/html;
    just guessing and without version info
    """

    apps = ''

    apps += '* Apache Tomcat\n'                   if os.path.isdir('/opt/apache-tomcat') else ''
    apps += '* Apache Tomcat\n'                   if os.path.isdir('/opt/tomcat') else ''
    apps += '* Atlassian Bitbucket\n'             if os.path.isdir('/opt/atlassian/bitbucket') else ''
    apps += '* Atlassian Confluence\n'            if os.path.isdir('/opt/atlassian/confluence') else ''
    apps += '* Atlassian Jira\n'                  if os.path.isdir('/opt/atlassian/jira') else ''
    apps += '* Atomicorp\n'                       if os.path.isdir('/opt/atomicorp') else ''
    apps += '* Bacchus\n'                         if os.path.isdir('/opt/bacchus') else ''
    apps += '* BizBus\n'                          if os.path.isdir('/opt/bizbus') else ''
    apps += '* Brother Printer SW\n'              if os.path.isdir('/opt/brother') else ''
    apps += '* Collabora Office 5.0\n'            if os.path.isdir('/opt/collaboraoffice5.0') else ''
    apps += '* Collabora Office 5.1\n'            if os.path.isdir('/opt/collaboraoffice5.1') else ''
    apps += '* Collabora Office 5.3\n'            if os.path.isdir('/opt/collaboraoffice5.3') else ''
    apps += '* Collabora Office 6.0\n'            if os.path.isdir('/opt/collaboraoffice6.0') else ''
    apps += '* Collabora Office 6.2\n'            if os.path.isdir('/opt/collaboraoffice6.2') else ''
    apps += '* Collabora Office 6.4\n'            if os.path.isdir('/opt/collaboraoffice6.4') else ''
    apps += '* Contao\n'                          if os.path.isdir('/var/www/html/contao') else ''
    apps += '* DCM4CHEE\n'                        if os.path.isdir('/opt/dcm4chee') else ''
    apps += '* Django\n'                          if os.path.isdir('/opt/django') else ''
    apps += '* Elasticsearch\n'                   if os.path.isfile('/usr/share/elasticsearch/bin/elasticsearch') else ''
    apps += '* F5 VPN SW\n'                       if os.path.isdir('/opt/f5/vpn') else ''
    apps += '* GitLab\n'                          if os.path.isdir('/opt/gitlab') else ''
    apps += '* Google Chrome\n'                   if os.path.isdir('/opt/google/chrome') else ''
    apps += '* Graylog Server\n'                  if os.path.isfile('/usr/share/graylog-server/bin/graylog-server') else ''
    apps += '* H-Net SecureService (eFaktura)\n'  if os.path.isdir('/home/hnet/HnetSecureService') else ''
    apps += '* Hostbill\n'                        if os.path.isdir('/home/hostbill') else ''
    apps += '* HTMLy\n'                           if os.path.isdir('/var/www/html/htmly') else ''
    apps += '* JBoss\n'                           if os.path.isdir('/opt/jboss') else ''
    apps += '* JumpCloud\n'                       if os.path.isdir('/opt/jc') else ''
    apps += '* KeeWeb\n'                          if os.path.isdir('/opt/KeeWeb') else ''
    apps += '* Keycloak\n'                        if os.path.isdir('/opt/keycloak') else ''
    apps += '* LibreNMS\n'                        if os.path.isdir('/opt/librenms') else ''
    apps += '* MariaDB ColumnStore\n'             if os.path.isdir('/opt/columnstore') else ''
    apps += '* Matomo\n'                          if os.path.isdir('/var/www/html/matomo') else ''
    apps += '* MediaWiki\n'                       if os.path.isdir('/var/www/html/mediawiki') else ''
    apps += '* Medidata (eFaktura)\n'             if os.path.isdir('/opt/MPCommunicator') else ''
    apps += '* Metabase\n'                        if os.path.isdir('/opt/metabase') else ''
    apps += '* mod_security\n'                    if os.path.isdir('/var/lib/mod_security') else ''
    apps += '* Nextcloud\n'                       if os.path.isdir('/var/www/nextcloud') else ''
    apps += '* Nextcloud\n'                       if os.path.isdir('/var/www/html/nextcloud') else ''
    apps += '* ownCloud\n'                        if os.path.isdir('/var/www/owncloud') else ''
    apps += '* ownCloud\n'                        if os.path.isdir('/var/www/html/owncloud') else ''
    apps += '* NodeBB\n'                          if os.path.isdir('/opt/nodebb') else ''
    apps += '* PHP 7.0 (RH)\n'                    if os.path.isdir('/opt/rh/rh-php70') else ''
    apps += '* PHP 7.1 (RH)\n'                    if os.path.isdir('/opt/rh/rh-php71') else ''
    apps += '* PHP 7.2 (RH)\n'                    if os.path.isdir('/opt/rh/rh-php72') else ''
    apps += '* PHP 7.3 (RH)\n'                    if os.path.isdir('/opt/rh/rh-php73') else ''
    apps += '* PHP 7.4 (RH)\n'                    if os.path.isdir('/opt/rh/rh-php74') else ''
    apps += '* PHP 8.0 (RH)\n'                    if os.path.isdir('/opt/rh/rh-php80') else ''
    apps += '* PHP 8.1 (RH)\n'                    if os.path.isdir('/opt/rh/rh-php81') else ''
    apps += '* Piwik\n'                           if os.path.isdir('/var/www/html/piwik') else ''
    apps += '* PostgreSQL 7.2 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql72') else ''
    apps += '* PostgreSQL 7.3 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql73') else ''
    apps += '* PostgreSQL 7.4 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql74') else ''
    apps += '* PostgreSQL 8.0 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql80') else ''
    apps += '* PostgreSQL 8.1 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql81') else ''
    apps += '* PostgreSQL 8.2 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql82') else ''
    apps += '* PostgreSQL 8.3 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql83') else ''
    apps += '* PostgreSQL 8.4 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql84') else ''
    apps += '* PostgreSQL 9.0 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql90') else ''
    apps += '* PostgreSQL 9.1 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql91') else ''
    apps += '* PostgreSQL 9.2 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql92') else ''
    apps += '* PostgreSQL 9.3 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql93') else ''
    apps += '* PostgreSQL 9.4 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql94') else ''
    apps += '* PostgreSQL 9.5 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql95') else ''
    apps += '* PostgreSQL 9.6 (RH)\n'             if os.path.isdir('/opt/rh/rh-postgresql96') else ''
    apps += '* Rambox\n'                          if os.path.isdir('/opt/Rambox') else ''
    apps += '* Rocket.Chat\n'                     if os.path.isdir('/opt/Rocket.Chat') else ''
    apps += '* Roundcube\n'                       if os.path.isdir('/var/www/html/roundcubemail') else ''
    apps += '* Tarifpool\n'                       if os.path.isdir('/opt/tarifpool') else ''
    apps += '* VMware Tools\n'                    if os.path.isdir('/etc/vmware-tools') else ''
    apps += '* Vtiger\n'                          if os.path.isdir('/var/www/html/vtigercrm') else ''
    apps += '* WildFly\n'                         if os.path.isdir('/opt/wildfly') else ''
    apps += '* WordPress\n'                       if os.path.isdir('/var/www/html/wordpress/wp-config.php') else ''
    apps += '* WordPress\n'                       if os.path.isdir('/var/www/html/wp-config.php') else ''
    apps += '* Yii2\n'                            if os.path.isdir('/var/www/html/yii2') else ''
    apps += '* Yii2\n'                            if os.path.isdir('/var/www/html/yii2-advanced') else ''
    apps += '* Yii2\n'                            if os.path.isdir('/var/www/html/yii2-basic') else ''
    apps += '* Yii\n'                             if os.path.isdir('/var/www/html/yii') else ''
    apps += '* Zimbra\n'                          if os.path.isdir('/opt/zimbra') else ''

    return apps


def get_birthdate():
    """Using various methods to determine install date.
    """
    birthdate = '-'
    # Using stat
    cmd = 'stat / | grep "Birth" | sed "s/Birth: //g" | cut -b 2-11'
    success, result = lib.shell3.shell_exec(cmd)
    if success:
        birthdate, stderr, retc = result
    if birthdate == '-':
        # nothing found so far, but not all of those are very accurate
        if os.path.isfile('/usr/bin/pacman'):
            # Arch Linux, and Arch based distros using pacman
            cmd = 'head -n 1 $PACMAN_LOG | cut -b 2-11'
        elif os.path.isfile('/usr/bin/emerge'):
            # Gentoo Linux and Gentoo based distros using portage
            cmd = 'head -n 1 $PORTAGE_LOG | cut -b 31-43'
        elif os.path.isfile('/usr/bin/rpm'):
            # Fedora, RedHat, and RPM based distros
            cmd = 'rpm -qi basesystem | grep "Install Date" | sed "s/Install Date: //g"'
        success, result = lib.shell3.shell_exec(cmd)
    if success:
        birthdate, stderr, retc = result
    return birthdate.strip()


def get_boot_mode():
    return 'UEFI' if os.path.isdir('/sys/firmware/efi') else 'BIOS'


def get_crontabs():
    cmd = r"grep --dereference-recursive --no-filename --invert-match '\s*#' /etc/crontab /etc/cron.d/ /etc/anacrontab /var/spool/cron"
    stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(cmd))
    msg = ''
    line_regex = re.compile(r'\S+=')
    for line in stdout.splitlines():
        line = line.strip()
        if len(line) > 0 and re.match(line_regex, line) is None:
            msg = '{}{}\n'.format(msg, line)
    return msg


def get_disks():
    result = ''
    stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec('lsblk --nodeps --output NAME,SIZE --noheadings --include 8,252,259'))
    for disk in stdout.strip().splitlines():
        # zRAM devices can appear in the output of lsblk, but
        # we cannot do anything useful with them
        if disk.startswith('zram'):
            continue
        result += '{}, '.format(re.sub('\\s+', ' ', disk))
    return result[:-2]


def get_interfaces():
    msg = ''
    try:
        for name, interface in sorted(psutil.net_if_addrs().items()):
            if name == 'lo':
                continue

            for addr in interface:
                if addr.family == lib.net3.AF_INET:
                    msg = '{}* {} {}/{}\n'.format(msg, name, addr.address, lib.net3.ip_to_cidr(addr.netmask))
    except:
        pass

    return msg


def get_key_features():
    features_found, features_na = '', ''
    features = [
        {'name': 'firewalld', 'cmd': 'command -v firewalld'},
        {'name': 'iptables', 'cmd': 'command -v iptables'},
        {'name': 'LVM', 'cmd': 'command -v lvdisplay'},
        {'name': 'nftables', 'cmd': 'command -v nftables'},
        {'name': 'SELinux', 'cmd': 'command -v sestatus'},
    ]
    for feature in features:
        if retcmd_output('', feature['cmd'], ignore_output=True):
            features_found += '{}, '.format(feature['name'])
        else:
            features_na += '{}, '.format(feature['name'])
    result = ''
    if features_found:
        result += 'Features: {}; '.format(features_found[:-2])
    if features_na:
        result += 'Missing: {}; '.format(features_na[:-2])
    return result[:-2]


def get_nondefault_users():
    DEFAULT_LINUX_USER = [
        '_apt',
        'abrt',
        'adm',
        'backup',
        'bin',
        'chrony',
        'daemon',
        'dbus',
        'ftp',
        'games',
        'gnats',
        'halt',
        'irc',
        'list',
        'lp',
        'mail',
        'man',
        'messagebus',
        'news',
        'nobody',
        'operator',
        'polkitd',
        'proxy',
        'rngd',
        'root',
        'rpc',
        'rpcuser',
        'shutdown',
        'sshd',
        'sssd',
        'sync',
        'sys',
        'systemd-coredump',
        'systemd-network',
        'systemd-oom',
        'systemd-resolve',
        'systemd-timesync',
        'tcpdump',
        'tss',
        'unbound',
        'user',
        'uucp',
    ]
    passwd = lib.base3.coe(lib.disk3.read_file('/etc/passwd'))
    table_data = []
    header = ['user', 'pw', 'uid', 'gid', 'comment', 'home_dir', 'user_shell']
    for line in passwd.splitlines():
        data = dict(zip(header, line.split(':')))
        if data['user'] not in DEFAULT_LINUX_USER:
            table_data.append(data)

    return lib.base3.get_table(
        table_data,
        header,
        header=header,
        sort_by_key='user',
    )


def get_os_info():
    release_files = [
        '/etc/centos-release',
        '/etc/fedora-release',
        '/etc/redhat-release',
        '/etc/system-release',
    ]
    for release_file in release_files:
        if os.path.isfile(release_file):
            return lib.base3.coe(lib.disk3.read_file(release_file)).strip()

    success, result = lib.shell3.shell_exec('. /etc/os-release && echo $NAME $VERSION', shell=True)
    if success:
        stdout, stderr, retc = result
        return stdout.strip()
    return ''


def get_python_modules():
    pm = ''
    try:
        import bs4 # pylint: disable=C0415
        pm += '* BeautifulSoup {}\n'.format(bs4.__version__)
    except ImportError:
        pass
    try:
        import mysql.connector # pylint: disable=C0415
        pm += '* mysql.connector {}\n'.format(mysql.connector.__version__)
    except ImportError:
        pass
    try:
        import psutil # pylint: disable=C0415,W0621
        pm += '* psutil {}\n'.format(psutil.__version__)
    except ImportError:
        pass
    return pm


def get_sw():
    """ applications, alphabetically sorted by output, callable with version info.
    """

    sw = ''

    sw += retcmd_output('acme.sh',                   'acme.sh --version',                  regex =r'v(.*)')
    sw += retcmd_output('Aide',                      'aide --version',                     regex =r'de (.*)')
    sw += retcmd_output('AnyDesk',                   'anydesk --version',                  regex =r'(.*)')
    sw += retcmd_output('Apache httpd',              'httpd -v',                           regex =r'/(\d+\.\d+\.\d+)')
    sw += retcmd_output('Apache Tomcat',             'tomcat version',                     regex =r'Server version: Apache Tomcat/(.*)')
    sw += retcmd_output('BIND',                      'named -v',                           regex =r'^BIND (.*?)-')
    sw += retcmd_output('Borg',                      'borg --version',                     regex =r' (.*)')
    sw += retcmd_output('certbot',                   'certbot --version',                  regex =r' (.*)')
    sw += retcmd_output('ClamAV',                    'clamd --version',                    regex =r' (.*) ')
    sw += retcmd_output('chrony',                    'chrony --version',                   regex =r'n ([\d\.]+)')
    sw += retcmd_output('cockpit',                   '/usr/libexec/cockpit-ws --version',  regex =r': ([\d\.]+)')
    sw += retcmd_output('coturn',                    'command -v turnserver',              ignore_output=True)
    sw += retcmd_output('Containerd',                'containerd --version',               regex =r'\.io (.*) ')
    sw += retcmd_output('Docker Compose',            'docker-compose --version',           regex =r' version (.*?),')
    sw += retcmd_output('Docker/Podman',             'docker --version',                   regex =r' (\d+\d?\.\d+\d?.\d+\d?)')
    sw += retcmd_output('Erlang',                    "erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().'  -noshell",  regex =r'\"(.*)\"')
    sw += retcmd_output('Elastic-Filebeat',          'filebeat version',                   regex =r'n ([\d\.]+)')
    sw += retcmd_output('Fail2ban Server',           'fail2ban-server --version',          regex =r' v(.*)')
    sw += retcmd_output('Firefox',                   'firefox --version',                  regex =r' Firefox (.*)')
    sw += retcmd_output('FreeIPA',                   'ipa --version',                      regex =r' (.*?),')
    sw += retcmd_output('g++',                       'g++ --version',                      regex =r'\) ([\d\.]+)')
    sw += retcmd_output('gcc',                       'gcc --version',                      regex =r'\) ([\d\.]+)')
    sw += retcmd_output('Git',                       'git --version',                      regex =r'git version (.*)')
    sw += retcmd_output('Glances',                   'glances --version',                  regex =r'Glances v(.*?) ')
    sw += retcmd_output('GNOME Display Manager',     'gdm --version ',                     regex =r' \S*')
    sw += retcmd_output('GNOME Shell',               'gnome-shell --version',              regex =r'l (\S*)')
    sw += retcmd_output('gpg',                       'gpg --version',                      regex =r'gpg (.*)')
    sw += retcmd_output('Grafana Server',            'grafana-server -v',                  regex =r'Version (.*?) ')
    sw += retcmd_output('HAPrxoy',                   'haproxy -v',                         regex =r'version (.*) -')
    sw += retcmd_output('i3',                        'i3 --version',                       regex =r'version (\S+)')
    sw += retcmd_output('Icinga2',                   'icinga2 --version',                  regex =r'\(version: (.*)\)')
    sw += retcmd_output('InfluxDB',                  'influx --version',                   regex =r': (.*)')
    sw += retcmd_output('Java',                      'java -version',                      regex =r'(.*)').replace('version ', '').replace('"', '')
    sw += retcmd_output('LibreOffice Online (LOOL)', 'command -v loolwsd',                 ignore_output=True)
    sw += retcmd_output('LibreOffice',               'libreoffice --version',              regex =r' (.*?) ')
    sw += retcmd_output('Lighttpd',                  'lighttpd -v',                        regex =r'lighttpd/(.*) -')
    sw += retcmd_output('Linux Kernel',              'uname -r')
    tmp = retcmd_output('MySQL',                     'mysqld --version',                   regex =r'Ver (.*?) ')
    if 'MariaDB' in tmp:
        tmp = tmp.replace('MySQL', 'MariaDB').replace('-MariaDB', '')
    sw += tmp
    sw += retcmd_output('MongoDB',                   'mongod --version',                   regex =r'db version v(.*?)\n')
    sw += retcmd_output('mydumper/myloader',         'mydumper --version',                 regex =r' (.*?),')
    sw += retcmd_output('Nginx',                     'nginx -v',                           regex =r'nginx version: nginx/(.*)')
    sw += retcmd_output('Nikto',                     'nikto -Version',                     regex =r'main\s*(.*)')
    sw += retcmd_output('Node',                      'node --version',                     regex =r'v(.*)')
    sw += retcmd_output('NodeJS',                    'nodejs --version',                   regex =r'v(.*)')
    sw += retcmd_output('npm',                       'npm --version',                      regex =r'(.*)')
    sw += retcmd_output('ntpd',                      'ntpq -c version',                    regex =r' ([\d\.p]+)@')
    sw += retcmd_output('OpenSSL',                   'openssl version',                    regex =r' (.*?) ')
    sw += retcmd_output('OpenVAS',                   'openvas version',                    regex =r' (.*?)$')
    sw += retcmd_output('OpenVPN',                   'openvpn --version',                  regex =r'N (\d+\.\d+(\.\d+)?)')
    tmp += retcmd_output('Open Virtual Machine Tools','vmtoolsd --version',                regex =r'n ([\d\.]+)')
    if 'error' in tmp.lower():
        sw += '* Open Virtual Machine Tools are installed, but throw an error.\n  Maybe tools virtualization condition "vmware" is not met.\n'
    else:
        sw += tmp
    sw += retcmd_output('Perl',                      'perl --version',                     regex =r' \(v(.*?)\) ')
    sw += retcmd_output('PHP',                       'php --version',                      regex =r'PHP (.*?) \(.*')
    sw += retcmd_output('PHP-FPM',                   'php-fpm --version',                  regex =r'PHP (.*?) \(.*')
    sw += retcmd_output('pip',                       'pip --version',                      regex =r'pip (.*) from')
    sw += retcmd_output('Postfix',                   'postconf -d mail_version',           regex =r'= ([\d\.]+)')
    sw += retcmd_output('PostgreSQL',                'psql --version',                     regex =r'\(PostgreSQL\) (.*)')
    sw += retcmd_output('Python',                    'python2.6 --version',                regex =r' (.*)')
    sw += retcmd_output('Python',                    'python2.7 --version',                regex =r' (.*)')
    sw += retcmd_output('Python',                    'python3.10 --version',               regex =r' (.*)')
    sw += retcmd_output('Python',                    'python3.4 --version',                regex =r' (.*)')
    sw += retcmd_output('Python',                    'python3.6 --version',                regex =r' (.*)')
    sw += retcmd_output('Python',                    'python3.8 --version',                regex =r' (.*)')
    sw += retcmd_output('Python',                    'python3.9 --version',                regex =r' (.*)')
    sw += retcmd_output('python cmd mapped to',      'python --version',                   regex =r' (.*)')
    sw += retcmd_output('python2 cmd mapped to',     'python2 --version',                  regex =r' (.*)')
    sw += retcmd_output('python3 cmd mapped to',     'python3 --version',                  regex =r' (.*)')
    sw += retcmd_output('QEMU Guest Agent',          'qemu-ga --version',                  regex =r'([\d\.]+)')
    sw += retcmd_output('RabbitMQ Server',           'rabbitmqctl version')
    sw += retcmd_output('Redis Server',              'redis-server --version',             regex =r' v=(.*?) ')
    sw += retcmd_output('Samba',                     'smbd --version',                     regex =r'n ([\d\.]+)')
    sw += retcmd_output('SPICE Agent',               'command -v spice-vdagentd',          ignore_output=True)
    sw += retcmd_output('ssh',                       'ssh -V',                             regex =r'_(.+),')
    sw += retcmd_output('Sublime Text',              'subl --version',                     regex =r'.* (.*)$')
    sw += retcmd_output('sudo',                      'sudo --version',                     regex =r'n (.+)')
    sw += retcmd_output('swanctl',                   'swanctl --version',                  regex =r'(.*)')
    sw += retcmd_output('systemd',                   'systemctl --version',                regex =r'systemd (\d+)')
    sw += retcmd_output('TeamViewer',                'teamviewer --version',               regex =r'.* (\S*)  ')
    sw += retcmd_output('tmate',                     'tmate -V',                           regex =r' (.*)')
    sw += retcmd_output('Veeam',                     'veeamagent --version',               regex =r'(.*)')

    return sw


def get_sys_dimensions():
    """get some very basic system statistics
    """

    sys_dimensions = {}
    if HAVE_PSUTIL:
        sys_dimensions['cpu'] = psutil.cpu_count(logical=True)
        sys_dimensions['ram'] = psutil.virtual_memory().total
    return sys_dimensions


def get_systemd_default_target():
    cmd = 'systemctl get-default'
    stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(cmd))
    if stderr or retc != 0:
        return ''

    return '* {}\n'.format(stdout.strip())


def get_systemd_timers():
    # using `--output=json` sadly does not work with older systemd versions (eg systemd 239 on CentOS 7), therefore we have to parse the human output
    # in order to list for a different user (`--user`), we would need to sudo to that user first - we will skip that for now
    cmd = 'systemctl list-timers'
    stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(cmd))
    if stderr or retc != 0:
        return ''

    msg = ''
    start_pos = None
    end_pos = None
    for line in stdout.splitlines():
        if start_pos is None:
            start_pos = line.find('UNIT')
            end_pos = line.find('ACTIVATES', start_pos)
        if '.timer' in line:
            msg = '{}* {}\n'.format(msg, line[start_pos:end_pos].strip())
    return msg


def get_systemd_units(cmd):
    # using `--output=json` sadly does not work with older systemd versions (eg systemd 239 on CentOS 7), therefore we have to parse the human output
    # in order to list for a different user (`--user`), we would need to sudo to that user first - we will skip that for now
    stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(cmd))
    if stderr or retc != 0:
        return ''

    msg = ''
    for line in stdout.splitlines():
        msg = '{}* {}\n'.format(msg, line.split()[0])
    return msg


def get_tools():
    """ simple tools, alphabetically sorted by output
    """

    tools = ''

    tools += retcmd_output('dig',       'command -v dig', ignore_output=True)
    tools += retcmd_output('hdparm',    'command -v hdparm', ignore_output=True)
    tools += retcmd_output('iftop',     'command -v iftop', ignore_output=True)
    tools += retcmd_output('lsof',      'command -v lsof', ignore_output=True)
    tools += retcmd_output('nano',      'command -v nano', ignore_output=True)
    tools += retcmd_output('ncat',      'command -v ncat', ignore_output=True)
    tools += retcmd_output('nmap',      'command -v nmap', ignore_output=True)
    tools += retcmd_output('rsync',     'command -v rsync', ignore_output=True)
    tools += retcmd_output('tcpdump',   'command -v tcpdump', ignore_output=True)
    tools += retcmd_output('telnet',    'command -v telnet', ignore_output=True)
    tools += retcmd_output('tmux',      'command -v tmux', ignore_output=True)
    tools += retcmd_output('unzip',     'command -v unzip', ignore_output=True)
    tools += retcmd_output('vim',       'command -v vim', ignore_output=True)
    tools += retcmd_output('wget',      'command -v wget', ignore_output=True)
    tools += retcmd_output('whois',     'command -v whois', ignore_output=True)
    tools += retcmd_output('wireshark', 'command -v tshark', ignore_output=True)

    return tools


def get_tuned_active_profile():
    """ Return current active tuned profile (if any).
    """
    return retcmd_output('tuned profile', 'tuned-adm active', regex=r': (.*)').strip().replace('* ', '')


def get_virt_info():
    success, result = lib.shell3.shell_exec('systemd-detect-virt')
    if success:
        stdout, stderr, retc = result
        return stdout.strip()
    return 'Unknown'


def retcmd_output(return_text, cmd, regex=None, ignore_output=False):
    success, result = lib.shell3.shell_exec(cmd)
    if not success:
        return ''
    stdout, stderr, retc = result
    if ignore_output:
        if retc == 0:
            return '* {}\n'.format(return_text.strip())
        return ''
    if stdout == '' and stderr != '':
        # https://stackoverflow.com/questions/26028416/why-does-python-print-version-info-to-stderr
        # https://stackoverflow.com/questions/13483443/why-does-java-version-go-to-stderr
        stdout = stderr
    stdout = stdout.strip().splitlines()[0].strip()
    # where to find the version number in output?
    if regex:
        re_search = re.search(regex, stdout)
        if re_search:
            try:
                return '* {} {}\n'.format(return_text, re_search.group(1).strip())
            except IndexError:
                # this means there is no group 1, so return the whole match
                return '* {} {}\n'.format(return_text, re_search.group(0).strip())
    return '* {} {}\n'.format(return_text, stdout)


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # first header line
    msg = '{} - '.format(socket.gethostname())

    os_info = get_os_info()
    os_version_perfdata = ''
    if os_info:
        msg += os_info
        re_search = re.search(r'[\d\.]+', os_info)
        if re_search:
            os_version_perfdata = re_search.group(0).replace('.', '')

    virt = get_virt_info()
    if virt == 'none':
        msg += ' on bare-metal'
    else:
        msg += ' virtualized on {}'.format(virt)

    sys_dimensions = get_sys_dimensions()
    if sys_dimensions:
        msg += ', {} {}, {} RAM'.format(
            sys_dimensions['cpu'],
            lib.txt3.pluralize('CPU', sys_dimensions['cpu']),
            lib.human3.bytes2human(sys_dimensions['ram'])
        )
    else:
        msg += ', no sys dimensions (consider installing psutil)'

    disks = get_disks()
    if disks:
        msg += ', {} {}'.format(
            lib.txt3.pluralize('Disk', disks.count(',')+1),
            disks,
        )

    msg += ', {} boot'.format(get_boot_mode())

    tuned = get_tuned_active_profile()
    if tuned:
        msg += ', {}'.format(tuned)


    success, pub_ip = lib.net3.get_ip_public()
    if success:
        msg += ', Public IP {}'.format(pub_ip)

    birthday = get_birthdate()
    if birthday and birthday != '-':
        msg += ', born {}'.format(birthday)

    msg += '. {}'.format(get_key_features())

    msg += '. About-me v{}'.format(__version__)

    # further lines

    interfaces = get_interfaces()
    if interfaces:
        msg = '{}\n\n# Interfaces (IPv4)\n{}'.format(msg, interfaces)

    sw = get_sw()
    if sw:
        msg = '{}\n\n# Software\n{}'.format(msg, sw)

    apps = get_apps()
    if apps:
        msg = '{}\n\n# Apps\n{}'.format(msg, apps)

    tools = get_tools()
    if tools:
        msg = '{}\n\n# Tools\n{}'.format(msg, tools)

    pm = get_python_modules()
    if pm:
        msg = '{}\n\n# 3rd Party Python modules\n{}'.format(msg, pm)

    systemd_default_target = get_systemd_default_target()
    if systemd_default_target:
        msg = '{}\n\n# systemd default target\n{}'.format(msg, systemd_default_target)

    timers = get_systemd_timers()
    if timers:
        msg = '{}\n\n# systemd timers\n{}'.format(msg, timers)

    enabled_units = get_systemd_units('systemctl list-unit-files --type service --state enabled --no-legend')
    if enabled_units:
        msg = '{}\n\n# systemd enabled units\n{}'.format(msg, enabled_units)

    mounts = get_systemd_units('systemctl list-unit-files --type mount --state static --state generated --no-legend')
    if mounts:
        msg = '{}\n\n# systemd mounts\n{}'.format(msg, mounts)

    automounts = get_systemd_units('systemctl list-unit-files --type automount --state enabled --state static --no-legend')
    if automounts:
        msg = '{}\n\n# systemd automounts\n{}'.format(msg, automounts)

    nondefault_users = get_nondefault_users()
    if nondefault_users:
        msg = '{}\n\n# non-default users\n{}'.format(msg, nondefault_users)

    crontabs = get_crontabs()
    if crontabs:
        msg = '{}\n\n# crontabs\n{}'.format(msg, crontabs)

    perfdata = ''
    if sys_dimensions:
        perfdata += lib.base3.get_perfdata('cpu', sys_dimensions['cpu'], None, None, None, 0, None)
        perfdata += lib.base3.get_perfdata('ram', sys_dimensions['ram'], 'B', None, None, 0, None)
    perfdata += lib.base3.get_perfdata('disks', disks.count('\n'), None, None, None, 0, None)
    perfdata += lib.base3.get_perfdata('osversion', os_version_perfdata, None, None, None, None, None)

    # over and out
    lib.base3.oao(msg, STATE_OK, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
