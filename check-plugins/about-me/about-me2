#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import argparse
import os
import platform
import re
import sys
from traceback import print_exc

from lib.globals2 import STATE_UNKNOWN, STATE_OK
import lib.base2

try:
    import psutil
except ImportError as e:
    lib.base2.oao('Python module "psutil" is not installed.', STATE_UNKNOWN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020051601'

DESCRIPTION = 'Reports a quick overview about the host dimensions and installed software.'


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
    	'-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    return parser.parse_args()


def find_command(return_text, cmd, version_regex=None):
    success, result = lib.base2.shell_exec(cmd)
    if not success:
        return ''
    if cmd.endswith(' -h'):
        return '{}, '.format(return_text)
    stdout, stderr, retc = result
    if stdout == '' and stderr != '':
        # https://stackoverflow.com/questions/26028416/why-does-python-print-version-info-to-stderr
        # https://stackoverflow.com/questions/13483443/why-does-java-version-go-to-stderr]
        stdout = stderr
    stdout = stdout.strip()
    # where to find the version number in output?
    if version_regex:
        try:
            stdout = re.search(version_regex, stdout)
            return return_text + ' {}, '.format(stdout.group(1).strip())
        except:
            return ''
    else:
        return return_text + ' {}, '.format(stdout).strip()


def get_sys_dimensions():
    '''get some very basic system statistics
    '''
    
    sys = {}
    sys['cpu'] = psutil.cpu_count(logical=True)
    sys['ram'] = psutil.virtual_memory().total

    stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec('lsblk --nodeps --output SIZE --noheadings --include 8,252,259'))
    sys['disks'] = stdout.strip().count('\n') + 1
    sys['disk-sizes'] = re.sub(r'\s+', ' ', stdout).strip()
    return sys


def get_apps():
    ''' try to find some (manual installed)  applications - here called "apps";
    mainly found in /home, /opt or /var/www/html;
    just guessing and without version info
    '''

    apps = ''

    apps += 'VMware Tools, '                    if os.path.isdir('/etc/vmware-tools') else ''

    apps += 'H-Net SecureService (eFaktura), '  if os.path.isdir('/home/hnet/HnetSecureService') else ''
    apps += 'Hostbill, '                        if os.path.isdir('/home/hostbill') else ''

    apps += 'Apache Tomcat, '                   if os.path.isdir('/opt/tomcat') else ''
    apps += 'Atlassian Bitbucket, '             if os.path.isdir('/opt/atlassian/bitbucket') else ''
    apps += 'Atlassian Confluence, '            if os.path.isdir('/opt/atlassian/confluence') else ''
    apps += 'Atlassian Jira, '                  if os.path.isdir('/opt/atlassian/jira') else ''
    apps += 'Atomicorp, '                       if os.path.isdir('/opt/atomicorp') else ''
    apps += 'Bacchus, '                         if os.path.isdir('/opt/bacchus') else ''
    apps += 'BizBus, '                          if os.path.isdir('/opt/bizbus') else ''
    apps += 'Brother Printer SW, '              if os.path.isdir('/opt/brother') else ''
    apps += 'Collabora Office 5.3, '            if os.path.isdir('/opt/collaboraoffice5.3') else ''
    apps += 'Collabora Office 6.0, '            if os.path.isdir('/opt/collaboraoffice6.0') else ''
    apps += 'DCM4CHEE, '                        if os.path.isdir('/opt/dcm4chee') else ''
    apps += 'F5 VPN SW, '                       if os.path.isdir('/opt/f5/vpn') else ''
    apps += 'GitLab, '                          if os.path.isdir('/opt/gitlab') else ''
    apps += 'Google Chrome, '                   if os.path.isdir('/opt/google/chrome') else ''
    apps += 'JBoss, '                           if os.path.isdir('/opt/jboss') else ''
    apps += 'JumpCloud, '                       if os.path.isdir('/opt/jc') else ''
    apps += 'KeeWeb, '                          if os.path.isdir('/opt/KeeWeb') else ''
    apps += 'Keycloak, '                        if os.path.isdir('/opt/keycloak') else ''
    apps += 'MariaDB ColumnStore, '             if os.path.isdir('/opt/columnstore') else ''
    apps += 'Medidata (eFaktura), '             if os.path.isdir('/opt/MPCommunicator') else ''
    apps += 'Metabase, '                        if os.path.isdir('/opt/metabase') else ''
    apps += 'NodeBB, '                          if os.path.isdir('/opt/nodebb') else ''
    apps += 'PHP 7.1 (RH), '                    if os.path.isdir('/opt/rh/rh-php71') else ''
    apps += 'PHP 7.2 (RH), '                    if os.path.isdir('/opt/rh/rh-php72') else ''
    apps += 'PHP 7.3 (RH), '                    if os.path.isdir('/opt/rh/rh-php73') else ''
    apps += 'PHP 7.4 (RH), '                    if os.path.isdir('/opt/rh/rh-php74') else ''
    apps += 'PostgreSQL 9.0 (RH), '             if os.path.isdir('/opt/rh/rh-postgresql90') else ''
    apps += 'PostgreSQL 9.1 (RH), '             if os.path.isdir('/opt/rh/rh-postgresql91') else ''
    apps += 'PostgreSQL 9.2 (RH), '             if os.path.isdir('/opt/rh/rh-postgresql92') else ''
    apps += 'PostgreSQL 9.3 (RH), '             if os.path.isdir('/opt/rh/rh-postgresql93') else ''
    apps += 'PostgreSQL 9.4 (RH), '             if os.path.isdir('/opt/rh/rh-postgresql94') else ''
    apps += 'PostgreSQL 9.5 (RH), '             if os.path.isdir('/opt/rh/rh-postgresql95') else ''
    apps += 'PostgreSQL 9.6 (RH), '             if os.path.isdir('/opt/rh/rh-postgresql96') else ''
    apps += 'Rambox, '                          if os.path.isdir('/opt/Rambox') else ''
    apps += 'Rocket.Chat, '                     if os.path.isdir('/opt/Rocket.Chat') else ''
    apps += 'Tarifpool, '                       if os.path.isdir('/opt/tarifpool') else ''
    apps += 'WildFly, '                         if os.path.isdir('/opt/wildfly') else ''
    apps += 'Zimbra, '                          if os.path.isdir('/opt/zimbra') else ''

    apps += 'Elasticsearch, '                   if os.path.isfile('/usr/share/elasticsearch/bin/elasticsearch') else ''
    apps += 'Graylog Server, '                  if os.path.isfile('/usr/share/graylog-server/bin/graylog-server') else ''

    apps += 'Contao, '                          if os.path.isdir('/var/www/html/contao') else ''
    apps += 'HTMLy, '                           if os.path.isdir('/var/www/html/htmly') else ''
    apps += 'Matomo, '                          if os.path.isdir('/var/www/html/matomo') else ''
    apps += 'MediaWiki, '                       if os.path.isdir('/var/www/html/mediawiki') else ''
    apps += 'Nextcloud, '                       if os.path.isdir('/var/www/html/nextcloud') else ''
    apps += 'Piwik, '                           if os.path.isdir('/var/www/html/piwik') else ''
    apps += 'Roundcube, '                       if os.path.isdir('/var/www/html/roundcubemail') else ''
    apps += 'Vtiger, '                          if os.path.isdir('/var/www/html/vtigercrm') else ''
    apps += 'Yii, '                             if os.path.isdir('/var/www/html/yii') else ''
    apps += 'Yii2, '                            if os.path.isdir('/var/www/html/yii2') else ''
    apps += 'Yii2, '                            if os.path.isdir('/var/www/html/yii2-basic') else ''
    apps += 'Yii2, '                            if os.path.isdir('/var/www/html/yii2-advanced') else ''

    if apps:
        return apps[:-2]
    else:
        return ''


def get_tools():
    ''' simple tools, alphabetically sorted by output
    '''

    sw = ''

    sw += find_command('dig',       'dig -h')
    sw += find_command('hdparm',    'hdparm -h')
    sw += find_command('iftop',     'iftop -h')
    sw += find_command('lsof',      'lsof -h')
    sw += find_command('nano',      'nano -h')
    sw += find_command('ncat',      'ncat -h')
    sw += find_command('nmap',      'nmap -h')
    sw += find_command('rsync',     'rsync -h')
    sw += find_command('tcpdump',   'tcpdump -h')
    sw += find_command('telnet',    'telnet -h')
    sw += find_command('unzip',     'unzip -h')
    sw += find_command('vim',       'vim -h')
    sw += find_command('wget',      'wget -h')
    sw += find_command('whois',     'whois -h')
    sw += find_command('wireshark', 'tshark -h')
    
    if sw:
        return sw[:-2]
    else:
        return ''


def get_sw():
    ''' applications, alphabetically sorted by output, callable with version info.
    '''

    sw = ''

    sw += find_command('Apache httpd',              'httpd -v',                  version_regex=r'Apache/(.*) ')
    sw += find_command('BIND',                      'named -v',                  version_regex=r'^BIND (.*?)-')
    sw += find_command('Borg',                      'borg --version',            version_regex=r' (.*)')
    sw += find_command('ClamAV',                    'clamd --version',           version_regex=r' (.*)/')
    sw += find_command('Containerd',                'containerd --version',      version_regex=r' (.*) ')
    sw += find_command('Docker',                    'docker --version',          version_regex=r' version (.*?),')
    sw += find_command('Docker Compose',            'docker-compose --version',  version_regex=r' version (.*?),')
    sw += find_command('Erlang', 'erl -h')
    sw += find_command('Fail2ban Server',           'fail2ban-server --version', version_regex=r' v(.*)')
    sw += find_command('FreeIPA',                   'ipa --version',             version_regex=r' (.*?),')
    sw += find_command('Git',                       'git --version',             version_regex=r'git version (.*)')
    sw += find_command('Glances',                   'glances --version',         version_regex=r'Glances v(.*?) ')
    sw += find_command('Grafana Server',            'grafana-server -v',         version_regex=r'Version (.*?) ')
    sw += find_command('Icinga2',                   'icinga2 --version',         version_regex=r'\(version: (.*)\)')
    sw += find_command('InfluxDB',                  'influx --version',          version_regex=r': (.*)')
    sw += find_command('Java',                      'java -version',             version_regex=r'(.*)').replace('version ', '').replace('"', '')
    sw += find_command('LibreOffice',               'libreoffice --version',     version_regex=r' (.*?) ')
    sw += find_command('LibreOffice Online (LOOL)', 'loolwsd -h')
    tmp = find_command('MySQL',                     'mysqld --version',          version_regex=r'Ver (.*?) ')
    if 'MariaDB' in tmp:
        tmp = tmp.replace('MySQL', 'MariaDB').replace('-MariaDB', '')
    sw += tmp
    sw += find_command('MongoDB',                   'mongod --version',          version_regex=r'db version v(.*?)\n')
    sw += find_command('Node',                      'node --version',            version_regex=r'v(.*)')
    sw += find_command('NodeJS',                    'nodejs --version',          version_regex=r'v(.*)')
    sw += find_command('npm',                       'npm --version',             version_regex=r'(.*)')
    sw += find_command('Perl',                      'perl --version',            version_regex=r' \(v(.*?)\) ')
    sw += find_command('PHP',                       'php --version',             version_regex=r'PHP (.*?) \(.*')
    sw += find_command('PostgreSQL',                'psql --version',            version_regex=r'\(PostgreSQL\) (.*)')
    sw += find_command('Python mapped to',          'python --version',          version_regex=r' (.*)')
    sw += find_command('Python2',                   'python2 --version',         version_regex=r' (.*)')
    sw += find_command('Python3',                   'python3 --version',         version_regex=r' (.*)')
    sw += find_command('RabbitMQ Server',           'rabbitmq-server -h')
    sw += find_command('Redis Server',              'redis-server --version',    version_regex=r' v=(.*?) ')
    sw += find_command('Sublime Text',              'subl --version',            version_regex=r'.* (.*)$')
    sw += find_command('TeamViewer',                'teamviewer --version',      version_regex=r'    (.*) ')  # TODO: better regex here
    
    if sw:
        return sw[:-2]
    else:
        return ''


def get_os_info():
    os_info = os.uname()
    platform_info = platform.linux_distribution()
    return '{} {} {}'.format(platform_info[0], platform_info[1], os_info[2])


def get_python_modules():
    pm = ''
    try:
        import bs4
        pm += 'BeautifulSoup {}, '.format(bs4.__version__)
    except:
        pass
    try:
        import mysql.connector
        pm += 'mysql.connector {}, '.format(mysql.connector.__version__)
    except:
        pass
    try:
        import psutil
        pm += 'psutil {}, '.format(psutil.__version__)
    except:
        pass
    if pm:
        return pm[:-2]
    else:
        return ''


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        sys.exit(STATE_UNKNOWN)

    msg = ''
    perfdata = ''

    sys_dimensions = get_sys_dimensions()
    msg += '{} {}, '.format(sys_dimensions['cpu'], lib.base2.pluralize('CPU', sys_dimensions['cpu']))
    msg += lib.base2.bytes2human(sys_dimensions['ram']) + ' RAM, '
    msg += '{} {} ({}), '.format(sys_dimensions['disks'], lib.base2.pluralize('Disk', sys_dimensions['disks']), sys_dimensions['disk-sizes'])
    msg = msg[:-2]

    sw = get_sw()
    if sw:
        msg += ' - Software: ' + sw 

    apps = get_apps()
    if apps:
        msg += ' - Apps: ' + apps 

    tools = get_tools()
    if tools:
        msg += ' - Tools: ' + tools

    pm = get_python_modules()
    if pm:
        msg += ' - Python modules: ' + pm 
    
    msg += ' - OS: ' + get_os_info()

    perfdata += lib.base2.get_perfdata('cpu', sys_dimensions['cpu'], None, None, None, 0, None)
    perfdata += lib.base2.get_perfdata('ram', sys_dimensions['ram'], 'B', None, None, 0, None)
    perfdata += lib.base2.get_perfdata('disks', sys_dimensions['disks'], None, None, None, 0, None)

    lib.base2.oao(msg, STATE_OK, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
