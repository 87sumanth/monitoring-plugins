#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020050101'

DESCRIPTION = 'Checks the state of a service, socket, device, mount, automount, swap, target, path, timer, slice or scope - using systemd/systemctl. For example, to check if the service "sshd" is running, use "systemd-unit --substate=running --unit=sshd". Have a look at the README for more details.'

command = 'systemctl show -p LoadState,ActiveState,SubState,UnitFileState '

DEFAULT_ACTIVESTATE  = []
DEFAULT_LOADSTATE  = 'loaded'
DEFAULT_SERVERITY = 'warn'
DEFAULT_SUBSTATE  = []


#====================
from lib.globals2 import *

import lib.base2

import argparse
from traceback import print_exc



def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('--activestate',
        help='Expected systemd ActiveState (repeating).',
        dest='ACTIVESTATE',
        default=DEFAULT_ACTIVESTATE,
        action='append',
        choices=['active', 'failed', 'inactive'],
        )

    parser.add_argument('--loadstate',
        help='Expected systemd LoadState. Default: %(default)s',
        dest='LOADSTATE',
        default=DEFAULT_LOADSTATE,
        choices=['loaded', 'masked', 'not-found'],
        )

    parser.add_argument('--severity',
        help='Severity if something is found. One of "warn" or "crit". Default: %(default)s',
        dest='SEVERITY',
        default=DEFAULT_SERVERITY,
        choices=['warn', 'crit'],
        )

    parser.add_argument('--substate',
        help='Expected systemd SubState (repeating).',
        dest='SUBSTATE',
        default=DEFAULT_SUBSTATE,
        action='append',
        choices=['abandoned', 'active', 'dead', 'exited', 'failed', 'listening', 'mounted', 'plugged', 'running', 'waiting'],
        )

    parser.add_argument('--unit',
        help='Systemd unit name, for example "sshd", "sshd.service", "my-samba-mount.mount".',
        dest='UNIT',
        required = True,
        )

    parser.add_argument('--unitfilestate',
        help='Expected systemd UnitFileState.',
        dest='UNITFILESTATE',
        choices=['bad', 'disabled', 'enabled', 'enabled-runtime', 'generated', 'indirect', 'linked', 'linked-runtime', 'masked', 'masked-runtime', 'static', 'transient']
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)


    stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(command + args.UNIT))
    if (stderr or retc != 0):
        lib.base2.oao('Bash command `{}` failed.\nStdout: {}\nStderr: {}'.format(command, stdout, stderr), STATE_UNKNOWN)
    result = stdout.split('\n')

    loadstate     = result[0].replace('LoadState=', '')
    activestate   = result[1].replace('ActiveState=', '')
    substate      = result[2].replace('SubState=', '')
    unitfilestate = result[3].replace('UnitFileState=', '')


    state = STATE_OK
    msg = '{} is {}, {}, {}'.format(args.UNIT, loadstate, activestate, substate)
    if args.UNITFILESTATE:
        msg += ', unit file is {}.'.format(unitfilestate)

    # now do the checks
    problem = False
    problem_msg = ''
    if args.LOADSTATE and loadstate == 'not-found':
        problem = True
        problem_msg += 'Unit {} not found.  '.format(args.UNIT)
    else:
	    if args.LOADSTATE and args.LOADSTATE != loadstate:
	        problem = True
	        problem_msg += 'LoadState is "{}", but supposed to be "{}"; '.format(loadstate, args.LOADSTATE)
	    if args.ACTIVESTATE and activestate not in args.ACTIVESTATE:
	        problem = True
	        problem_msg += 'ActiveState is "{}", but supposed to be "{}"; '.format(activestate, args.ACTIVESTATE)
	    if args.SUBSTATE and substate not in args.SUBSTATE:
	        problem = True
	        problem_msg += 'SubState is "{}", but supposed to be "{}"; '.format(substate, args.SUBSTATE)
	    if args.UNITFILESTATE and args.UNITFILESTATE != unitfilestate:
	        problem = True
	        problem_msg += 'UnitFileState is "{}", but supposed to be "{}"; '.format(unitfilestate, args.UNITFILESTATE)

    if problem:
        msg = '{} - '.format(args.UNIT) + problem_msg[:-2]
        state = STATE_CRIT if args.SEVERITY == 'crit' else STATE_WARN

    lib.base2.oao(msg, state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
