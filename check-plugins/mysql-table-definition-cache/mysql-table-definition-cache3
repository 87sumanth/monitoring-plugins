#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base3  # pylint: disable=C0413
import lib.db_mysql3  # pylint: disable=C0413
import lib.human3  # pylint: disable=C0413
from lib.globals3 import (STATE_OK, STATE_UNKNOWN,  # pylint: disable=C0413
                          STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023021701'

DESCRIPTION = """Checks the size of the table definition cache in MySQL/MariaDB."""

DEFAULT_HOSTNAME = '127.0.0.1'
DEFAULT_PORT = '3306'
DEFAULT_PASSWORD = ''
DEFAULT_TIMEOUT = 3
DEFAULT_USERNAME = 'root'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-H', '--hostname',
        help='MySQL/MariaDB hostname. Default: %(default)s',
        dest='HOSTNAME',
        default=DEFAULT_HOSTNAME,
    )

    parser.add_argument(
        '-p', '--password',
        help='Use the indicated password to authenticate the connection. Default: %(default)s',
        dest='PASSWORD',
        default=DEFAULT_PASSWORD,
    )

    parser.add_argument(
        '--port',
        help='MySQL/MariaDB port. Default: %(default)s',
        dest='PORT',
        type=int,
        default=DEFAULT_PORT,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '-u', '--username',
        help='MySQL/MariaDB username. Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
    )

    return parser.parse_args()


def get_vars(conn):
    # Do not implement `get_all_vars()`, just fetch the ones we need for this check.
    # Without the GLOBAL modifier, SHOW VARIABLES displays the values that are used for
    # the current connection to MariaDB.
    sql = """
        show global variables
        where variable_name like 'table_definition_cache'
            ;
          """
    return lib.base3.coe(lib.db_mysql3.select(conn, sql))


def main():
    """The main function. Hier spielt die Musik.
    """

    # logic taken from mysqltuner.pl:mysql_stats(), section # Table definition cache, v1.9.8
    # including variable names

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    mysql_connection = {
        'user':               args.USERNAME,
        'password':           args.PASSWORD,
        'host':               args.HOSTNAME,
        'port':               args.PORT,
        'timeout':            args.TIMEOUT,
    }
    conn = lib.base3.coe(lib.db_mysql3.connect(mysql_connection))
    lib.base3.coe(lib.db_mysql3.check_select_privileges(conn))

    myvar = lib.db_mysql3.lod2dict(get_vars(conn))

    # init some vars
    state = STATE_OK
    perfdata = ''

    # calculations
    mycalc = {}
    sql = 'select count(*) as cnt from information_schema.tables'
    nbtables = lib.base3.coe(lib.db_mysql3.select(conn, sql))
    lib.db_mysql3.close(conn)
    mycalc['total_tables'] = nbtables[0]['cnt']

    # Table definition cache
    if myvar.get('table_definition_cache', None) is not None:
        if int(myvar['table_definition_cache']) == -1:
            msg = 'table_definition_cache ({}) is in autosizing mode.'.format(
                myvar['table_definition_cache'],
            )
        elif int(myvar['table_definition_cache']) < int(mycalc['total_tables']):
            state = STATE_WARN
            msg = 'table_definition_cache ({}) is lower than number of tables ({}){}. '.format(
                myvar['table_definition_cache'],
                mycalc['total_tables'],
                lib.base3.state2str(state, prefix=' '),
            )
            msg += 'Set table_definition_cache > {} or to -1 (autosizing if supported).'.format(
                mycalc['total_tables'],
            )
        else:
            msg = 'Everything is ok. table_definition_cache ({}) is upper than number of tables ({}).'.format(
                myvar['table_definition_cache'],
                mycalc['total_tables'],
            )
    else:
        msg = 'Everything is ok.'

    perfdata += lib.base3.get_perfdata('mysql_table_definition_cache', myvar['table_definition_cache'], None, None, None, 0, None)
    perfdata += lib.base3.get_perfdata('mysql_total_tables', mycalc['total_tables'], None, None, None, 0, None)

    # over and out
    lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
