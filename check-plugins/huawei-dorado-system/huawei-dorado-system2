#! /usr/bin/env python2
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413
import time # pylint: disable=C0413

import lib.args2 # pylint: disable=C0413
import lib.base2 # pylint: disable=C0413
import lib.huawei2 # pylint: disable=C0413
import lib.test2 # pylint: disable=C0413
from lib.globals2 import STATE_CRIT, STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021111902'

DESCRIPTION = """Query basic status and performance data about a Huawei OceanStor Dorado storage
                 system via the REST Interface, using the ``/system/`` endpoint."""

DEFAULT_WARN = 90
DEFAULT_CRIT = 95

DEFAULT_NO_PROXY = False
DEFAULT_TIMEOUT  = 3

DEFAULT_SCOPE = 0
DEFAULT_CACHE_EXPIRE = 15 # minutes; default session timeout period is 20 minutes


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--cache-expire',
        help='The amount of time after which the credential cache expires, in minutes. Default: %(default)s',
        dest='CACHE_EXPIRE',
        type=int,
        default=DEFAULT_CACHE_EXPIRE,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the CRIT threshold as a percentage. Default: >= %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--device-id',
        help='Huawei OceanStor Dorado API Device ID.',
        dest='DEVICE_ID',
        required=True,
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--password',
        help='Huawei OceanStor Dorado API Password.',
        dest='PASSWORD',
        required=True,
    )

    parser.add_argument(
        '--scope',
        help='Huawei OceanStor Dorado API Scope.',
        dest='SCOPE',
        default=DEFAULT_SCOPE,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args2.csv,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '-u', '--url',
        help='Huawei OceanStor Dorado API URL.',
        dest='URL',
        required=True,
    )

    parser.add_argument(
        '--username',
        help='Huawei OceanStor Dorado API Username.',
        dest='USERNAME',
        required=True,
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the WARN threshold as a percentage. Default: >= %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if not args.URL.startswith('http'):
        lib.base2.oao('--url parameter has to start with "http://" or https://".', STATE_UNKNOWN)

    # fetch data
    if args.TEST is None:
        # Do not miss the last slash (/) at the end of the URL.
        result = lib.huawei2.get_data('system/', args)
    else:
        # do not call the command, put in test data
        import json
        stdout, stderr, retc = lib.test2.test(args.TEST)
        result = json.loads(stdout)

    # no valuable result?
    if not result:
        lib.base2.oao('Got no valuable response from {}.'.format(args.URL), STATE_UNKNOWN)
    if result.get('error').get('code') != 0:
        lib.base2.oao('{} {}'.format(
            result.get('error').get('description'),
            result.get('error').get('suggestion'),
        ), STATE_UNKNOWN)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''
    data = result.get('data')

    # analyze the data
    health_state = STATE_OK
    if lib.huawei2.get_health_status(data.get('HEALTHSTATUS')) != 'Normal (1)':
        health_state = STATE_CRIT
        state = lib.base2.get_worst(state, health_state)

    running_state = STATE_OK
    if lib.huawei2.get_running_status(data.get('RUNNINGSTATUS')) != 'Normal (1)':
        running_state = STATE_WARN
        state = lib.base2.get_worst(state, running_state)

    sp_used = round(float(data.get('STORAGEPOOLUSEDCAPACITY')) / float(data.get('STORAGEPOOLCAPACITY')) * 100)
    sp_state = lib.base2.get_state(sp_used, args.WARN, args.CRIT)
    state = lib.base2.get_worst(state, sp_state)

    capa_used = round(float(data.get('USEDCAPACITY')) / float(data.get('TOTALCAPACITY')) * 100)
    capa_state = lib.base2.get_state(capa_used, args.WARN, args.CRIT)
    state = lib.base2.get_worst(state, capa_state)

    # build the message
    msg += '{} {}, UUID: {}, Name: {}, Location: {}, Health Status: {}{}, Running Status: {}{}\n'.format(
        data.get('productModeString'),
        data.get('pointRelease'),
        lib.huawei2.get_uuid(data),
        data.get('NAME'),
        data.get('LOCATION'),
        lib.huawei2.get_health_status(data.get('HEALTHSTATUS')),
        lib.base2.state2str(health_state, prefix=' ', empty_ok=True),
        lib.huawei2.get_running_status(data.get('RUNNINGSTATUS')),
        lib.base2.state2str(running_state, prefix=' ', empty_ok=True),
    )
    msg += 'Sectors: Total {}% used ({}/{}){}, Storage Pool {}% used ({}/{}){}\n'.format(
        capa_used,
        lib.base2.number2human(data.get('USEDCAPACITY')),
        lib.base2.number2human(data.get('TOTALCAPACITY')),
        lib.base2.state2str(capa_state, prefix=' '),
        sp_used,
        lib.base2.number2human(data.get('STORAGEPOOLUSEDCAPACITY')),
        lib.base2.number2human(data.get('STORAGEPOOLCAPACITY')),
        lib.base2.state2str(sp_state, prefix=' '),
    )
    msg += '\nFetched API {} {}'.format(
        result.get('counter', 0),
        lib.base2.pluralize('time', result.get('counter', 0),),
    )

    perfdata += lib.base2.get_perfdata('sectors-capacity-percent', capa_used, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base2.get_perfdata('sectors-storagepool-percent', sp_used, '%', args.WARN, args.CRIT, 0, 100)

    perfdata += lib.base2.get_perfdata('HEALTHSTATUS', data.get('HEALTHSTATUS'), None, None, 2, 0, 2)
    perfdata += lib.base2.get_perfdata('RUNNINGSTATUS', data.get('RUNNINGSTATUS'), None, None, None, 0, None)
    perfdata += lib.base2.get_perfdata('FREEDISKSCAPACITY', data.get('FREEDISKSCAPACITY'), None, None, None, 0, data.get('TOTALCAPACITY'))
    perfdata += lib.base2.get_perfdata('HOTSPAREDISKSCAPACITY', data.get('HOTSPAREDISKSCAPACITY'), None, None, None, 0, data.get('TOTALCAPACITY'))
    perfdata += lib.base2.get_perfdata('UNAVAILABLEDISKSCAPACITY', data.get('UNAVAILABLEDISKSCAPACITY'), None, None, None, 0, data.get('TOTALCAPACITY'))
    perfdata += lib.base2.get_perfdata('USEDCAPACITY', data.get('USEDCAPACITY'), None, None, None, 0, data.get('TOTALCAPACITY'))
    perfdata += lib.base2.get_perfdata('STORAGEPOOLFREECAPACITY', data.get('STORAGEPOOLFREECAPACITY'), None, None, None, 0, data.get('STORAGEPOOLCAPACITY'))
    perfdata += lib.base2.get_perfdata('STORAGEPOOLHOSTSPARECAPACITY', data.get('STORAGEPOOLHOSTSPARECAPACITY'), None, None, None, 0, data.get('STORAGEPOOLCAPACITY'))
    perfdata += lib.base2.get_perfdata('STORAGEPOOLRAWCAPACITY', data.get('STORAGEPOOLRAWCAPACITY'), None, None, None, 0, None)
    perfdata += lib.base2.get_perfdata('STORAGEPOOLUSEDCAPACITY', data.get('STORAGEPOOLUSEDCAPACITY'), None, None, None, 0, data.get('STORAGEPOOLCAPACITY'))
    perfdata += lib.base2.get_perfdata('THICKLUNSALLOCATECAPACITY', data.get('THICKLUNSALLOCATECAPACITY'), None, None, None, 0, None)
    perfdata += lib.base2.get_perfdata('THICKLUNSUSEDCAPACITY', data.get('THICKLUNSUSEDCAPACITY'), None, None, None, 0, None)
    perfdata += lib.base2.get_perfdata('THINLUNSALLOCATECAPACITY', data.get('THINLUNSALLOCATECAPACITY'), None, None, None, 0, data.get('THINLUNSMAXCAPACITY'))
    perfdata += lib.base2.get_perfdata('THINLUNSUSEDCAPACITY', data.get('THINLUNSUSEDCAPACITY'), None, None, None, 0, data.get('THINLUNSMAXCAPACITY'))
    perfdata += lib.base2.get_perfdata('mappedLunsCountCapacity', data.get('mappedLunsCountCapacity'), None, None, None, 0, None)
    perfdata += lib.base2.get_perfdata('unMappedLunsCountCapacity', data.get('unMappedLunsCountCapacity'), None, None, None, 0, None)
    perfdata += lib.base2.get_perfdata('userFreeCapacity', data.get('userFreeCapacity'), None, None, None, 0, None)

    # over and out
    lib.base2.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base2.cu()
