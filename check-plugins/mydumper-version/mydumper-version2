#! /usr/bin/env python2
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS})


import argparse
import sys
from traceback import print_exc

import lib.base2
import lib.cache2
import lib.url2
from lib.globals2 import STATE_OK, STATE_UNKNOWN, STATE_WARN

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021050401'

DESCRIPTION = 'This plugin lets you track if mydumper updates are available.'

DEFAULT_CACHE_EXPIRE = 24 # hours


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument('--cache-expire',
        help='The amount of time after which the update check cache expires, in hours. Default: %(default)s',
        dest='CACHE_EXPIRE',
        type=int,
        default=DEFAULT_CACHE_EXPIRE,
        )

    return parser.parse_args()


def get_latest_version(expire):
    # get version online, but first from cache
    latest_version = lib.cache2.get('mydumper-version')
    if latest_version:
        return (True, latest_version)

    # nothing found in cache, get the latest version from github
    success, latest_version = lib.url2.get_latest_version_from_github('maxbube', 'mydumper')
    if not success:
        return (success, latest_version)

    latest_version = latest_version.replace('v', '')
    lib.cache2.set('mydumper-version', latest_version, lib.base2.now() + expire)
    return (True, latest_version)


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    installed_version = lib.base2.get_command_output('mydumper --version', regex=r' (.*?),')
    if not installed_version:
        lib.base2.oao('mydumper/myloader not found', STATE_UNKNOWN)
    latest_version = lib.base2.coe(get_latest_version(args.CACHE_EXPIRE*60*60))
    perfdata = lib.base2.get_perfdata('mydumper-version', lib.base2.version2float(installed_version), None, None, None, 0, None)

    if lib.base2.version(installed_version) >= lib.base2.version(latest_version):
        lib.base2.oao('mydumper/myloader v{} is up to date'.format(installed_version), STATE_OK, perfdata)
    lib.base2.oao('mydumper/myloader v{} is available (installed: v{})'.format(latest_version, installed_version), STATE_WARN, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:
        print_exc()
        sys.exit(STATE_UNKNOWN)
