#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

try:
    import psutil  # pylint: disable=C0413
except ImportError:
    lib.base.oao('Python module "psutil" is not installed.', STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023042703'

DESCRIPTION = 'Checks the used disk space, for each partition.'

DEFAULT_WARN = '90%USED'
DEFAULT_CRIT = '95%USED'
DEFAULT_IGNORE = []


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Critical threshold, '
             'of the form "<number>[unit][method]", where unit is '
             'one of `%%|K|M|G|T|P` and method is one of `USED|FREE`. If "unit" is omitted, '
             '`%%` is assumed. `K` means `kibibyte` etc. If "method" is omitted, '
             '`USED` is assumed. `USED` means "number ore more", `FREE` means "number or less". '
             'Examples: '
             '`95` = alert at 95%% usage or more. '
             '`9.5M` = alert when 9.5 MiB or more is used. '
             'Other self-explanatory examples are '
             '`95%%USED`, `5%%FREE`, `9.5GFREE`, `1400GUSED`. '
             'Default: %(default)s',
        dest='CRIT',
        type=lib.args.number_unit_method,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--ignore',
        help='Mountpoint to be ignored (repeating). '
             'The mountpoint is ignored if it starts with the specified value. '
             'Example: "/boot" ignores "/boot" as well as "/boot/efi". '
             'On Windows, use drive letters without backslash ("Y:" or "Y"). '
             'Default: %(default)s',
        dest='IGNORE',
        default=DEFAULT_IGNORE,
        action='append',
    )

    parser.add_argument(
        '-w', '--warning',
        help='Warning threshold, '
             'of the form "<number>[unit][method]", where unit is '
             'one of `%%|K|M|G|T|P` and method is one of `USED|FREE`. If "unit" is omitted, '
             '`%%` is assumed. `K` means `kibibyte` etc. If "method" is omitted, '
             '`USED` is assumed. `USED` means "number ore more", `FREE` means "number or less". '
             'Examples: '
             '`95` = alert at 95%% usage. '
             '`9.5M` = alert when 9.5 MiB is used. '
             'Other self-explanatory examples are '
             '`95%%USED`, `5%%FREE`, `9.5GFREE`, `1400GUSED`. '
             'Default: %(default)s',
        dest='WARN',
        type=lib.args.number_unit_method,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)
    # args.WARN[0] = number, args.WARN[1] = unit, args.WARN[2] = USED|FREE
    try:
        float(args.WARN[0])
        float(args.CRIT[0])
    except ValueError:
        lib.base.oao(
            'Invalid parameter value.',
            STATE_UNKNOWN,
        )

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''
    table_data = []

    # analyze data
    try:
        parts = psutil.disk_partitions(all=False)
    except AttributeError:
        lib.base.oao(
            'Did not find physical devices (e.g. hard disks, cd-rom drives, USB keys).',
            STATE_UNKNOWN,
        )

    override_allowed = True
    for part in parts:
        # ignore partitions in ignore list
        # hint: we can't do `if not part or part.mountpoint in args.IGNORE:` because it is
        # impossible to specify a "Y:\" on the command line ('Y:\' or 'Y:\\' all don't work).
        # so check using "startswith()":
        if not part or any(part.mountpoint.startswith(i) for i in args.IGNORE):
            continue

        # sdiskpart(device='/dev/vda2', mountpoint='/', fstype='ext4', opts='rw,relatime')
        # sdiskpart(
        #   device='/dev/sr0',
        #   mountpoint='/run/media/root/CentOS 7 x86_64',
        #   fstype='iso9660',
        #   opts='ro,nosuid,nodev,relatime,uid=0,gid=0,iocharset=utf8,mode=0400,dmode=0500'
        # )
        # ignore `/snap`, iso mountpoints and cdroms (UDF = universal disk format)
        if part.fstype in ['CDFS', 'iso9660', 'squashfs', 'UDF'] or part.opts in ['cdrom']:
            continue

        usage = psutil.disk_usage(part.mountpoint)
        disk_state = STATE_OK

        # check % vs. USED|FREE
        if args.WARN[1] == '%' and args.WARN[2] == 'USED':
            disk_state = lib.base.get_state(
                usage.percent,
                args.WARN[0],
                None,
                'ge',
            )
        if args.CRIT[1] == '%' and args.CRIT[2] == 'USED':
            disk_state = lib.base.get_worst(
                disk_state,
                lib.base.get_state(
                    usage.percent,
                    None,
                    args.CRIT[0],
                    'ge',
                ),
            )
        if args.WARN[1] == '%' and args.WARN[2] == 'FREE':
            disk_state = lib.base.get_state(
                100.0 - usage.percent,
                args.WARN[0],
                None,
                'le',
            )
        if args.CRIT[1] == '%' and args.CRIT[2] == 'FREE':
            disk_state = lib.base.get_worst(
                disk_state,
                lib.base.get_state(
                    100.0 - usage.percent,
                    None,
                    args.CRIT[0],
                    'le',
                ),
            )

        # check K|M|G|T|P vs. USED|FREE
        if args.WARN[1] != '%' and args.WARN[2] == 'USED':
            disk_state = lib.base.get_state(
                usage.used,
                lib.human.human2bytes(''.join(args.WARN[:2])),
                None,
                'ge',
            )
        if args.CRIT[1] != '%' and args.CRIT[2] == 'USED':
            disk_state = lib.base.get_worst(
                disk_state,
                lib.base.get_state(
                    usage.used,
                    None,
                    lib.human.human2bytes(''.join(args.CRIT[:2])),
                    'ge',
                ),
            )
        if args.WARN[1] != '%' and args.WARN[2] == 'FREE':
            disk_state = lib.base.get_state(
                usage.free,
                lib.human.human2bytes(''.join(args.WARN[:2])),
                None,
                'le',
            )
        if args.CRIT[1] != '%' and args.CRIT[2] == 'FREE':
            disk_state = lib.base.get_worst(
                disk_state,
                lib.base.get_state(
                    usage.free,
                    None,
                    lib.human.human2bytes(''.join(args.CRIT[:2])),
                    'le',
                ),
            )

        state = lib.base.get_worst(state, disk_state)

        perfdata += lib.base.get_perfdata('{}-total'.format(part.mountpoint), usage.total, 'B', None, None, 0, usage.total) # pylint: disable=C0301
        perfdata += lib.base.get_perfdata('{}-usage'.format(part.mountpoint), usage.used, 'B', None, None, 0, usage.total) # pylint: disable=C0301
        # Maybe implement all various combinations for warn and crit thresholds later
        # (args.WARN[1] == '%', args.WARN[2] == 'FREE', args.CRIT[1] != '%', ...)
        # Until then: None, None
        perfdata += lib.base.get_perfdata('{}-percent'.format(part.mountpoint), usage.percent, '%', None, None, 0, 100) # pylint: disable=C0301

        msg_header = '{} {}%{} - total: {}, used: {}, avail: {} (warn={} crit={})'.format(
            part.mountpoint,
            usage.percent,
            lib.base.state2str(disk_state, prefix=' '),
            lib.human.bytes2human(usage.total),
            lib.human.bytes2human(usage.used),
            lib.human.bytes2human(usage.free),
            ''.join(args.WARN),
            ''.join(args.CRIT),
        )

        # the disk with the most severe state should be in the first line of the plugin output
        if msg == '' and part.mountpoint in ['/', 'C:\\']:
            msg = msg_header
        elif state == STATE_WARN and (msg == '' or override_allowed):
            msg = msg_header
        elif state == STATE_CRIT:
            msg = msg_header
            override_allowed = False

        table_data.append({
            'mountpoint': '{}'.format(part.mountpoint),
            'type': '{}'.format(part.fstype),
            'used': lib.human.bytes2human(usage.used),
            'avail': lib.human.bytes2human(usage.free),
            'size': lib.human.bytes2human(usage.total),
            'percent': '{}%{}'.format(usage.percent, lib.base.state2str(disk_state, prefix=' ')),
        })

    if msg == '':
        msg = 'Nothing checked.'

    table = lib.base.get_table(
        table_data,
        ['mountpoint', 'type', 'size', 'used', 'avail', 'percent'],
        ['Mountpoint', 'Type', 'Size', 'Used', 'Avail', 'Use%'],
        'percent',
    )

    # over and out
    lib.base.oao(msg.strip() + '\n\n' + table, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
