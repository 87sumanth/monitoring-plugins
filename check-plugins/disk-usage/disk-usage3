#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.base3 # pylint: disable=C0413
import lib.human3 # pylint: disable=C0413
from lib.globals3 import STATE_CRIT, STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413

try:
    import psutil # pylint: disable=C0413
except ImportError:
    lib.base3.oao('Python module "psutil" is not installed.', STATE_UNKNOWN)


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2022110301'

DESCRIPTION = 'Checks the used disk space, for each partition.'

DEFAULT_WARN = 90
DEFAULT_CRIT = 95
DEFAULT_IGNORE = []


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical threshold partition usage percentage. Default: %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--ignore',
        help='Mountpoint to be ignored (repeating). '
             'The mountpoint is ignored if it starts with the specified value. '
             'Example: "/boot" ignores "/boot" as well as "/boot/efi". '
             'On Windows, use drive letters without backslash ("Y:" or "Y"). '
             'Default: %(default)s',
        dest='IGNORE',
        default=DEFAULT_IGNORE,
        action='append',
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning threshold partition usage percentage. Default: %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # init some vars
    state = STATE_OK
    perfdata = ''
    table_data = []
    msg = ''

    # analyze data
    parts = psutil.disk_partitions(all=False)
    override_allowed = True
    for part in parts:
        # ignore partitions in ignore list
        # hint: we can't do `if not part or part.mountpoint in args.IGNORE:` because it is
        # impossible to specify a "Y:\" on the command line ('Y:\' or 'Y:\\' all don't work).
        # so check using "startswith()":
        if not part or any(part.mountpoint.startswith(i) for i in args.IGNORE):
            continue

        # sdiskpart(device='/dev/vda2', mountpoint='/', fstype='ext4', opts='rw,relatime')
        # sdiskpart(device='/dev/sr0', mountpoint='/run/media/root/CentOS 7 x86_64', fstype='iso9660', opts='ro,nosuid,nodev,relatime,uid=0,gid=0,iocharset=utf8,mode=0400,dmode=0500')
        # ignore `/snap`, iso mountpoints and cdroms (UDF = universal disk format)
        if part.fstype in ['squashfs', 'iso9660', 'UDF'] or part.opts in ['cdrom']:
            continue

        usage = psutil.disk_usage(part.mountpoint)

        disk_state = lib.base3.get_state(usage.percent, args.WARN, args.CRIT, 'ge')
        state = lib.base3.get_worst(state, disk_state)
        perfdata += lib.base3.get_perfdata('{}-total'.format(part.mountpoint), usage.total, 'B', None, None, 0, usage.total)
        perfdata += lib.base3.get_perfdata('{}-percent'.format(part.mountpoint), usage.percent, '%', args.WARN, args.CRIT, 0, 100)
        perfdata += lib.base3.get_perfdata('{}-usage'.format(part.mountpoint), usage.used, 'B', None, None, 0, usage.total)

        msg_header = '{} {}%{} - total: {}, used: {}, free: {}'.format(
            part.mountpoint,
            usage.percent,
            lib.base3.state2str(disk_state, prefix=' '),
            lib.human3.bytes2human(usage.total),
            lib.human3.bytes2human(usage.used),
            lib.human3.bytes2human(usage.free),
        )

        # the disk with the most severe state should be in the first line of the plugin output
        if msg == '' and part.mountpoint in ['/', 'C:\\']:
            msg = msg_header
        elif state == STATE_WARN and (msg == '' or override_allowed):
            msg = msg_header
        elif state == STATE_CRIT:
            msg = msg_header
            override_allowed = False

        table_data.append({
            'mountpoint': '{}'.format(part.mountpoint),
            'type': '{}'.format(part.fstype),
            'used': lib.human3.bytes2human(usage.used),
            'total': lib.human3.bytes2human(usage.total),
            'percent': '{}% {}'.format(usage.percent, lib.base3.state2str(disk_state, prefix=' ')),
            })

    if msg == '':
        msg = 'Nothing checked.'

    table = lib.base3.get_table(
        table_data,
        ['mountpoint', 'type', 'used', 'total', 'percent'],
        ['mountpoint', 'type', 'used', 'total', 'percent'],
        'percent',
    )

    # over and out
    lib.base3.oao(msg.strip() + '\n\n' + table, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
