#! /usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv3')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV3'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV3') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.base3 # pylint: disable=C0413
import lib.shell3 # pylint: disable=C0413
from lib.globals3 import STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2022050401'

DESCRIPTION = """Checks the kernel settings specifically for MySQL/MariaDB."""


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # logic taken from mysqltuner.pl:get_kernel_info(), v1.9.8

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # init some vars
    msg = ''
    state = STATE_OK
    perfdata = ''

    params = [
        'fs.aio-max-nr',
        'sunrpc.tcp_slot_table_entries',
        'vm.swappiness',
    ]
    result = {}

    # fetch data
    for param in params:
        cmd = 'sysctl -n {} 2> /dev/null'.format(param)
        stdout, stderr, retc = lib.base3.coe(lib.shell3.shell_exec(cmd))
        if stdout:
            result[param] = int(stdout)

    # analyze data and build the message

    if result['vm.swappiness'] > 10:
        state = STATE_WARN
        msg += 'vm.swappiness is {}, should be <= 10 (use `echo 10 > /proc/sys/vm/swappiness`). '.format(
            result['vm.swappiness'],
        )
    perfdata += lib.base3.get_perfdata('mysql_kernel_vm.swappiness', result['vm.swappiness'], '%', None, None, 0, 100)

    # only if /proc/sys/sunrpc exists
    if os.path.isdir('/proc/sys/sunrpc'):
        if result.get('sunrpc.tcp_slot_table_entries', '') == '' or result['sunrpc.tcp_slot_table_entries'] <= 100:
            state = STATE_WARN
            msg += 'sunrpc.tcp_slot_table_entries is {}, should be > 100 (use `echo 128 > /proc/sys/sunrpc/tcp_slot_table_entries`). '.format(
                result['sunrpc.tcp_slot_table_entries'],
            )
        perfdata += lib.base3.get_perfdata('mysql_kernel_sunrpc.tcp_slot_table_entries', result['sunrpc.tcp_slot_table_entries'], None, None, None, 0, None)

    if os.path.isfile('/proc/sys/fs/aio-max-nr'):
        if result['fs.aio-max-nr'] < 1000000:
            state = STATE_WARN
            msg += 'fs.aio-max-nr is {}, should be > 1M (use `echo 1048576 > /proc/sys/fs/aio-max-nr`). '.format(
                result['fs.aio-max-nr'],
            )
        perfdata += lib.base3.get_perfdata('mysql_kernel_fs.aio-max-nr', result['fs.aio-max-nr'], None, None, None, 0, None)

    if not msg:
        msg = 'Everything is ok.'

    # over and out
    lib.base3.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
