#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS})


import argparse
import sys
from traceback import print_exc

import lib.args2
import lib.base2
from lib.globals2 import STATE_OK, STATE_WARN, STATE_CRIT, STATE_UNKNOWN


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021050401'

DESCRIPTION = """Counts how many users are currently logged in, both via tty (on Windows: Console)
                and pts (on Linux: typically ssh, on Windows: RDP). Also counts the disconnected
                users on Windows (closed connections without logging out)."""

DEFAULT_WARN_PTS = 20
DEFAULT_WARN_DISC = 1
DEFAULT_WARN_TTY = 1
DEFAULT_CRIT_PTS = None
DEFAULT_CRIT_DISC = None
DEFAULT_CRIT_TTY = None

WINDOWS_NO_USER_STRING = 'No User exists for *'


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__),
    )

    parser.add_argument(
        '-c', '--critical',
        default=[DEFAULT_CRIT_TTY, DEFAULT_CRIT_PTS, DEFAULT_CRIT_DISC],
        dest='CRIT',
        help='Set the critical threshold for logged in tty/pts users, in the format "3,10". On Windows, you can additionally set it for disconnected users, in the format "3,10,1". Default: %(default)s',
        type=lib.args2.csv,
    )

    parser.add_argument(
        '-w', '--warning',
        default=[DEFAULT_WARN_TTY, DEFAULT_WARN_PTS, DEFAULT_WARN_DISC],
        dest='WARN',
        help='Set the warning threshold for logged in tty/pts users, in the format "1,5". On Windows, you can additionally set it for disconnected users, in the format "1,5,10". Default: %(default)s',
        type=lib.args2.csv,
    )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)


    # init some vars
    msg = ''
    perfdata = ''
    state = STATE_OK
    count_tty = 0
    count_pts = 0
    count_disc = 0

    try:
        WARN_TTY = lib.args2.int_or_none(args.WARN[0])
        WARN_PTS = lib.args2.int_or_none(args.WARN[1])
        CRIT_TTY = lib.args2.int_or_none(args.CRIT[0])
        CRIT_PTS = lib.args2.int_or_none(args.CRIT[1])
    except:
        lib.base2.oao('Unexpected parameter values for --warning and/or --critical.', STATE_UNKNOWN)

    # execute the shell command and return its result and exit code
    if lib.base2.LINUX:
        cmd = '/usr/bin/w'
        stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(cmd))
        if stderr or retc != 0:
            lib.base2.oao('{}'.format(stderr), STATE_UNKNOWN)
        result = stdout.strip()

        lines = result.splitlines()[1:] # ignore the first line
        for line in lines:
            value = line.split()[1]
            if 'tty' in value or ':' in value:
                # for example, ":0", the 0. host display (https://unix.stackexchange.com/questions/16815/what-does-display-0-0-actually-mean)
                count_tty += 1
            if 'pts' in value:
                count_pts += 1

    # execute the shell command and return its result and exit code
    if lib.base2.WINDOWS:
        WARN_DISC = lib.args2.int_or_none(args.WARN[2])
        CRIT_DISC = lib.args2.int_or_none(args.CRIT[2])

        cmd = 'query user'
        stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(cmd))
        # Could not find any documentation in the return codes of 'query user' (%ERRORLEVEL% is always 1).
        result = stdout.strip()
        lines = result.splitlines()
        for line in lines:
            value = line.split()[1]
            if value == 'console':
                count_tty += 1
            if 'rdp-' in value:
                count_pts += 1
            if value == '':     # independent of display language 
                count_disc += 1

    # calculating the final check state
    if count_tty == 0 and count_pts == 0:
        msg = 'No one is logged in.'
    else:
        tty_state = lib.base2.get_state(count_tty, WARN_TTY, CRIT_TTY)
        state = lib.base2.get_worst(state, tty_state)
        msg += 'TTY: {}'.format(count_tty) + lib.base2.state2str(tty_state, prefix=' ')

        pts_state = lib.base2.get_state(count_pts, WARN_PTS, CRIT_PTS)
        state = lib.base2.get_worst(state, pts_state)
        msg += ', PTS: {}'.format(count_pts) + lib.base2.state2str(pts_state, prefix=' ')

        if lib.base2.WINDOWS:
            disc_state = lib.base2.get_state(count_disc, WARN_DISC, CRIT_DISC)
            state = lib.base2.get_worst(state, disc_state)
            msg += ', Disconnected: {}'.format(count_disc) + lib.base2.state2str(disc_state, prefix=' ')
            perfdata += lib.base2.get_perfdata('disc', count_disc, None, WARN_DISC, CRIT_DISC, 0, None)

        msg += '\n\n' + '\n'.join(lines)

    perfdata += lib.base2.get_perfdata('tty', count_tty, None, WARN_TTY, CRIT_TTY, 0, None)
    perfdata += lib.base2.get_perfdata('pts', count_pts, None, WARN_PTS, CRIT_PTS, 0, None)


    # over and out
    lib.base2.oao(msg, state, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
