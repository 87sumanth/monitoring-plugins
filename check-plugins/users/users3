#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
if os.path.exists('./monitoring-plugins-venv3'):
    activate_this = './monitoring-plugins-venv3/bin/activate_this.py'

if os.getenv('MONITORING_PLUGINS_VENV3'):
    activate_this = os.getenv('MONITORING_PLUGINS_VENV3') + '/bin/activate_this.py'

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


import argparse
import sys
from traceback import print_exc

import lib.args3
import lib.base3
from lib.globals3 import STATE_OK, STATE_WARN, STATE_CRIT, STATE_UNKNOWN

WINDOWS = os.name == "nt"
LINUX = sys.platform.startswith("linux")


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021021501'

DESCRIPTION = 'Counts how many users are currently logged in, both via tty and pts. Also counts the disconnected users on Windows (closed RDP connections without logging out).'

DEFAULT_WARN_PTS = 50
DEFAULT_WARN_TTY = 1
DEFAULT_WARN_DISC = 50
DEFAULT_CRIT_PTS = None
DEFAULT_CRIT_TTY = None
DEFAULT_CRIT_DISC = None

WINDOWS_NO_USER_STRING = 'No User exists for *'


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__),
    )

    parser.add_argument(
        '-c', '--critical',
        default=[DEFAULT_CRIT_TTY, DEFAULT_CRIT_PTS, DEFAULT_CRIT_DISC],
        dest='CRIT',
        help='Set the critical threshold for logged in tty/pts users, in the format "3,10". On Windows, you can additionally set it for disconnected users, in the format "3,10,1". Default: %(default)s',
        type=lib.args3.csv,
    )

    parser.add_argument(
        '-w', '--warning',
        default=[DEFAULT_WARN_TTY, DEFAULT_WARN_PTS, DEFAULT_WARN_DISC],
        dest='WARN',
        help='Set the warning threshold for logged in tty/pts users, in the format "1,5". On Windows, you can additionally set it for disconnected users, in the format "1,5,10". Default: %(default)s',
        type=lib.args3.csv,
    )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    WARN_TTY = lib.args3.int_or_none(args.WARN[0])
    WARN_PTS = lib.args3.int_or_none(args.WARN[1])
    CRIT_TTY = lib.args3.int_or_none(args.CRIT[0])
    CRIT_PTS = lib.args3.int_or_none(args.CRIT[1])
    if WINDOWS:
        WARN_DISC = lib.args3.int_or_none(args.WARN[2])
        CRIT_DISC = lib.args3.int_or_none(args.CRIT[2])

    if LINUX:
        cmd = '/usr/bin/w'
    elif WINDOWS:
        cmd = 'query user'

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = lib.base3.coe(lib.base3.shell_exec(cmd))
    if (LINUX and (stderr or retc != 0))\
        or (WINDOWS and stderr and WINDOWS_NO_USER_STRING not in stderr):
        # Could not find any documentation in the return codes of 'query user'. Therefore we assume any is ok.
        lib.base3.oao('Shell command failed with "{}".'.format(stderr), STATE_UNKNOWN)
    result = stdout.strip()

    if LINUX:
        lines = result.splitlines()[2:] # ignore the first two lines
    if WINDOWS:
        lines = result.splitlines()[1:] # ignore the first line

    count_pts = 0
    count_tty = 0
    count_disc = 0
    for line in lines:
        value = line.split()[1]
        if 'tty' in value or ':' in value\
            or 'console' in value:
            # for example, ":0", the 0. host display (https://unix.stackexchange.com/questions/16815/what-does-display-0-0-actually-mean)
            count_tty += 1
        if 'pts' in value\
            or 'rdp' in value:
            count_pts += 1
        if WINDOWS and 'Disc' in line:
            count_disc += 1

    msg = ''
    perfdata = lib.base3.get_perfdata('tty', count_tty, None, WARN_TTY, CRIT_TTY, 0, None)
    perfdata += lib.base3.get_perfdata('pts', count_pts, None, WARN_PTS, CRIT_PTS, 0, None)
    if WINDOWS:
        perfdata += lib.base3.get_perfdata('disc', count_disc, None, WARN_DISC, CRIT_DISC, 0, None)
    state = STATE_OK

    if (count_tty == 0 and count_pts == 0 and count_disc == 0)\
            or (WINDOWS and WINDOWS_NO_USER_STRING in stderr):
        msg = 'No one is logged in.'
    else:
        tty_state = lib.base3.get_state(count_tty, WARN_TTY, CRIT_TTY)
        state = lib.base3.get_worst(state, tty_state)
        msg += 'TTY: {}'.format(count_tty) + lib.base3.state2str(tty_state, prefix=' ')

        pts_state = lib.base3.get_state(count_pts, WARN_PTS, CRIT_PTS)
        state = lib.base3.get_worst(state, pts_state)
        msg += ', PTS: {}'.format(count_pts) + lib.base3.state2str(pts_state, prefix=' ')

        if WINDOWS:
            disc_state = lib.base3.get_state(count_disc, WARN_DISC, CRIT_DISC)
            state = lib.base3.get_worst(state, disc_state)
            msg += ', DISC: {}'.format(count_disc) + lib.base3.state2str(disc_state, prefix=' ')

        msg += '\n\n' + result

    lib.base3.oao(msg, state, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
