#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base3  # pylint: disable=C0413
import lib.cache3  # pylint: disable=C0413
import lib.disk3  # pylint: disable=C0413
import lib.time3  # pylint: disable=C0413
import lib.url3  # pylint: disable=C0413
from lib.globals3 import (STATE_OK, STATE_UNKNOWN,  # pylint: disable=C0413
                          STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2023021701'

DESCRIPTION = 'This plugin lets you track if server updates are available.'

DEFAULT_PATH = '/var/www/html/wordpress'
DEFAULT_CACHE_EXPIRE = 24 # hours


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--cache-expire',
        help='The amount of time after which the update check cache expires, in hours. Default: %(default)s',
        dest='CACHE_EXPIRE',
        type=int,
        default=DEFAULT_CACHE_EXPIRE,
    )

    parser.add_argument(
        '--path',
        help='Local path to your WordPress installation. Default: %(default)s',
        dest='PATH',
        default=DEFAULT_PATH,
    )

    return parser.parse_args()


def get_installed_version(path):
    success, version = lib.disk3.grep_file(
        path + '/wp-includes/version.php', r'wp_version\s*=\s*\'(.*)\''
    )
    if not success:
        return (success, version)
    if version:
        return (True, version)
    return (True, False)


def get_latest_version(expire):
    # get version online, but first from cache
    latest_version = lib.cache3.get('wordpress-version')
    if latest_version:
        return (True, latest_version)

    # nothing found in cache, get the latest version
    success, jsonst = lib.url3.fetch_json('https://api.github.com/repos/WordPress/WordPress/tags')
    if not success:
        return (success, jsonst)

    # there is an update available, so result contains json here
    latest_version = jsonst[0]['name']
    lib.cache3.set('wordpress-version', latest_version, lib.time3.now() + expire)
    return (True, latest_version)


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    installed_version = lib.base3.coe(get_installed_version(args.PATH))
    success, latest_version = get_latest_version(args.CACHE_EXPIRE*60*60)
    if not success:
        lib.base3.oao('WordPress v{} seems to be up to date (update server is not available)'.format(installed_version), STATE_OK)
    if lib.base3.version(installed_version) >= lib.base3.version(latest_version):
        lib.base3.oao('WordPress v{} is up to date'.format(installed_version), STATE_OK)

    # over and out
    lib.base3.oao('WordPress v{} installed, WordPress v{} available'.format(
        installed_version,
        latest_version,
    ), STATE_WARN, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base3.cu()
