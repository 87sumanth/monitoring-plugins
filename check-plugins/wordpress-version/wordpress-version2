#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import os

activate_this = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    activate_this = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    activate_this = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if activate_this and os.path.isfile(activate_this):
    exec(open(activate_this).read(), {'__file__': activate_this})


import argparse
import sys
from traceback import print_exc

from lib.globals2 import STATE_OK, STATE_UNKNOWN, STATE_WARN

import lib.base2
import lib.cache2
import lib.disk2
import lib.url2

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021021701'

DESCRIPTION = 'This plugin lets you track if server updates are available.'

DEFAULT_PATH = '/var/www/html/wordpress'
DEFAULT_CACHE_EXPIRE = 24 # hours


#====================


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '--cache-expire',
        help='The amount of time after which the update check cache expires, in hours. Default: %(default)s',
        dest='CACHE_EXPIRE',
        type=int,
        default=DEFAULT_CACHE_EXPIRE,
        )

    parser.add_argument(
        '--path',
        help='Local path to your WordPress installation. Default: %(default)s',
        dest='PATH',
        default=DEFAULT_PATH,
        )

    return parser.parse_args()


def get_installed_version(path):
    # jira/version.php: $OC_Version = array(18,0,2,2);
    success, version = lib.disk2.grep_file(path + '/wp-includes/version.php',
                                          r'wp_version\s*=\s*\'(.*)\'')
    if not success:
        return (success, version)
    if version:
        return (True, version)
    return (True, False)


def get_latest_version(expire):
    # get version online, but first from cache
    latest_version = lib.cache2.get('wordpress-version')
    if latest_version:
        return (True, latest_version)

    # nothing found in cache, get the latest version
    success, jsonst = lib.url2.fetch_json('https://api.github.com/repos/WordPress/WordPress/tags')
    if not success:
        return (success, jsonst)

    # there is an update available, so result contains xml here
    latest_version = jsonst[0]['name']
    lib.cache2.set('wordpress-version', latest_version, lib.base2.now() + expire)
    return (True, latest_version)


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    installed_version = lib.base2.coe(get_installed_version(args.PATH))
    success, latest_version = get_latest_version(args.CACHE_EXPIRE*60*60)
    if not success:
        lib.base2.oao('WordPress v{} seems to be up to date (mirror server is not available).'.format(installed_version), STATE_OK)
    if lib.base2.version(installed_version) >= lib.base2.version(latest_version):
        lib.base2.oao('WordPress v{} is up to date'.format(installed_version), STATE_OK)
    lib.base2.oao('WordPress v{} is available (installed: v{})'.format(latest_version, installed_version), STATE_WARN, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
