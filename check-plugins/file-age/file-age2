#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import argparse
import glob
import os
import sys
from traceback import print_exc

import lib.args2
import lib.base2
from lib.globals2 import STATE_OK, STATE_UNKNOWN

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020122301'

DESCRIPTION = 'Checks the time of last data modification for a file or directory, in seconds.'


DEFAULT_WARN = 60*60*24*30      # sec
DEFAULT_CRIT = 60*60*24*365     # sec


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '--filename',
        help='File (or directory) name to check. Supports glob in accordance with https://docs.python.org/2.7/library/glob.html. Beware of using recursive globs.',
        dest='FILE',
        required=True,
        )

    parser.add_argument(
        '--only-dirs',
        help='Only consider directories.',
        dest='ONLY_DIRS',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '--only-files',
        help='Only consider files.',
        dest='ONLY_FILES',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical age threshold in seconds. Default: >= %(default)ss (365d)',
        dest='CRIT',
        type=lib.args2.float_or_none,
        default=DEFAULT_CRIT,
        )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning age threshold in seconds. Default: >= %(default)ss (30d)',
        dest='WARN',
        type=lib.args2.float_or_none,
        default=DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch the data
    state = STATE_OK
    now = lib.base2.now()
    msg = ''
    file_count = 0
    for item in sorted(glob.iglob(args.FILE)):
        if os.path.isfile(item) and args.ONLY_DIRS:
            continue
        if os.path.isdir(item) and args.ONLY_FILES:
            continue

        age = (now - os.stat(item).st_mtime)
        item_state = lib.base2.get_state(age, args.WARN, args.CRIT)
        state = lib.base2.get_worst(item_state, state)
        file_count += 1
        msg += '* {}: {}{}\n'.format(item, lib.base2.seconds2human(age), lib.base2.state2str(item_state, prefix=" "))

    if file_count == 0:
        msg = 'No files found.'
        lib.base2.oao(msg, state, always_ok=args.ALWAYS_OK)

    if state == STATE_OK:
        msg = 'All {} {} are within the given time range (thresholds {}/{}).\n\n'.format(file_count, lib.base2.pluralize("file", file_count), lib.base2.seconds2human(args.WARN), lib.base2.seconds2human(args.CRIT)) + msg
    else:
        msg = 'Not all {} {} are within the given time range (thresholds {}/{}).\n\n'.format(file_count, lib.base2.pluralize("file", file_count), lib.base2.seconds2human(args.WARN), lib.base2.seconds2human(args.CRIT)) + msg

    # todo: perfdata?
    lib.base2.oao(msg, state, always_ok=args.ALWAYS_OK)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
