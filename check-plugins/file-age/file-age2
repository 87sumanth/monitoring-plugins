#! /usr/bin/env python2
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

"""Have a look at the check's README for further details.
"""

import os

# considering a virtual environment
ACTIVATE_THIS = False
venv_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'monitoring-plugins-venv2')
if os.path.exists(venv_path):
    ACTIVATE_THIS = os.path.join(venv_path, 'bin/activate_this.py')

if os.getenv('MONITORING_PLUGINS_VENV2'):
    ACTIVATE_THIS = os.path.join(os.getenv('MONITORING_PLUGINS_VENV2') + 'bin/activate_this.py')

if ACTIVATE_THIS and os.path.isfile(ACTIVATE_THIS):
    exec(open(ACTIVATE_THIS).read(), {'__file__': ACTIVATE_THIS}) # pylint: disable=W0122


import argparse # pylint: disable=C0413
import glob # pylint: disable=C0413
import sys # pylint: disable=C0413

import lib.base2 # pylint: disable=C0413
import lib.smb2 # pylint: disable=C0413
from lib.globals2 import STATE_CRIT, STATE_OK, STATE_UNKNOWN, STATE_WARN # pylint: disable=C0413

missing_smb_lib = False
try:
    import smbprotocol.exceptions
except ImportError as e:
    missing_smb_lib = 'smbclient'


__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2021092001'

DESCRIPTION = 'Checks the time of last data modification for a file or directory, in seconds.'


DEFAULT_CRIT = 60*60*24*365     # sec
DEFAULT_WARN = 60*60*24*30      # sec
DEFAULT_CRIT_COUNT = 0
DEFAULT_WARN_COUNT = 0
DEFAULT_PATTERN = '*'
DEFAULT_TIMEOUT = 3


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '-c', '--critical',
        help='Set the critical age threshold in seconds. Supports ranges. Default: >= %(default)ss (365d)',
        dest='CRIT',
        default=DEFAULT_CRIT,
    )

    parser.add_argument(
        '--critical-count',
        help='Set the critical threshold for the number of critical matches found. Supports ranges. Default: > %(default)s',
        dest='CRIT_COUNT',
        default=DEFAULT_CRIT_COUNT,
    )

    parser.add_argument(
        '--filename',
        help='File (or directory) name to check. Supports glob in accordance with https://docs.python.org/2.7/library/glob.html. Beware of using recursive globs. This is mutually exclusive with -u / --url.',
        dest='FILENAME',
    )

    parser.add_argument(
        '--only-dirs',
        help='Only consider directories.',
        dest='ONLY_DIRS',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--only-files',
        help='Only consider files.',
        dest='ONLY_FILES',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--password',
        help='SMB: Password.',
        dest='PASSWORD',
    )

    parser.add_argument(
        '--pattern',
        help="SMB: The search string to match against the names of SMB directories or files. This pattern can use '*' as a wildcard for multiple chars and '?' as a wildcard for a single char. Does not support regex patterns. Default: %(default)s.",
        dest='PATTERN',
        default=DEFAULT_PATTERN,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '-u', '--url',
        help='SMB: Set the url of the file (or directory) to check, starting with "smb://". This is mutually exclusive with --filename.',
        dest='URL',
        type=str,
    )

    parser.add_argument(
        '--username',
        help='SMB: Username.',
        dest='USERNAME',
    )

    parser.add_argument(
        '-w', '--warning',
        help='Set the warning age threshold in seconds. Supports ranges. Default: >= %(default)ss (30d)',
        dest='WARN',
        default=DEFAULT_WARN,
    )

    parser.add_argument(
        '--warning-count',
        help='Set the warning threshold for the number of critical matches found. Supports ranges. Default: > %(default)s',
        dest='WARN_COUNT',
        default=DEFAULT_WARN_COUNT,
    )

    return parser.parse_args()


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    if args.FILENAME and args.URL:
        lib.base2.oao('The --filename and -u / --url parameter are mutually exclusive. Please only use one.', STATE_UNKNOWN)
    if args.URL:
        split_url = args.URL.split('://')
        if len(split_url) != 2:
            lib.base2.oao('Could not parse the protocol of the url "{}".'.format(args.URL), STATE_UNKNOWN)
        proto, url = split_url
        if proto != 'smb':
            lib.base2.oao('The protocol "{}" is not supported.'.format(proto), STATE_UNKNOWN)

    now = lib.base2.now()
    msg = ''
    file_count = 0
    crit_count = 0
    warn_count = 0

    if args.FILENAME:
        for item in sorted(glob.iglob(args.FILENAME)):
            if os.path.isfile(item) and args.ONLY_DIRS:
                continue
            if os.path.isdir(item) and args.ONLY_FILES:
                continue

            age = (now - os.stat(item).st_mtime)
            item_state = STATE_OK
            # not using elif, as the item could contribute to both the warn_count and crit_count
            if not lib.base2.coe(lib.base2.match_range(age, args.WARN)):
                item_state = STATE_WARN
                warn_count += 1
            if not lib.base2.coe(lib.base2.match_range(age, args.CRIT)):
                item_state = STATE_CRIT
                crit_count += 1

            file_count += 1
            msg += '* {}: {}{}\n'.format(item, lib.base2.seconds2human(age), lib.base2.state2str(item_state, prefix=" "))

    if args.URL:
        for item in lib.base2.coe(lib.smb2.glob(url, args.USERNAME, args.PASSWORD, args.TIMEOUT, pattern=args.PATTERN)):
            try:
                if item.is_file() and args.ONLY_DIRS:
                    continue
                if item.is_dir() and args.ONLY_FILES:
                    continue

                age = (now - item.stat().st_mtime)
                item_state = STATE_OK
                # not using elif, as the item could contribute to both the warn_count and crit_count
                if not lib.base2.coe(lib.base2.match_range(age, args.WARN)):
                    item_state = STATE_WARN
                    warn_count += 1
                if not lib.base2.coe(lib.base2.match_range(age, args.CRIT)):
                    item_state = STATE_CRIT
                    crit_count += 1

                file_count += 1
                msg += '* {}: {}{}\n'.format(item, lib.base2.seconds2human(age), lib.base2.state2str(item_state, prefix=" "))
            except smbprotocol.exceptions.SMBOSError:
                # it is normal that files disappear while reading
                pass

    if not lib.base2.coe(lib.base2.match_range(crit_count, args.CRIT_COUNT)):
        state = STATE_CRIT
    elif not lib.base2.coe(lib.base2.match_range(warn_count, args.WARN_COUNT)):
        state = STATE_WARN
    else:
        state = STATE_OK

    if state == STATE_OK:
        if warn_count == 0 and crit_count == 0:
            msg = 'Everything is ok. {} {} checked, all within the specified count and time range.\n\n'.format(
                file_count,
                lib.base2.pluralize("item", file_count),
            ) + msg
        else:
            msg = 'Everything is ok. {} {} checked. All within the specified count range, but {} outside "{}" time range, and {} outside "{}" time range.\n\n'.format(
                file_count,
                lib.base2.pluralize("item", file_count),
                warn_count,
                lib.base2.seconds2human(args.WARN) if isinstance(lib.base2.guess_type(args.WARN), int) else args.WARN,
                crit_count,
                lib.base2.seconds2human(args.CRIT) if isinstance(lib.base2.guess_type(args.CRIT), int) else args.CRIT,
            ) + msg
    else:
        msg = '{} {} outside count range "{}" and outside "{}" time range. {} {} outside count range "{}" and outside "{}" time range. {} {} checked. \n\n'.format(
            warn_count,
            lib.base2.pluralize("item", warn_count),
            args.WARN_COUNT,
            lib.base2.seconds2human(args.WARN) if isinstance(lib.base2.guess_type(args.WARN), int) else args.WARN,
            crit_count,
            lib.base2.pluralize("item", crit_count),
            args.CRIT_COUNT,
            lib.base2.seconds2human(args.CRIT) if isinstance(lib.base2.guess_type(args.CRIT), int) else args.CRIT,
            file_count,
            lib.base2.pluralize("item", file_count),
        ) + msg

    # over and out
    lib.base2.oao(msg, state, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base2.cu()
