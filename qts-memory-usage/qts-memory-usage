#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

import argparse
import base64
import sys

from traceback import print_exc

from lib.globals import STATE_UNKNOWN

try:
    import xmltodict
except ImportError as e:
    print('Python module "xmltodict" is not installed.')
    sys.exit(STATE_UNKNOWN)

import lib.base
import lib.db_sqlite
import lib.url

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020070801'

DESCRIPTION = 'Returns the current system-wide Memory utilization as a percentage from QNAP Appliances running QTS via API. Warns only if the overall Memory usage is above a certain threshold within the last n checks (default: 5). The authentication is done via a single API token (Token-based authentication), not via Session-based authentication, which is stated as "legacy".'

DEFAULT_WARN = 80      # %
DEFAULT_CRIT = 90      # %
DEFAULT_COUNT = 5       # measurements; if check runs once per minute, this is a 5 minute interval
DEFAULT_INSECURE = False
DEFAULT_NO_PROXY = False
DEFAULT_TIMEOUT = 3
DEFAULT_USERNAME = 'admin'


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '--count',
        help='Number of times the value has to be above the given thresholds. Default: %(default)s',
        dest='COUNT',
        type=int,
        default=DEFAULT_COUNT,
        )

    parser.add_argument(
        '-c',
        '--critical',
        help='Set the critical threshold Memory Usage Percentage. Default: %(default)s',
        dest='CRIT',
        type=int,
        default=DEFAULT_CRIT,
        )

    parser.add_argument(
        '--url',
        help='QTS-based Appliance URL, for example https://192.168.1.1:8080.',
        dest='URL',
        required=True,
        )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
        )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
        )

    parser.add_argument(
        '--username',
        help='QTS User. Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
        )

    parser.add_argument(
        '--password',
        help='QTS Password.',
        dest='PASSWORD',
        required=True,
        )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
        )

    parser.add_argument(
        '-w',
        '--warning',
        help='Set the warning threshold Memory Usage Percentage. Default: %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
        )

    return parser.parse_args()

def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # authenticate and get the authSid
    url = '{}/cgi-bin/authLogin.cgi'.format(args.URL)
    data = {
        'user': args.USERNAME,
        'pwd': base64.b64encode(args.PASSWORD.encode('utf-8')).decode('ascii'),
        }
    result = lib.base.coe(lib.url.fetch(url, data=data, insecure=args.INSECURE, no_proxy=args.NO_PROXY, timeout=args.TIMEOUT))
    data = xmltodict.parse(result)['QDocRoot']

    auth_passed = data['authPassed']
    if auth_passed is not None and len(auth_passed) == 1 and auth_passed == "0":
        print('Failed to authenticate.')
        sys.exit(STATE_UNKNOWN)
    authSid = data['authSid']

    # get the memory usage
    url = '{}/cgi-bin/management/manaRequest.cgi?subfunc=sysinfo&hd=no&multicpu=1&sid={}'.format(args.URL, authSid)
    result = lib.base.coe(lib.url.fetch(url, data=data, insecure=args.INSECURE, no_proxy=args.NO_PROXY, timeout=args.TIMEOUT))
    data = xmltodict.parse(result)['QDocRoot']

    total = float(data['func']['ownContent']['root']['total_memory']) * 1024 * 1024
    free = float(data['func']['ownContent']['root']['free_memory']) * 1024 * 1024
    used = total - free
    memory_usage = round(used / total * 100, 2)

    state = lib.base.get_state(memory_usage, args.WARN, args.CRIT, operator='gt')

    # build the message
    msg = '{}% - total: {}, used: {}, free: {}'.format(
        memory_usage,
        lib.base.bytes2human(total),
        lib.base.bytes2human(used),
        lib.base.bytes2human(free),
        )
    perfdata = lib.base.get_perfdata('memory-usage', memory_usage, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base.get_perfdata('total', total, 'B', None, None, 0, total)
    perfdata += lib.base.get_perfdata('used', used, 'B', None, None, 0, total)
    perfdata += lib.base.get_perfdata('free', free, 'B', None, None, 0, total)

    lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        sys.exit(STATE_UNKNOWN)
