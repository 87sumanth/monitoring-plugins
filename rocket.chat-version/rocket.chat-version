#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020031902'

DESCRIPTION = 'This plugin lets you track if server updates are available. Requires a user with strong password and "view-statistics" permission (only).'

DEFAULT_URL             = 'http://localhost:3000/api/v1'
DEFAULT_USERNAME        = 'rocket-stats'
DEFAULT_CACHE_EXPIRE    = 24 # hours


#====================
from lib.globals import *

from lib.base import continue_or_exit, now
from lib.cache import get_cache, set_cache
from lib.rc import rc_get_token, rc_get_stats
from lib.url import get_latest_version_from_github

import argparse
from traceback import print_exc


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('--always-ok',
        help = 'This switch means the check always returns the state OK.',
        dest = 'ALWAYS_OK',
        action = 'store_true',
        default = False,
        )

    parser.add_argument('--cache-expire',
        help = 'The amount of time after which the update check cache expires, in hours. Default: %(default)s',
        dest = 'CACHE_EXPIRE',
        type = int,
        default = DEFAULT_CACHE_EXPIRE,
        )

    parser.add_argument('-p', '--password',
        help='Rocket.Chat API password.',
        dest='PASSWORD',
        required=True,
        )

    parser.add_argument('--url',
        help='Rocket.Chat API URL. Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
        )

    parser.add_argument('--username',
        help='Rocket.Chat API username. Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
        required=True,
        )

    return parser.parse_args()


def rc_get_latest_version(expire):
    # get version online, but first from cache
    latest_version = get_cache('rocket.chat-version')
    if latest_version:
        return (True, latest_version)

    # nothing found in cache, get the latest version from github
    success, latest_version = get_latest_version_from_github('RocketChat', 'Rocket.Chat')
    if not success:
        return (success, latest_version)
    
    set_cache('rocket.chat-version', latest_version, now() + expire)
    return (True, latest_version)


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # fetch the data
    credentials = continue_or_exit(rc_get_token(parsed.URL, parsed.USERNAME, parsed.PASSWORD))
    authToken, userId = credentials.split(':')
    result = continue_or_exit(rc_get_stats(parsed.URL, authToken, userId))

    if result.get('statistics', None):
        # version < 3.0.0
        installed_version = result['statistics']['version']
    else:
        # version >= 3.0.0
        installed_version = result['version']

    latest_version = continue_or_exit(rc_get_latest_version(parsed.CACHE_EXPIRE*60*60))

    if installed_version >= latest_version:
        print('Rocket.Chat v{} is up to date'.format(installed_version))
        exit(STATE_OK)
    else:
        print('Rocket.Chat v{} is available (installed: v{})'.format(latest_version, installed_version))
        if parsed.ALWAYS_OK:
            exit(STATE_OK)
        else:
            exit(STATE_WARN)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
