#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019111901'

DESCRIPTION = 'Checks additional info about docker containers.'

command_installed = 'command -v docker'
command_info = 'docker info'

# for testing
# command_installed = 'true'
# command_info = 'cat examples/EXAMPLE02'

DEFAULT_DATA_SPACE_WARN = 90.0
DEFAULT_DATA_SPACE_CRIT = 95.0
DEFAULT_METADATA_SPACE_WARN = 90.0
DEFAULT_METADATA_SPACE_CRIT = 95.0


devicemapper_storage_driver_warning = 'the devicemapper storage-driver is deprecated, and will be removed in a future release'

#====================

import argparse

from lib.globals import *
from lib.utils import execute_command
from lib.output import unpack_perfdata, state_to_string
from lib.parse_arguments import csv_arg
from lib.parse_input import evaluate_greater, evaluate_smaller, mltext2array, str2bytes

def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('--w_data_space_used_percentage',
        help = 'Set the warning threshold for the the data space used (percentage). Default: %(default)s',
        dest = 'DATA_SPACE_WARN',
        type = float,
        default = DEFAULT_DATA_SPACE_WARN,
        )

    parser.add_argument('--c_data_space_used_percentage',
        help = 'Set the critical threshold for the the data space used (percentage). Default: %(default)s',
        dest = 'DATA_SPACE_CRIT',
        type = float,
        default = DEFAULT_DATA_SPACE_CRIT,
        )

    parser.add_argument('--w_metadata_space_used_percentage',
        help = 'Set the warning threshold for the the metadata space used (percentage). Default: %(default)s',
        dest = 'METADATA_SPACE_WARN',
        type = float,
        default = DEFAULT_METADATA_SPACE_WARN,
        )

    parser.add_argument('--c_metadata_space_used_percentage',
        help = 'Set the critical threshold for the the metadata space used (percentage). Default: %(default)s',
        dest = 'METADATA_SPACE_CRIT',
        type = float,
        default = DEFAULT_METADATA_SPACE_CRIT,
        )

    parser.add_argument('--ignore-devicemapper-storage-driver',
        help = 'Ignore "the devicemapper storage-driver is deprecated" warning.',
        dest = 'IGNORE_DEVICEMAPPER_STORAGE_DRIVER',
        action = 'store_true',
        )

    return parser.parse_args()


def main():
    try:
        parsed = parse_args()
    except:
        exit(STATE_UNKNOWN)

    # check if shell command is available
    stdout, stderr, retc = execute_command(command_installed)
    if (retc != 0):
        print('"docker" is missing.')
        exit(STATE_UNKNOWN)

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(command_info, shell=True)
    if (retc != 0): # stderr is ok, will contain ERR and WARNING
        print('Bash command `{}` failed.'.format(command_info))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)

    data_space_used = None
    data_space_total = None
    metadata_space_used = None
    metadata_space_total = None
    info_warnings = ''
    info_errors = ''
    overall_state = STATE_OK
    msg = ''
    msg_addendum = '\n'
    perfdata = ''

    for line in stdout.splitlines():
        line = line.strip()
        if line.startswith('Data Space Used: '):
            data_space_used = line.split(': ')[1]

        if line.startswith('Data Space Total: '):
            data_space_total = line.split(': ')[1]

        if line.startswith('Metadata Space Used: '):
            metadata_space_used = line.split(': ')[1]

        if line.startswith('Metadata Space Total: '):
            metadata_space_total = line.split(': ')[1]

    for line in stderr.splitlines():
        if 'WARNING' in line:
            info_warnings += '\n* ' + line.lstrip('WARNING: ')

        if 'ERR' in line:
            info_errors += '\n* ' + line.lstrip('ERROR: ')

    if data_space_used and data_space_total:
        data_space_percentage = float(str2bytes(data_space_used)) / float(str2bytes(data_space_total)) * 100
        data_space_state = evaluate_greater(data_space_percentage, parsed.DATA_SPACE_WARN, parsed.DATA_SPACE_CRIT)
        overall_state = get_greater_state(overall_state, data_space_state)
        perfdata += unpack_perfdata('data_space', data_space_percentage, '%', parsed.DATA_SPACE_WARN, parsed.DATA_SPACE_CRIT, 0, 100)
        msg_addendum += '\n* Data Space Usage: {:.2f}% {}'.format(data_space_percentage, state_to_string(data_space_state))

    if metadata_space_used and metadata_space_total:
        metadata_space_percentage = float(str2bytes(metadata_space_used)) / float(str2bytes(metadata_space_total)) * 100
        metadata_space_state = evaluate_greater(metadata_space_percentage, parsed.METADATA_SPACE_WARN, parsed.METADATA_SPACE_CRIT)
        overall_state = get_greater_state(overall_state, metadata_space_state)
        perfdata += unpack_perfdata('metadata_space', metadata_space_percentage, '%', parsed.METADATA_SPACE_WARN, parsed.METADATA_SPACE_CRIT, 0, 100)
        msg_addendum += '\n* Metadata Space Usage: {:.2f}% {}'.format(metadata_space_percentage, state_to_string(metadata_space_state))

    if info_warnings:
        if not (parsed.IGNORE_DEVICEMAPPER_STORAGE_DRIVER and devicemapper_storage_driver_warning in line):
            overall_state = get_greater_state(overall_state, STATE_WARN)
        msg_addendum += '\n\nWARNINGs from `docker info`:' + info_warnings

    if info_errors:
        overall_state = get_greater_state(overall_state, STATE_WARN)
        msg_addendum +=  '\n\nERRORs from `docker info`:' + info_errors

    if overall_state == STATE_OK:
        msg = 'Everything is ok.' + msg
    else:
        msg = 'One or more errors.' + msg

    print(msg + msg_addendum + '|' + perfdata.strip())
    exit(overall_state)

if __name__ == '__main__':
    main()
