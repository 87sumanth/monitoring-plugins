#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html


__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019122301'

DESCRIPTION = 'Displays amount of free and used swap space in the system, checks against used swap in percent.'

DEFAULT_WARN  = 70  # %
DEFAULT_CRIT  = 90  # %

#====================

import argparse
import psutil

from lib.globals import *
from lib.output import bytes2human, unpack_perfdata


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-c', '--critical', help='Set the critical threshold for swap usage (in percent). Default: %(default)s',
                      default=DEFAULT_CRIT, type=int, dest='CRIT')
    parser.add_argument('-V', '--version', action='version', version='%(prog)s: v{} by {}'.format(__version__, __author__))
    parser.add_argument('-w', '--warning', help='Set the warning threshold for swap usage (in percent). Default: %(default)s',
                      default=DEFAULT_WARN, type=int, dest='WARN')

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    CRIT = parsed.CRIT
    WARN = parsed.WARN

    swap = psutil.swap_memory()
    swap_usage_percent = swap.percent

    msg = 'Swap: {}% - total: {}, used: {}, free: {}\n'.format(
        swap_usage_percent,
        bytes2human(swap.total),
        bytes2human(swap.used),
        bytes2human(swap.free),
    )
    msg += 'swapped in: {}, swapped out: {} (both cumulative)'.format(
        bytes2human(getattr(swap, 'sin', 0)),
        bytes2human(getattr(swap, 'sout', 0)),
    )

    # 'label'=value[UOM];[warn];[crit];[min];[max]
    perfdata =  unpack_perfdata('usage_percent', swap_usage_percent, '%', WARN, CRIT, 0, 100)
    perfdata += unpack_perfdata('total', swap.total, 'B', None, None, 0, swap.total)
    perfdata += unpack_perfdata('used', swap.used, 'B', None, None, 0, swap.total)
    perfdata += unpack_perfdata('free', swap.free, 'B', None, None, 0, swap.total)
    perfdata += unpack_perfdata('sin', getattr(swap, 'sin', 0), 'B', None, None, 0, None)
    perfdata += unpack_perfdata('sout', getattr(swap, 'sout', 0), 'B', None, None, 0, None)

    print(msg + '|' + perfdata.strip())


    # calculating the final check state
    if swap_usage_percent >= CRIT:
        exit(STATE_CRIT)
    if swap_usage_percent >= WARN:
        exit(STATE_WARN)
    exit(STATE_OK)


if __name__ == '__main__':
    main()

