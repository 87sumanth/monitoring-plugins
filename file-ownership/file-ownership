#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md


__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020032501'

DESCRIPTION = 'Checks the ownership (owner and group, both have to be names) of a list of files.'

command = 'stat {path}'

DEFAULT_FILES = '''apache:apache,/usr/share/httpd/.cache
apache:apache,/usr/share/httpd/.cache/dconf/
apache:apache,/usr/share/httpd/.config/
apache:apache,/usr/share/httpd/.config/libreoffice/4/user/config/soffice.cfg/modules/StartModule/menubar/
apache:apache,/usr/share/httpd/.config/libreoffice/4/user/config/soffice.cfg/modules/StartModule/popupmenu/
apache:apache,/usr/share/httpd/.config/libreoffice/4/user/config/soffice.cfg/modules/StartModule/statusbar/
apache:apache,/usr/share/httpd/.config/libreoffice/4/user/config/soffice.cfg/modules/StartModule/toolbar/
apache:apache,/usr/share/httpd/.config/libreoffice/4/user/extensions/
apache:apache,/usr/share/httpd/.config/libreoffice/4/user/psprint/
graylog:graylog,/etc/graylog/certs
hnet:hnet,/var/hnet
ldap:ldap,/var/run/openldap
lool:lool,/etc/loolwsd/loolwsd.xml
named:named,/var/named/*.zone
root:named,/etc/named.conf
unbound:unbound,/var/lib/unbound/root.key
vdsm:kvm,/home/ovirt'''

UOM = None
MIN = 0
MAX = None

#====================
import argparse
from traceback import print_exc
import os
import re

from lib.globals import *
from lib.utils import execute_command


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('--filename',
        help = 'A list of filenames to be checked, in the format "owner:group,path;owner:group,path;...".',
        dest = 'FILES',
        type = str,
        default = '',
        )

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    return parser.parse_args()


def main():    
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    FILES = DEFAULT_FILES + '\n' + parsed.FILES.replace(';', '\n')

    state = STATE_OK
    msg = ''
    cnt = 0

    for line in FILES.splitlines():
        try:
            line = line.split(',')
            path = line[1]
        except:
            print('--filename parameter seems to be in the wrong format.')
            exit(STATE_UNKNOWN)

        if os.path.exists(path):
            try:
                owner, group = line[0].split(':')
            except:
                print('--filename parameter seems to be in the wrong format.')
                exit(STATE_UNKNOWN)

            formatted_command = command.format(path=path)
            # execute the shell command and return its result and exit code
            stdout, stderr, retc = execute_command(formatted_command)
            if (stderr or retc != 0):
                print('Bash command `{}` failed.'.format(formatted_command))
                print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
                exit(STATE_UNKNOWN)

            for line in stdout.splitlines():
                if line.startswith('Access: ('):
                    # Access: (0644/-rw-r--r--)  Uid: (  982/ unbound)   Gid: (  981/ unbound)
                    # Access: (0600/-rw-------)  Uid: ( 1000/markus.frei)   Gid: ( 1000/markus.frei)
                    current_owner = re.search(r'Uid: .*?\/(.*)\).*Gid:', line).group(1).strip()
                    current_group = re.search(r'Gid: .*\/(.*)\)', line).group(1).strip()

                    if owner != current_owner or group != current_group:
                        state = STATE_WARN
                        msg = '* {path} is [{current_owner}:{current_group}], fix using "chown {owner}:{group} {path}" (WARN)\n'.format(path=path, current_owner=current_owner, current_group=current_group, owner=owner, group=group) + msg # append to start of msg
                    else:
                        msg += '* {path} is [{current_owner}:{current_group}]\n'.format(path=path, current_owner=current_owner, current_group=current_group)

                    cnt += 1

    if cnt == 0:
        print('No files checked.\n')
        exit(state)

    if state == STATE_OK:
        print('Owners and groups are correct.\n' + 'Checked: \n' + msg.strip())
        exit(state)
    else:
        print('One or more problems with owners or groups.\n' + 'Checked: \n' + msg.strip())
        exit(state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
