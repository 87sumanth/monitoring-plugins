#! /usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019111501'

DESCRIPTION = 'Checks network IO.'

command = 'ip --statistics link'

RX_RATE_DEFAULT_WARN = 8000000000 # 8 Gbps
RX_RATE_DEFAULT_CRIT = 9000000000 # 9 Gbps

TX_RATE_DEFAULT_WARN = 8000000000 # 8 Gbps
TX_RATE_DEFAULT_CRIT = 9000000000 # 9 Gbps

RX_ERR_DEFAULT_WARN = 1
RX_ERR_DEFAULT_CRIT = None

RX_DRP_DEFAULT_WARN = 1
RX_DRP_DEFAULT_CRIT = None

RX_OVRUN_DEFAULT_WARN = 1
RX_OVRUN_DEFAULT_CRIT = None

TX_ERR_DEFAULT_WARN = 1
TX_ERR_DEFAULT_CRIT = None

TX_DRP_DEFAULT_WARN = 1
TX_DRP_DEFAULT_CRIT = None

TX_COLL_DEFAULT_WARN = 1
TX_COLL_DEFAULT_CRIT = None

DEFAULT_IGNORE = []

#====================
import argparse
import pickle
import datetime
import tempfile

from lib3.globals import *
from lib3.utils import execute_command
from lib3.output import unpack_perfdata, unit_suffix_format
from lib3.parse_arguments import csv
from lib3.parse_input import evaluate_greater


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version', action='version', version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__))

    parser.add_argument('-w', '--warning', help='Set the warning threshold in bps for the RX and TX rate, in the format "1000,2000". Default: %(default)s',
                      default=[RX_RATE_DEFAULT_WARN,TX_RATE_DEFAULT_WARN], type=csv, dest='WARN')
    parser.add_argument('-c', '--critical', help='Set the critical threshold in bps for the RX and TX rate, in the format "1000,2000". Default: %(default)s',
                      default=[RX_RATE_DEFAULT_CRIT,TX_RATE_DEFAULT_CRIT], type=csv, dest='CRIT')
    parser.add_argument('-i', '--ignore', help='Ignore certain interface names, in the format "lo,eno1". Default: %(default)s',
                      default=DEFAULT_IGNORE, type=csv, dest='IGNORE')
    return parser.parse_args()


def main():    
    try:
        parsed = parse_args()
    except:
        print('Argument parsing failed')
        # todo: replace this with a guarded main method
        exit(STATE_UNKNOWN)

    RX_RATE_WARN = int(parsed.WARN[0]) if parsed.WARN[0] else None
    TX_RATE_WARN = int(parsed.WARN[1]) if parsed.WARN[1] else None
    RX_RATE_CRIT = int(parsed.CRIT[0]) if parsed.CRIT[0] else None
    TX_RATE_CRIT = int(parsed.CRIT[1]) if parsed.CRIT[1] else None
    IGNORE = parsed.IGNORE if parsed.IGNORE else []

    # get current data
    sp = execute_command(command)
    result, err = sp.communicate()
    result_rc = sp.returncode
    if (err or result_rc != 0):
        print(str(result) + str(err))
        # todo: consistent error message. maybe using a custom exception in lib?
        exit(STATE_UNKNOWN)

    current_data = {}
    rx_labels = ['bytes', 'packets', 'errors', 'dropped', 'overrun', 'mcast']
    tx_labels = ['bytes', 'packets', 'errors', 'dropped', 'carrier', 'collsns']

    # parse result
    i = None
    for index, line in enumerate(result.splitlines()):
        if line[0].isdigit():
            ifname = line.split(': ')[1]
            if ifname not in IGNORE:
                i = index
                current_data[ifname] = {'timestamp': datetime.datetime.today(), 'mtu': line.split()[4]}

        if i is not None and index == i + 3:
            current_data[ifname]['RX'] = {}
            items = line.split()
            for item, label in zip(items, rx_labels):
                current_data[ifname]['RX'][label] = int(item)

        if i is not None and index == i + 5:
            current_data[ifname]['TX'] = {}
            items = line.split()
            for item, label in zip(items, tx_labels):
                current_data[ifname]['TX'][label] = int(item)

    
    # try to get the latest data
    try:
        latest_data = pickle.load(open('{}/network-io-dump'.format(tempfile.gettempdir()), 'rb'))
    except:
        print('Waiting for the latest data...')
        exit(STATE_OK)
    finally:
        # save the new data regardless
        pickle.dump(current_data, open('{}/network-io-dump'.format(tempfile.gettempdir()), 'wb+'))

    global_state = STATE_OK

    perfdata = ''

    table = '''
‌‌                              ║ RX                            ║ TX
Iface                    MTU  ║ Rate       Err   Drp    Ovrun ║ Rate       Err   Drp    Coll
══════════════════════════════╬═══════════════════════════════╬══════════════════════════════'''

    highest_value = 0
    highest_ifname = ''
    highest_rx_rate_data = ''
    highest_tx_rate_data = ''

    for ifname, values in sorted(current_data.items()):
        try: # needed to prevent key lookup errors in the latest_date dict when new interfaces appear
            time_delta  = (current_data[ifname]['timestamp'] - latest_data[ifname]['timestamp']).total_seconds();

            rx_packets_data = Data('{}_RX_Packets'.format(ifname), current_data[ifname]['RX']['bytes'], None, None)
            perfdata += unpack_perfdata((rx_packets_data.label, rx_packets_data.value, 'c', rx_packets_data.warn, rx_packets_data.crit, 0, None))

            rx_rate = (current_data[ifname]['RX']['bytes'] - latest_data[ifname]['RX']['bytes']) / time_delta * 8; # conversion from bytes/s to bits/s
            if rx_rate < 0:
                rx_rate = 0 # handle negative numbers due to eg reboots
            rx_rate_data = Data('{}_RX_Rate'.format(ifname), rx_rate, RX_RATE_WARN, RX_RATE_CRIT)
            rx_rate_data.set_state(evaluate_greater((rx_rate_data.value, rx_rate_data.warn, rx_rate_data.crit)))

            rx_error_data = Data('{}_RX_Err'.format(ifname), values['RX']['errors'], RX_ERR_DEFAULT_WARN, RX_ERR_DEFAULT_CRIT)
            rx_error_data.set_state(evaluate_greater((rx_error_data.value, rx_error_data.warn, rx_error_data.crit)))
            perfdata += unpack_perfdata((rx_error_data.label, rx_error_data.value, None, rx_error_data.warn, rx_error_data.crit, 0, None))

            rx_dropped_data = Data('{}_RX_Drp'.format(ifname), values['RX']['dropped'], RX_DRP_DEFAULT_WARN, RX_DRP_DEFAULT_CRIT)
            perfdata += unpack_perfdata((rx_dropped_data.label, rx_dropped_data.value, None, rx_dropped_data.warn, rx_dropped_data.crit, 0, None))

            rx_overrun_data = Data('{}_RX_Ovrun'.format(ifname), values['RX']['overrun'], RX_OVRUN_DEFAULT_WARN, RX_OVRUN_DEFAULT_CRIT)
            rx_overrun_data.set_state(evaluate_greater((rx_overrun_data.value, rx_overrun_data.warn, rx_overrun_data.crit)))
            perfdata += unpack_perfdata((rx_overrun_data.label, rx_overrun_data.value, None, rx_overrun_data.warn, rx_overrun_data.crit, 0, None))


            tx_packets_data = Data('{}_TX_Packets'.format(ifname), current_data[ifname]['TX']['bytes'], None, None)
            perfdata += unpack_perfdata((tx_packets_data.label, tx_packets_data.value, 'c', tx_packets_data.warn, tx_packets_data.crit, 0, None))

            tx_rate = (current_data[ifname]['TX']['bytes'] - latest_data[ifname]['TX']['bytes']) / time_delta * 8; # conversion from bytes/s to bits/s
            if tx_rate < 0:
                tx_rate = 0 # handle negative numbers due to eg reboots
            tx_rate_data = Data('{}_TX_Rate'.format(ifname), tx_rate, TX_RATE_WARN, TX_RATE_CRIT)
            tx_rate_data.set_state(evaluate_greater((tx_rate_data.value, tx_rate_data.warn, tx_rate_data.crit)))

            tx_error_data = Data('{}_TX_Err'.format(ifname), values['TX']['errors'], TX_ERR_DEFAULT_WARN, TX_ERR_DEFAULT_CRIT)
            tx_error_data.set_state(evaluate_greater((tx_error_data.value, tx_error_data.warn, tx_error_data.crit)))
            perfdata += unpack_perfdata((tx_error_data.label, tx_error_data.value, None, tx_error_data.warn, tx_error_data.crit, 0, None))

            tx_dropped_data = Data('{}_TX_Drp'.format(ifname), values['TX']['dropped'], TX_DRP_DEFAULT_WARN, TX_DRP_DEFAULT_CRIT)
            perfdata += unpack_perfdata((tx_dropped_data.label, tx_dropped_data.value, None, tx_dropped_data.warn, tx_dropped_data.crit, 0, None))

            tx_collsns_data = Data('{}_TX_Coll'.format(ifname), values['TX']['collsns'], TX_COLL_DEFAULT_WARN, TX_COLL_DEFAULT_CRIT)
            tx_collsns_data.set_state(evaluate_greater((tx_collsns_data.value, tx_collsns_data.warn, tx_collsns_data.crit)))
            perfdata += unpack_perfdata((tx_collsns_data.label, tx_collsns_data.value, None, tx_collsns_data.warn, tx_collsns_data.crit, 0, None))

            if ifname != 'lo':
                if rx_rate >= highest_value:
                    highest_value = rx_rate
                    highest_ifname = ifname
                    highest_rx_rate_data = rx_rate_data
                    highest_tx_rate_data = tx_rate_data

                if tx_rate >= highest_value:
                    highest_value = tx_rate
                    highest_ifname = ifname
                    highest_rx_rate_data = rx_rate_data
                    highest_tx_rate_data = tx_rate_data


            state_checklist = [rx_rate_data.state, rx_error_data.state, rx_overrun_data.state, tx_rate_data.state, tx_error_data.state, tx_collsns_data.state]

            state = ''
            if STATE_CRIT in state_checklist:
                state = ' (CRIT)'
                global_state = STATE_CRIT
            elif STATE_WARN in state_checklist:
                state = ' (WARN)'
                if global_state != STATE_CRIT:
                    global_state = STATE_WARN

            
            table += '\n{:25}{:5}║{:12}{:6}{:7}{:6}║{:12}{:6}{:7}{}'.format(ifname + state, values['mtu'], str(unit_suffix_format(rx_rate, 'bps')), str(values['RX']['errors']), str(values['RX']['dropped']), str(values['RX']['overrun']), str(unit_suffix_format(tx_rate, 'bps')), str(values['TX']['errors']), str(values['TX']['dropped']), str(values['TX']['collsns']))
        except:
            pass # needed to prevent empty if statement

    if global_state == STATE_OK:
        msg = 'Everything is ok. {}: {}/{} (RX/TX)'.format(highest_ifname, unit_suffix_format(highest_rx_rate_data.value, 'bps'), unit_suffix_format(highest_tx_rate_data.value, 'bps'))
    else:
        msg = 'One or more errors. {}: {}/{} (RX/TX)'.format(highest_ifname, unit_suffix_format(highest_rx_rate_data.value, 'bps'), unit_suffix_format(highest_tx_rate_data.value, 'bps'))

    print(msg.strip() + '\n' + table + '|' + perfdata.strip())

    exit(global_state)

main()
