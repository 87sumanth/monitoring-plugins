#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020020501'

DESCRIPTION = 'Checks the number of currently running processes and warns on process counts or zombie process states.'

bash_command = 'ps -eo stat:10,pid:10,comm:30,lstart --no-headers'

DEFAULT_CRIT = None
DEFAULT_WARN = None


#====================
from lib.globals import *

import argparse
import datetime

from traceback import print_exc
from lib.utils import execute_command
from lib.parse_input import evaluate_greater
from lib.output import unpack_perfdata


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold for the number of processes. Default: %(default)s',
        dest = 'WARN',
        type = int,
        default = DEFAULT_WARN,
        )
    parser.add_argument('-c', '--critical', 
        help = 'Set the critical threshold for the number of processes. Default: %(default)s',
        default = DEFAULT_CRIT, 
        type = int, 
        dest = 'CRIT'
        )
    
    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(bash_command)
    if (stderr or retc != 0):
        print('Bash command `{}` failed.'.format(bash_command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)

    stdout = stdout.strip().split('\n')

    # the counter for the different process states
    proc_states = {
        'D': 0,
        'R': 0,
        'S': 0,
        'T': 0,
        'W': 0,
        'X': 0,
        'Z': 0,
    }

    state = STATE_OK

    uninterruptible, running, zombies = '', '', ''
    now = datetime.datetime.now()
    for proc in stdout:
        proc_state = proc[0:1].strip()
        proc_pid   = proc[11:21].strip()
        proc_name  = proc[22:53].strip()
        proc_start = datetime.datetime.strptime(proc[53:].strip(), '%a %b %d %H:%M:%S %Y')     # Thu Feb  6 20:39:50 2020

        if proc_state == 'D':                                   # uninterruptible
            proc_states['D'] += 1
            uninterruptible += proc_name + ', '
        proc_states['S'] += 1 if proc_state == 'I' else 0       # idle counts like sleeping
        if proc_state == 'R':                                   # running
            proc_states['R'] += 1
            running += proc_name + ', '
        proc_states['S'] += 1 if proc_state == 'S' else 0       # sleeping
        proc_states['T'] += 1 if proc_state == 'T' else 0       # stopped
        proc_states['T'] += 1 if proc_state == 't' else 0       # stopped t counts as stopped T
        proc_states['W'] += 1 if proc_state == 'W' else 0       # paging
        proc_states['X'] += 1 if proc_state == 'X' else 0       # dead
        if proc_state == 'Z':                                   # zombies
            proc_states['Z'] += 1
            zombies += proc_name.replace(' <defunct>', '') + ', '
            # https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/issues/1
            delta = now - proc_start
            if delta.total_seconds() > 24*60*60:
                state = STATE_WARN


    # sort by highest value
    stats = sorted(proc_states.items(), key=lambda x: x[1], reverse=True)

    # count the procs
    proc_cnt = len(stdout)

    msg = '{} tasks, '.format(proc_cnt)
    for proc_state, proc_state_cnt in stats:
        if proc_state_cnt > 0:
            msg += '{} dead, '.format(proc_state_cnt) if proc_state == 'X' else '' 
            msg += '{} paging, '.format(proc_state_cnt) if proc_state == 'W' else '' 
            msg += '{} running ({}), '.format(proc_state_cnt, running[:-2]) if proc_state == 'R' else '' 
            msg += '{} sleeping, '.format(proc_state_cnt) if proc_state == 'S' else '' 
            msg += '{} stopped, '.format(proc_state_cnt) if proc_state == 'T' else '' 
            msg += '{} uninterruptible ({}), '.format(proc_state_cnt, uninterruptible[:-2]) if proc_state == 'D' else '' 
            if proc_state == 'Z':
                if state == STATE_WARN:
                    msg += 'WARN: '
                if proc_state_cnt == 1:
                    msg += '{} zombie ({}), '.format(proc_state_cnt, zombies[:-2])
                else:
                    msg += '{} zombies ({}), '.format(proc_state_cnt, zombies[:-2])


    state = get_greater_state(state, evaluate_greater(proc_cnt, parsed.WARN, parsed.CRIT))

    perfdata = ''
    perfdata += unpack_perfdata('procs', proc_cnt, None, parsed.WARN, parsed.CRIT, 0, None)

    perfdata += unpack_perfdata('procs_sleeping', proc_states['S'], None, None, None, 0, None)
    perfdata += unpack_perfdata('procs_running', proc_states['R'], None, None, None, 0, None)
    perfdata += unpack_perfdata('procs_uninterruptible', proc_states['D'], None, None, None, 0, None)
    perfdata += unpack_perfdata('procs_zombies', proc_states['Z'], None, 1, None, 0, None)
    perfdata += unpack_perfdata('procs_stopped', proc_states['T'], None, None, None, 0, None)
    perfdata += unpack_perfdata('procs_paging', proc_states['W'], None, None, None, 0, None)
    perfdata += unpack_perfdata('procs_dead', proc_states['X'], None, None, None, 0, None)

    print(msg[:-2] + '|' + perfdata.strip())
    exit(state)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
