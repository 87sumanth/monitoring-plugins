#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

# Plans/Todos:
# * count procs per user and compare value against `ulimit -u` (default: 80%, 90%)

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019111401'

DESCRIPTION = 'Checks the number of currently running processes.'

command = '/usr/bin/ls /proc | /usr/bin/grep ^[1-9] --count'

DEFAULT_CRIT = None
DEFAULT_WARN = None

UOM = None
MIN = 0
MAX = None


#====================
import argparse

from lib.globals import *
from lib.execute_command import execute_command
from lib.parse_input import evaluate_greater
from lib.output import unpack_perfdata

def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version', action='version', version='{0}: v{1} by {2}' . format('%(prog)s', __version__, __author__))

    parser.add_argument('-w', '--warning',
        help='Set the warning threshold for the number of processes. Default: %(default)s',
        dest='WARN',
        type=int,
        default=DEFAULT_WARN,
        )
    parser.add_argument('-c', '--critical', 
        help = 'Set the critical threshold for the number of processes. Default: %(default)s',
        default = DEFAULT_CRIT, 
        type = int, 
        dest = 'CRIT'
        )
    
    return parser.parse_args()


def main():
    parsed = parse_args()
    try:
        parsed = parse_args()
    except:
        exit(STATE_UNKNOWN)

    WARN = parsed.WARN
    CRIT = parsed.CRIT

    result, err = execute_command(command).communicate()
    if (err):
        print(err)
        exit(STATE_UNKNOWN)

    result = int(result.strip())
    state = evaluate_greater((result, WARN, CRIT))
    msg = str(result) + ' processes'
    perfdata = unpack_perfdata(('procs', str(result), UOM, WARN, CRIT, MIN, MAX))
    print(msg.strip() + '|' + perfdata.strip())
    exit(state)

main()
