#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html



__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020012801'

DESCRIPTION = 'Checks the number of currently running processes.'

bash_command = '/usr/bin/ls /proc | /usr/bin/grep ^[1-9] --count'

DEFAULT_CRIT = None
DEFAULT_WARN = None

#====================
import argparse

from lib.globals import *
from lib.utils import execute_command
from lib.parse_input import evaluate_greater
from lib.output import unpack_perfdata

def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold for the number of processes. Default: %(default)s',
        dest = 'WARN',
        type = int,
        default = DEFAULT_WARN,
        )
    parser.add_argument('-c', '--critical', 
        help = 'Set the critical threshold for the number of processes. Default: %(default)s',
        default = DEFAULT_CRIT, 
        type = int, 
        dest = 'CRIT'
        )
    
    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    WARN = parsed.WARN
    CRIT = parsed.CRIT

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(bash_command)
    if (stderr or retc != 0):
        print('Bash command `{}` failed.'.format(bash_command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)

    result = int(stdout.strip())
    state = evaluate_greater(result, WARN, CRIT)
    msg = str(result) + ' processes'
    perfdata = unpack_perfdata('procs', result, None, WARN, CRIT, 0, None)
    print(msg.strip() + '|' + perfdata.strip())
    exit(state)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(e)
        exit(STATE_UNKNOWN)
