#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020040801'

DESCRIPTION = 'Sends ICMP ECHO_REQUEST to network hosts using the built-in `ping` command.'

cmd_template = 'ping -c {count} -i {interval} -w {deadline} -q {hostname}'

DEFAULT_COUNT = 5           # icmp packets
DEFAULT_INTERVAL = 0.2      # seconds
DEFAULT_DEADLINE = 5        # seconds
DEFAULT_HOSTNAME = '127.0.0.1'


#====================
from lib.globals import *

import lib.base

import argparse
import os
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('--count', 
        help = 'Stop after sending count ECHO_REQUEST packets. Default: %(default)s',
        default = DEFAULT_COUNT, 
        dest = 'COUNT',
        type = int,
        )

    parser.add_argument('-H', '--hostname', 
        help = 'The ping destination. Default: %(default)s',
        dest = 'HOSTNAME',
        default = DEFAULT_HOSTNAME,
        )

    parser.add_argument('--interval', 
        help = 'Wait interval seconds between sending each packet. Default: %(default)s',
        default = DEFAULT_INTERVAL, 
        dest = 'INTERVAL',
        type = float,
        )

    parser.add_argument('-t', '--timeout', 
        help = 'Specify a timeout, in seconds, before ping exits regardless of how many packets have been sent or received. Default: %(default)s',
        default = DEFAULT_DEADLINE, 
        dest = 'DEADLINE',
        type = float,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    cmd = cmd_template.format(count=args.COUNT, 
        interval=args.INTERVAL, 
        deadline=args.DEADLINE, 
        hostname=args.HOSTNAME
        )

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = lib.base.shell_exec(cmd)
    if (stderr or retc == 2):
        lib.base.oao(stderr, STATE_UNKNOWN)

    result = stdout.splitlines()
    if not result[0] or not result[3]:
        lib.base.oao('Unexpected output from ping.', STATE_UNKNOWN)

    # throwing CRIT if ping exits with 1 (CRIT instead of WARN beacuse of the 
    # fact that this check will mainly be used for checking host-liveliness [UP/DOWN]).
    # `ping` returns 1 when: !nreceived || (deadline && nreceived < npackets));
    state = STATE_CRIT if retc else STATE_OK

    # we have the state, lets build the message and create some perfdata;
    # but be nice and efficient: no regex here, simple string parsing to be as fast as possible

    # line1: "PING %hostname (%ip) [from %sinip %device: ]%datalen(%datalen+28)
    line1 = result[0]
    line1 = line1[0:line1.find(')') + 1]

    # line4: "%ntransmitted packets transmitted, %nreceived received[, +%nrepeats duplicates][, +%nchecksum corrupted][, +%nerrors errors][, %packetloss% packet loss, time %timems]"
    line4 = result[3]
    
    pos2 = line4.find(' packets transmitted,')
    pos1 = 0
    transmitted = line4[pos1:pos2] if pos2 != -1 else 0

    pos2 = line4.find(' received,')
    pos1 = line4.find(', ', pos2 - 6) + 2
    received = line4[pos1:pos2] if pos2 != -1 else 0

    pos2 = line4.find(' duplicates,')
    pos1 = line4.find(', ', pos2 - 6) + 2
    duplicates = line4[pos1:pos2] if pos2 != -1 else 0

    pos2 = line4.find(' checksum corrupted,')
    pos1 = line4.find(', ', pos2 - 6) + 2
    checksum_corrupted = line4[pos1:pos2] if pos2 != -1 else 0

    pos2 = line4.find(' errors,')
    pos1 = line4.find(', ', pos2 - 6) + 2
    errors = line4[pos1:pos2].replace('+', '') if pos2 != -1 else 0

    pos2 = line4.find(' packet loss,') - 1
    pos1 = line4.find(', ', pos2 - 6) + 2
    packet_loss = int(line4[pos1:pos2]) if pos2 != -1 else 0

    pos1 = line4.find(', time ') + 7
    time = line4[pos1:-2] if pos1 != -1 else 0

    rtt_min, rtt_avg, rtt_max, rtt_mdev = 0, 0, 0, 0
    if result[4] and not result[4].startswith('pipe '):
        # host is reachable
        line5 = result[4]
        # line5: "rtt min/avg/max/mdev = %ld.%03ld/%lu.%03ld/%ld.%03ld/%ld.%03ld ms"
        pos1 = 23
        pos2 = line5.find('/', pos1)
        rtt_min = line5[pos1:pos2]
        pos1 = pos2 + 1
        pos2 = line5.find('/', pos1)
        rtt_avg = line5[pos1:pos2]
        pos1 = pos2 + 1
        pos2 = line5.find('/', pos1)
        rtt_max = line5[pos1:pos2]
        pos1 = pos2 + 1
        pos2 = line5.find(' ', pos1)
        rtt_mdev = line5[pos1:pos2]

    if state == STATE_OK:
        msg = ''
    else:
        msg = 'Destination Host Unreachable. '

    msg += line1 + ': '
    msg += '{} {} transmitted, '.format(transmitted, lib.base.pluralize('packet', transmitted))
    msg += '{} received, '.format(received)
    msg += '{} {}, '.format(duplicates, lib.base.pluralize('duplicate', duplicates)) if duplicates else ''
    msg += '{} {}, '.format(checksum_corrupted, 'checksum corrupted') if checksum_corrupted else ''
    msg += '{} {}, '.format(errors, lib.base.pluralize('error', errors)) if errors else ''
    msg += '{}% packet loss, '.format(packet_loss, lib.base.pluralize('packet', packet_loss)) if packet_loss else ''
    msg += 'time {}ms. '.format(time)

    msg += 'rtt min/avg/max/mdev = {}/{}/{}/{} ms'.format(rtt_min, rtt_avg, rtt_max, rtt_mdev)

    perfdata = ''
    perfdata += lib.base.get_perfdata('transmitted', transmitted, None, None, None, 0, None)
    perfdata += lib.base.get_perfdata('received', received, None, None, None, 0, None)
    perfdata += lib.base.get_perfdata('duplicates', duplicates, None, None, None, 0, None)
    perfdata += lib.base.get_perfdata('checksum_corrupted', checksum_corrupted, None, None, None, 0, None)
    perfdata += lib.base.get_perfdata('errors', errors, None, None, None, 0, None)
    perfdata += lib.base.get_perfdata('packet_loss', packet_loss, '%', None, None, 0, 100)
    perfdata += lib.base.get_perfdata('time', time, 'ms', None, None, 0, None)

    perfdata += lib.base.get_perfdata('rtt_min', rtt_min, 'ms', None, None, 0, None)
    perfdata += lib.base.get_perfdata('rtt_avg', rtt_avg, 'ms', None, None, 0, None)
    perfdata += lib.base.get_perfdata('rtt_max', rtt_max, 'ms', None, None, 0, None)
    perfdata += lib.base.get_perfdata('rtt_mdev', rtt_mdev, 'ms', None, None, 0, None)

    lib.base.oao(msg, state, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
