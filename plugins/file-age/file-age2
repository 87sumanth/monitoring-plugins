#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020050101'

DESCRIPTION = 'Checks the time of last data modification for a file or directory, in seconds.'

DEFAULT_WARN = 60*60*24*30      # sec
DEFAULT_CRIT = 60*60*24*365     # sec


#====================
from lib.globals2 import *

import lib.base2

import argparse
import os
from traceback import print_exc



def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument('-c', '--critical', 
        help='Set the critical age threshold in seconds. Default: >= %(default)ss (365d)',
        dest='CRIT',
        type=float,
        default=DEFAULT_CRIT,
        )

    parser.add_argument('--filename',
        help='File (or directory) name to check.',
        dest='FILE',
        required = True,
        )

    parser.add_argument('-w', '--warning',
        help='Set the warning age threshold in seconds. Default: >= %(default)ss (30d)',
        dest='WARN',
        type=float,
        default=DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # fetch the data
    try:
        st = os.stat(args.FILE)
    except:
        lib.base2.oao('Error reading file or directory "{}".'.format(args.FILE), STATE_UNKNOWN)

    age = (lib.base2.now() - st.st_mtime)

    msg = '{} is {} old.'.format(args.FILE, lib.base2.seconds2human(age))
    perfdata = lib.base2.get_perfdata('file_age_{}'.format(args.FILE), age, 's', args.WARN, args.CRIT, 0, None)
    state = STATE_OK
    if age >= args.CRIT:
        state = STATE_CRIT
    elif age >= args.WARN:
        state = STATE_WARN

    lib.base2.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
