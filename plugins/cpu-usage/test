#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

from lib.globals import *

import lib.base

import time
import os
import unittest

        
class TestCheck(unittest.TestCase):

    check = './cpu-usage'

    def test_if_check_runs_first_time_without_database(self):
        if os.path.isfile('/tmp/cpu-usage.db'):
            os.remove('/tmp/cpu-usage.db') 
        stdout, stderr, retc = lib.base.coe(lib.base.shell_exec(self.check))
        # 8.8% - user: 4.9%, system: 2.0%, iowait: 1.0%
        self.assertRegexpMatches(stdout, r'^\d+\.\d+%')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_second_time_without_params(self):
        stdout, stderr, retc = lib.base.coe(lib.base.shell_exec(self.check))
        # 8.8% - user: 4.9%, system: 2.0%, iowait: 1.0%
        self.assertRegexpMatches(stdout, r'^\d+\.\d+%')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_check_5_times_and_report_crit(self):
        if os.path.isfile('/tmp/cpu-usage.db'):
            os.remove('/tmp/cpu-usage.db') 
        time.sleep(5)
        for i in range(4):      # 0..3
            stdout, stderr, retc = lib.base.coe(lib.base.shell_exec(self.check + ' --count 5 --critical 1'))
            self.assertEqual(retc, STATE_OK)
            time.sleep(1.5)
        # the 5th time the check should report CRIT because CPU load is constantly above 1%
        stdout, stderr, retc = lib.base.coe(lib.base.shell_exec(self.check + ' --count 5 --critical 1'))
        self.assertEqual(retc, STATE_CRIT)
    

if __name__ == '__main__':
    unittest.main()