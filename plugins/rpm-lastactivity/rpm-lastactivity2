#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020050101'

DESCRIPTION = 'Checks the timespan since the last rpm activity, for example due to a yum/dnf install/update.'

DEFAULT_WARN  = 90   # days
DEFAULT_CRIT  = 365  # days

command_installed  = 'command -v rpm'
cmd = 'rpm --query --all --queryformat "%{INSTALLTIME} %{NAME}\n" | sort | tail -1'


#====================
from lib.globals2 import *

import lib.base2

import argparse
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__),
        )

    parser.add_argument('-c', '--critical',
        default=DEFAULT_CRIT,
        dest='CRIT',
        help='Set the critical threshold (in days). Default: %(default)s',
        type=int,
        )

    parser.add_argument('-w', '--warning',
        default=DEFAULT_WARN,
        dest='WARN',
        help='Set the warning threshold (in days). Default: %(default)s',
        type=int,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = lib.base2.coe(lib.base2.shell_exec(cmd))
    if (stderr):
        lib.base2.oao('{}'.format(stderr), STATE_UNKNOWN)
    last_activity = stdout.strip().split(' ')

    # calculating the final check state
    delta = lib.base2.now() - int(last_activity[0])
    if delta >= args.CRIT * 24 * 60 * 60:
        lib.base2.oao('Last rpm/yum/dnf activity is more than {} days ago.'.format(args.CRIT), STATE_CRIT)
    if delta >= args.WARN * 24 * 60 * 60:
        lib.base2.oao('Last rpm/yum/dnf activity is more than {} days ago.'.format(args.WARN), STATE_WARN)
    
    lib.base2.oao('Last rpm/yum/dnf activity is {} ago (so below the given thresholds {}d/{}d).'.format(lib.base2.seconds2human(delta), args.WARN, args.CRIT), STATE_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
