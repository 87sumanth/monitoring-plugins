#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020012801'

DESCRIPTION = 'Check VMs on a KVM host using "virsh list".'

command_installed  = 'command -v virsh'
command = 'virsh list --all'

#====================
from lib.globals import *

import argparse

from lib.utils import execute_command
from lib.output import unpack_perfdata


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # check if shell command is available
    stdout, stderr, retc = execute_command(command_installed)
    if (retc != 0):
        print('"virsh" is missing. On CentOS, use "yum install libvirt-client".')
        exit(STATE_UNKNOWN)

    perfdata = ''
    state = STATE_OK

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(command)
    if (stderr or retc != 0):
        print('Bash command `{}` failed.'.format(command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_WARN)

    # we got a VM list and their states - strip first two header and last two empty rows
    vm_list = stdout.split('\n')[2:-2]

    # count the VM states
    running, idle, paused, in_shutdown, shut_off, crashed, pmsuspended = 0, 0, 0, 0, 0, 0, 0
    if vm_list:
        for vm in vm_list:
            vm = ' '.join(vm.replace('shut off', 'shut_off').replace('in shutdown', 'in_shutdown').split())
            vm_id, vm_name, vm_state = vm.split(' ')

            running     += 1 if vm_state == 'running' else 0
            idle        += 1 if vm_state == 'idle' else 0
            paused      += 1 if vm_state == 'paused' else 0
            in_shutdown += 1 if vm_state == 'in_shutdown' else 0
            shut_off    += 1 if vm_state == 'shut_off' else 0
            crashed     += 1 if vm_state == 'crashed' else 0
            pmsuspended += 1 if vm_state == 'pmsuspended' else 0

        msg = 'VMs: '
        if running:
            msg += '{} running, '.format(running)
        if idle:
            msg += '{} idle (WARN), '.format(idle)
            state = STATE_WARN
        if paused:
            msg += '{} paused (WARN), '.format(paused)
            state = STATE_WARN
        if in_shutdown:
            msg += '{} in_shutdown, '.format(in_shutdown)
        if shut_off:
            msg += '{} shut_off, '.format(shut_off)
        if pmsuspended:
            msg += '{} pmsuspended (WARN), '.format(pmsuspended)
            state = STATE_WARN
        if crashed:
            msg += '{} crashed (CRIT), '.format(crashed)
            state = STATE_CRIT

        msg = msg[:-2]

    else:
        msg = 'No VMs running.'

    perfdata += unpack_perfdata('vm_running', running, None, None, None, 0, None)
    perfdata += unpack_perfdata('vm_idle', idle, None, None, None, 0, None)
    perfdata += unpack_perfdata('vm_paused', paused, None, None, None, 0, None)
    perfdata += unpack_perfdata('vm_in_shutdown', in_shutdown, None, None, None, 0, None)
    perfdata += unpack_perfdata('vm_shut_off', shut_off, None, None, None, 0, None)
    perfdata += unpack_perfdata('vm_crashed', crashed, None, None, None, 0, None)
    perfdata += unpack_perfdata('vm_pmsuspended', pmsuspended, None, None, None, 0, None)

    # over and out
    print(msg + '|' + perfdata.strip())
    exit(state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(e)
        exit(STATE_UNKNOWN)
