#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020040701'

DESCRIPTION = 'Checks the used disk space, for each partition.'

DEFAULT_WARN  = 90
DEFAULT_CRIT  = 95

#====================
from lib.globals import *

import lib.base

import argparse
try:
    import psutil
except ImportError, e:
    print('Python module "psutil" is not installed.')
    exit(STATE_UNKNOWN)
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('--always-ok',
        help = 'Always returns OK.',
        dest = 'ALWAYS_OK',
        action = 'store_true',
        default = False,
        )

    parser.add_argument('-c', '--critical',
        help = 'Set the critical threshold partition usage percentage. Default: %(default)s',
        dest = 'CRIT',
        type = int,
        default = DEFAULT_CRIT,
        )
    
    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold partition usage percentage. Default: %(default)s',
        dest = 'WARN',
        type = int,
        default = DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    state = STATE_OK
    perfdata = ''
    table_data = []
    msg_header = ''

    parts = psutil.disk_partitions(all=False)
    for part in parts:
        usage = psutil.disk_usage(part.mountpoint)

        disk_state = lib.base.get_state(usage.percent, args.WARN, args.CRIT, 'ge')
        state = lib.base.get_worst(state, disk_state)
        perfdata += lib.base.get_perfdata('{}-total'.format(part.mountpoint), usage.total, 'B', None, None, 0, usage.total)
        perfdata += lib.base.get_perfdata('{}-percent'.format(part.mountpoint), usage.percent, '%', args.WARN, args.CRIT, 0, 100)
        perfdata += lib.base.get_perfdata('{}-usage'.format(part.mountpoint), usage.used, 'B', None, None, 0, usage.total)

        if part.mountpoint == '/':
            msg_header = '{} {}% - total: {}, used: {}, free: {}'.format(part.mountpoint, usage.percent, lib.base.bytes2human(usage.total), lib.base.bytes2human(usage.used), lib.base.bytes2human(usage.free))

        table_data.append({
            'mountpoint': '{} {}'.format(part.mountpoint, lib.base.state2string(disk_state)),
            'used': lib.base.bytes2human(usage.used),
            'total': lib.base.bytes2human(usage.total),
            'percent': '{}%'.format(usage.percent),
            })

    table = lib.base.get_table(table_data, 
        ['mountpoint', 'used', 'total', 'percent'], 
        ['mountpoint', 'used', 'total', 'percent'], 
        'percent'
        )

    lib.base.oao(msg_header.strip() + '\n\n' + table, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
