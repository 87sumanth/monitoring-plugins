#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html


__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019111401'

DESCRIPTION = 'Checks the used disk space, for each partition.'

DEFAULT_WARN  = 90
DEFAULT_CRIT  = 95

#====================
import argparse
import psutil       # https://pypi.org/project/psutil/

from lib.globals import *
from lib.output import unpack_perfdata, bytes2human, format_as_table
from lib.parse_input import evaluate_greater


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version', action='version', version='{0}: v{1} by {2}' . format('%(prog)s', __version__, __author__))

    parser.add_argument('-w', '--warning', help='Set the warning threshold partition usage percentage. Default: %(default)s',
                      default=DEFAULT_WARN, type=float, dest='WARN')
    parser.add_argument('-c', '--critical', help='Set the critical threshold partition usage percentage. Default: %(default)s',
                      default=DEFAULT_CRIT, type=float, dest='CRIT')
    
    return parser.parse_args()


def main():
    try:
        parsed = parse_args()
    except Exception as e:
        print('Argument parsing failed')
        print(e)
        exit(STATE_UNKNOWN)

    global_state = STATE_OK
    perfdata = ''
    table_data = []
    slash_usage_text = ''

    parts = psutil.disk_partitions(all=False)
    for part in parts:
        usage = psutil.disk_usage(part.mountpoint)

        # todo check if / in perfdata works
        usage_data = Data(part.mountpoint, usage.percent, parsed.WARN, parsed.CRIT)
        usage_data.set_state(evaluate_greater((usage_data.value, usage_data.warn, usage_data.crit)))
        perfdata += unpack_perfdata(('{}-percent'.format(usage_data.label), usage_data.value, '%', usage_data.warn, usage_data.crit, 0, 100))
        perfdata += unpack_perfdata(('{}-usage'.format(usage_data.label), usage.used, 'B', None, None, 0, usage.total))

        if part.mountpoint == '/':
            slash_usage_text = '{}: {} of {} used ({}%)'.format(part.mountpoint, bytes2human(usage.used), bytes2human(usage.total), usage.percent)

        state = ''
        if usage_data.state == STATE_CRIT:
            state = ' (CRIT)'
            global_state = STATE_CRIT
        elif usage_data.state == STATE_WARN:
            state = ' (WARN)'
            if global_state != STATE_CRIT:
                global_state = STATE_WARN

        table_data.append({
            'mountpoint': part.mountpoint + state,
            'used': bytes2human(usage.used),
            'total': bytes2human(usage.total),
            'percent': '{}%'.format(usage.percent),
            })

    table = format_as_table(table_data, ['mountpoint', 'used', 'total', 'percent'], ['mountpoint', 'used', 'total', 'percent'], 'percent')
    print(slash_usage_text.strip() + '\n\n' + table.strip() + '|' + perfdata.strip())
    exit(global_state)

if __name__ == '__main__':
    main()
