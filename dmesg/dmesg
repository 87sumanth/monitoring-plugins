#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020021901'

DESCRIPTION = 'Checks dmesg for emerg, alert, crit and err messages. Uses "dmesg --level=emerg,alert,crit,err --reltime". If you fixed the issues (or just want to clear them), use "dmesg --clear" to clear the Kernel Ring Buffer Messages.'

command = 'dmesg --level=emerg,alert,crit,err --reltime'

# ignore false positives / bugs:
ignore = [
    ' Asking for cache data failed',
    ' Assuming drive cache: write through',
    ' cpufreq: __cpufreq_add_dev: ->get() failed',
    ' ERST: Failed to get Error Log Address Range.',
    ' Ignoring unsafe software power cap!',
    ' ioctl error in smb2_get_dfs_refer rc=-5',         # https://access.redhat.com/solutions/3496971
    ' No Caching mode page found',
    ' SMBus Host Controller not enabled!',
    ' tsc: Fast TSC calibration failed',
    ' unhandled rdmsr: ',                               # https://access.redhat.com/solutions/59299
    ' unhandled wrmsr: ',                               # https://bugzilla.redhat.com/show_bug.cgi?id=874627
]


#====================

import argparse
from traceback import print_exc

from lib.globals import *
from lib.parse_input import filter_input
from lib.parse_arguments import csv
from lib.utils import execute_command


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('--test',
        help = 'For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest = 'TEST',
        type = csv,
        )

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    if parsed.TEST == None:
        # execute the shell command and return its result and exit code
        stdout, stderr, retc = execute_command(command)
        if (stderr or retc != 0):
            print('Bash command `{}` failed.'.format(command))
            print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
            exit(STATE_UNKNOWN)
    else:
        # do not call the command, put in test data
        import os
        if parsed.TEST[0] and os.path.isfile(parsed.TEST[0]):
            f = open(parsed.TEST[0], 'r')
            stdout = f.read()
            f.close()
        else:
            stdout = parsed.TEST[0]
        if parsed.TEST[1] and os.path.isfile(parsed.TEST[1]):
            f = open(parsed.TEST[1], 'r')
            stderr = f.read()
            f.close()
        else:
            stderr = parsed.TEST[1]
        retc = parsed.TEST[2]


    result = stdout.strip()
    result = filter_input(result, ignore)


    if len(result) > 0:
        state = STATE_CRIT
        if len(result) == 1:
            msg = 'Error in dmesg.\n{0}'.format(result)
        else:
            msg = 'Errors in dmesg.\n{0}'.format(result)
    else:
        state = STATE_OK
        msg = 'No important errors in dmesg.'

    print(msg.strip())
    exit(state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
