#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020012801'

DESCRIPTION = 'Check dmesg for emerg / alert / crit / err. Use "dmesg --level=emerg,alert,crit,err --reltime" to debug the error messages using human readable timestamps. Fix them. After fixing / review, use "dmesg --clear" to clear the Kernel Ring Buffer Messages.'

command = 'dmesg --level=emerg,alert,crit,err --reltime'

# ignore false positives / bugs:
ignore = [
    ' Asking for cache data failed'
    ' Assuming drive cache: write through'
    ' cpufreq: __cpufreq_add_dev: ->get() failed'
    ' ERST: Failed to get Error Log Address Range.'
    ' Ignoring unsafe software power cap!'
    ' ioctl error in smb2_get_dfs_refer rc=-5',   # https://access.redhat.com/solutions/3496971
    ' No Caching mode page found'
    ' SMBus Host Controller not enabled!'
    ' tsc: Fast TSC calibration failed'
    ' unhandled rdmsr: ',                        # https://access.redhat.com/solutions/59299
    ' unhandled wrmsr: ',                        # https://bugzilla.redhat.com/show_bug.cgi?id=874627
]


#====================

from lib.globals import *
from lib.parse_input import filter_input
from lib.utils import execute_command


def main():
    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(command)
    if (stderr or retc != 0):
        print('Bash command `{}` failed.'.format(command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)

    result = stdout.strip()
    result = filter_input(result, ignore)

    if len(result) > 0:
        state = STATE_CRIT
        if len(result) == 1:
            msg = 'Error in dmesg.\n{0}'.format(result)
        else:
            msg = 'Errors in dmesg.\n{0}'.format(result)
    else:
        state = STATE_OK
        msg = 'No errors in dmesg.'

    print(msg.strip())
    exit(state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(e)
        exit(STATE_UNKNOWN)
