#!/usr/bin/env python

import unittest

import os
import time

from lib.utils import execute_command
from lib.globals import *

        
class TestCheck(unittest.TestCase):

    check = './dmesg'

    def test_if_check_runs_EXAMPLE01(self):
        stdout, stderr, retc = execute_command(self.check + ' --test=examples/EXAMPLE01,,0')
        self.assertRegexpMatches(stdout, r'No important errors in dmesg.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE02(self):
        stdout, stderr, retc = execute_command(self.check + ' --test=examples/EXAMPLE02,,0')
        self.assertRegexpMatches(stdout, r'No important errors in dmesg.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE03(self):
        stdout, stderr, retc = execute_command(self.check + ' --test=examples/EXAMPLE03,,0')
        self.assertRegexpMatches(stdout, r'No important errors in dmesg.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE04(self):
        stdout, stderr, retc = execute_command(self.check + ' --test=examples/EXAMPLE04,,0')
        self.assertRegexpMatches(stdout, r'Errors in dmesg.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)

    def test_if_check_runs_EXAMPLE05(self):
        stdout, stderr, retc = execute_command(self.check + ' --test=examples/EXAMPLE05,,0')
        self.assertRegexpMatches(stdout, r'Errors in dmesg.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)

    def test_if_check_runs_EXAMPLE06(self):
        stdout, stderr, retc = execute_command(self.check + ' --test=examples/EXAMPLE06,,0')
        self.assertRegexpMatches(stdout, r'Errors in dmesg.')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_CRIT)


    
if __name__ == '__main__':
    unittest.main()