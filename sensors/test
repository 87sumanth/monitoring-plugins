#!/usr/bin/env python

from lib.globals import *

import lib.base

import unittest

        
class TestCheck(unittest.TestCase):

    check = './sensors'

    def test_if_check_runs_EXAMPLE01(self):
        stdout, stderr, retc = lib.base.shell_exec(self.check + ' --test=examples/EXAMPLE01,,0')
        self.assertRegexpMatches(stdout, r'Everything is ok')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE02(self):
        stdout, stderr, retc = lib.base.shell_exec(self.check + ' --test=examples/EXAMPLE02,,0')
        self.assertRegexpMatches(stdout, r'Everything is ok')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_OK)

    def test_if_check_runs_EXAMPLE03(self):
        stdout, stderr, retc = lib.base.shell_exec(self.check + ' --test=examples/EXAMPLE03,,0')
        self.assertRegexpMatches(stdout, r'reported an alarm')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_runs_EXAMPLE04(self):
        stdout, stderr, retc = lib.base.shell_exec(self.check + ' --test=examples/EXAMPLE04,,0')
        self.assertRegexpMatches(stdout, r'reported an alarm')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_WARN)

    def test_if_check_handles_no_sensors(self):
        stdout, stderr, retc = lib.base.shell_exec(self.check + ' --test=examples/EXAMPLE05,,1')
        self.assertRegexpMatches(stdout, r'Please check "sensors"')
        self.assertEqual(stderr, '')
        self.assertEqual(retc, STATE_UNKNOWN)


if __name__ == '__main__':
    unittest.main()