#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020040701'

DESCRIPTION = 'Checks the status of some hardware sensors using the lm_sensors package.'

command_installed  = 'command -v sensors'
command = 'sensors'


#====================
from lib.globals import *

import lib.args
import lib.base

import argparse
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('--test',
        help = 'For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest = 'TEST',
        type = lib.args.csv,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    if args.TEST == None:
        # check if shell command is available
        stdout, stderr, retc = lib.base.shell_exec(command_installed)
        if (retc != 0):
            lib.base.oao('"sensors" is missing.', STATE_UNKNOWN)
        # execute the shell command and return its result and exit code
        stdout, stderr, retc = lib.base.shell_exec(command)
    else:
        # do not call the command, put in test data
        import os
        if args.TEST[0] and os.path.isfile(args.TEST[0]):
            f = open(args.TEST[0], 'r')
            stdout = f.read()
            f.close()
        else:
            stdout = args.TEST[0]
        if args.TEST[1] and os.path.isfile(args.TEST[1]):
            f = open(args.TEST[1], 'r')
            stderr = f.read()
            f.close()
        else:
            stderr = args.TEST[1]
        retc = args.TEST[2]

    result = stdout.split('\n')

    if int(retc) != 0:
        msg = 'Please check "sensors", it returned: {}'.format(stderr)
        state = STATE_UNKNOWN
    elif 'ALARM' in stdout:
        msg = '"sensors" reported an alarm: {}'.format(stderr)
        state = STATE_WARN
    elif 'FAULT' in stdout:
        msg = '"sensors" reported a fault: {}'.format(stderr)
        state = STATE_UNKNOWN
    else:
        msg = 'Everything is ok.'
        state = STATE_OK

    lib.base.oao(msg, state)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
