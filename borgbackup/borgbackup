#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html


__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020021101'

DESCRIPTION = 'Checks the date and return code of the last borgbackup, according to the logfile.'

DEFAULT_CRIT = None
DEFAULT_WARN = 24

#====================

from lib.globals import *
from lib.parse_input import evaluate_greater, evaluate_greater_datetime_to_now
from lib.output import unpack_perfdata, state_to_string

import argparse
from traceback import print_exc
import datetime
import os


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('-c', '--critical',
        help = 'Set the critical threshold for the time difference to the start of the last backup (in hours). Default: %(default)s',
        dest = 'CRIT',
        type = int,
        default = DEFAULT_CRIT,
        )

    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold for the time difference to the start of the last backup (in hours). Default: %(default)s',
        dest = 'WARN',
        type = int,
        default = DEFAULT_WARN,
        )
    
    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    perfdata = ''
    path = '/var/log/borg/borg.log'

    if os.path.exists(path) <= 0 and not os.path.isfile(path):
        msg = 'Logfile {} not found or empty.'.format(path)
        print(msg)
        exit(STATE_UNKNOWN)

    mount_lines = ''
    with open('/proc/mounts') as mountlist:
        for line in mountlist:
            if 'borgfs' in line:
                mount_lines += '* ' + line

    if mount_lines:
        msg = 'There are active borg mounts.\n\n{}'.format(mount_lines)
        print(msg)
        exit(STATE_WARN)


    logfile = open(path, 'rb')
    for line in logfile:
        if line.startswith('start'):
            starttime = line.split(": ")[1].strip()

        if line.startswith('end'):
            endtime = line.split(": ")[1].strip()

        if line.startswith('create_rc'):
            create_rc = int(line.split(": ")[1])

        if line.startswith('prune_rc'):
            prune_rc = int(line.split(": ")[1])

    state = STATE_OK
    create_rc_state = evaluate_greater(create_rc, 2, None)
    state = get_greater_state(state, create_rc_state)
    perfdata += unpack_perfdata('create_rc', create_rc, None, 2, None, 0, None)

    prune_rc_state = evaluate_greater(prune_rc, 2, None)
    state = get_greater_state(state, prune_rc_state)
    perfdata += unpack_perfdata('prune_rc', prune_rc, None, 2, None, 0, None)

    starttime_datetime = datetime.datetime.strptime(starttime, '%Y-%m-%d %H:%M:%S')
    last_starttime_state = evaluate_greater_datetime_to_now(starttime_datetime, parsed.WARN, parsed.CRIT)
    state = get_greater_state(state, last_starttime_state)

    duration = (datetime.datetime.strptime(endtime, '%Y-%m-%d %H:%M:%S') - starttime_datetime).total_seconds()
    perfdata += unpack_perfdata('duration', duration, 's', None, None, 0, None)

    if state == STATE_OK:
        msg = 'Last Backup: Start: {}, End: {} ({}s)'.format(starttime, endtime, duration)
    else:
        if last_starttime_state != STATE_OK:
            msg = 'Last backup is too long ago. Last Backup: Start: {}, End: {} ({}s)'.format(starttime, endtime, duration)
        else:
            msg = 'One or more errors. Last Backup: Start: {}, End: {} ({}s)'.format(starttime, endtime, duration)

    msg += '\nCreate rc: {} {}'.format(create_rc, state_to_string(create_rc_state))
    msg += '\nPrune rc: {} {}'.format(prune_rc, state_to_string(prune_rc_state))

    print(msg + '|' + perfdata.strip())
    exit(state)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
