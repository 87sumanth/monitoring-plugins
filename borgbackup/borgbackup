#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html


__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019111401'

DESCRIPTION = 'Checks the date and return code of the last borgbackup, according to the logfile.'

DEFAULT_CRIT = None
DEFAULT_WARN = 24

DEFAULT_RUNNING_CRIT = 4
DEFAULT_RUNNING_WARN = 5

#====================

from lib.globals import *
from lib.parse_input import evaluate_greater, compare_datetime_to_now
from lib.output import unpack_perfdata

import argparse
import datetime
import os
import psutil


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version', action='version', version='{0}: v{1} by {2}' . format('%(prog)s', __version__, __author__))

    parser.add_argument('-c', '--critical', help='Set the critical threshold for the time difference to the start of the last backup (in hours). Default: %(default)s',
                      default=DEFAULT_CRIT, type=int, dest='CRIT')

    parser.add_argument('-w', '--warning', help='Set the warning threshold for the time difference to the start of the last backup (in hours). Default: %(default)s',
                      default=DEFAULT_WARN, type=int, dest='WARN')

    parser.add_argument('--running-critical', help='Set the critical threshold for the duration of a running borg process (in hours). Default: %(default)s',
                      default=DEFAULT_RUNNING_CRIT, type=int, dest='RUNNING_CRIT')

    parser.add_argument('--running-warning', help='Set the warning threshold for the duration of a running borg process (in hours). Default: %(default)s',
                      default=DEFAULT_RUNNING_WARN, type=int, dest='RUNNING_WARN')
    
    return parser.parse_args()


def checkIfProcessRunning(processName):
    '''
    Check if there is any running process that contains the given name processName.
    '''
    #Iterate over the all the running process
    for proc in psutil.process_iter():
        try:
            # Check if process name contains the given name string.
            if processName.lower() in proc.name().lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return False


def main():
    try:
        parsed = parse_args()
    except:
        exit(STATE_UNKNOWN)

    perfdata = ''
    path = '/var/log/borg/borg.log'

    if os.path.exists(path) <= 0 and not os.path.isfile(path):
        global_state = STATE_UNKNOWN
        msg = 'Logfile (`/var/log/borg/borg.log`) is not found or empty.'
        print(msg)
        exit(global_state)

    mount_lines = ''
    with open('/proc/mounts') as mountlist:
        for line in mountlist:
            if 'borgfs' in line:
                mount_lines += '* ' + line

    if mount_lines:
        global_state = STATE_WARN
        msg = 'There are active borg mounts.\n\n{}'.format(mount_lines)
        print(msg)
        exit(global_state)


    if checkIfProcessRunning('borg'):
        logfile = open(path, 'rb')
        for line in logfile:
            if line.startswith('start'):
                starttime = line.split(": ")[1].strip()

        last_starttime_data = Data('last_starttime', starttime, parsed.RUNNING_WARN, parsed.RUNNING_CRIT)
        last_starttime_data.set_state(compare_datetime_to_now((last_starttime_data.value, last_starttime_data.warn, last_starttime_data.crit)))
        if last_starttime_data.state != STATE_OK:
            global_state = last_starttime_data.state
            msg = 'A borg process is running for too long. Start: {}'.format(starttime)
            print(msg)
            exit(global_state)

        global_state = STATE_OK
        msg = 'A borg process is currently running.'
        print(msg)
        exit(global_state)


    logfile = open(path, 'rb')
    for line in logfile:
        if line.startswith('start'):
            starttime = line.split(": ")[1].strip()

        if line.startswith('end'):
            endtime = line.split(": ")[1].strip()

        if line.startswith('create_rc'):
            create_rc = int(line.split(": ")[1])

        if line.startswith('prune_rc'):
            prune_rc = int(line.split(": ")[1])

    create_rc_data = Data('create_rc', create_rc, 2, None)
    prune_rc_data = Data('prune_rc', prune_rc, 2, None)

    for data in create_rc_data, prune_rc_data:
        data.set_state(evaluate_greater((data.value, data.warn, data.crit)))
        perfdata += unpack_perfdata((data.label, data.value, None, data.warn, data.crit, 0, None))

    last_starttime_data = Data('last_starttime', starttime, parsed.WARN, parsed.CRIT)
    last_starttime_data.set_state(compare_datetime_to_now((last_starttime_data.value, last_starttime_data.warn, last_starttime_data.crit)))

    duration = (datetime.datetime.strptime(endtime, '%Y-%m-%d %H:%M:%S') - datetime.datetime.strptime(starttime, '%Y-%m-%d %H:%M:%S')).total_seconds()
    duration_data = Data('duration', duration, None, None)
    perfdata += unpack_perfdata((duration_data.label, duration_data.value, 's', duration_data.warn, duration_data.crit, 0, None))

    global_state = STATE_OK
    state_checklist = [create_rc_data.state, prune_rc_data.state, last_starttime_data.state]
    if STATE_CRIT in state_checklist:
        global_state = STATE_CRIT
    elif STATE_WARN in state_checklist:
        if global_state != STATE_CRIT:
            global_state = STATE_WARN
    
    if global_state == STATE_OK:
        msg = 'Last Backup: Start: {}, End: {} ({}s)'.format(starttime, endtime, duration)
    else:
        if last_starttime_data.state != STATE_OK:
            msg = 'Last backup is too long ago. Last Backup: Start: {}, End: {} ({}s)'.format(starttime, endtime, duration)
        else:
            msg = 'One or more errors. Last Backup: Start: {}, End: {} ({}s)'.format(starttime, endtime, duration)

    msg += create_rc_data.format_submsg('\nCreate rc: {}'.format(create_rc_data.value))
    msg += prune_rc_data.format_submsg('\nPrune rc: {}'.format(prune_rc_data.value))

    print(msg + '|' + perfdata.strip())
    exit(global_state)

main()
