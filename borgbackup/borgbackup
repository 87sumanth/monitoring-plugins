#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md


__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020040901'

DESCRIPTION = 'Checks the date and return code of the last borgbackup, according to the logfile.'

DEFAULT_CRIT = None
DEFAULT_WARN = 24

#====================
from lib.globals import *

import lib.base

import argparse
import datetime
import os
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action='version',
        version='{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('-c', '--critical',
        help = 'Set the critical threshold for the time difference to the start of the last backup (in hours). Default: %(default)s',
        dest = 'CRIT',
        type = int,
        default = DEFAULT_CRIT,
        )

    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold for the time difference to the start of the last backup (in hours). Default: %(default)s',
        dest = 'WARN',
        type = int,
        default = DEFAULT_WARN,
        )
    
    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    perfdata = ''
    path = '/var/log/borg/borg.log'

    # content of the log file:
        # start: 2020-04-08 23:00:01
        # prune_rc: 0
        # create_rc: 0
        # end: 2020-04-08 23:00:13

    if os.path.exists(path) <= 0 and not os.path.isfile(path):
        lib.base.oao('Logfile {} not found or empty.'.format(path), STATE_UNKNOWN)

    mount_lines = ''
    with open('/proc/mounts') as mountlist:
        for line in mountlist:
            if 'borgfs' in line:
                mount_lines += '* ' + line

    if mount_lines:
        lib.base.oao('There are active borg mounts.\n\n{}'.format(mount_lines), STATE_WARN)


    logfile = open(path, 'rb')
    for line in logfile:
        if line.startswith('start'):
            starttime = line.split(": ")[1].strip()

        if line.startswith('end'):
            endtime = line.split(": ")[1].strip()

        if line.startswith('create_rc'):
            create_rc = int(line.split(": ")[1])

        if line.startswith('prune_rc'):
            prune_rc = int(line.split(": ")[1])

    # check if all variables are defined
    try:
        starttime
        endtime
        create_rc
        prune_rc
    except UnboundLocalError as e:
        lib.base.oao('Could not find all expected values in the logfile.\n{}'.format(e), STATE_UNKNOWN)

    state = STATE_OK
    create_rc_state = lib.base.get_state(create_rc, 2, None, operator='ge')
    state = lib.base.get_worst(state, create_rc_state)
    perfdata += lib.base.get_perfdata('create_rc', create_rc, None, 2, None, 0, None)

    prune_rc_state = lib.base.get_state(prune_rc, 2, None, operator='ge')
    state = lib.base.get_worst(state, prune_rc_state)
    perfdata += lib.base.get_perfdata('prune_rc', prune_rc, None, 2, None, 0, None)

    now = lib.base.now(as_type='iso')
    delta = lib.base.timestrdiff(now, starttime)

    last_starttime_state = lib.base.get_state(delta, args.WARN * 60 * 60 if args.WARN is not None else None, args.CRIT * 60 * 60 if args.CRIT is not None else None)
    state = lib.base.get_worst(state, last_starttime_state)

    duration = lib.base.timestrdiff(endtime, starttime)     # in seconds
    perfdata += lib.base.get_perfdata('duration', duration, 's', None, None, 0, None)

    msg = 'Last Backup started {}, ended {}, took {}.\n'.format(starttime, endtime, lib.base.seconds2human(duration))
    if state != STATE_OK:
        if last_starttime_state != STATE_OK:
            msg = 'Last backup is too long ago. ' + msg
        else:
            msg = 'One or more errors. ' + msg
    msg += '* Create rc: {}, State: {}\n'.format(create_rc, lib.base.state2str(create_rc_state))
    msg += '* Prune rc: {}, State: {}'.format(prune_rc, lib.base.state2str(prune_rc_state))

    lib.base.oao(msg, perfdata)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
