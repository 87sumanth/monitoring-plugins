#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020011302'

DESCRIPTION = 'This plugin lets you track if server or app updates are available, the number of active users over time, the number of shares in various categories and some storage statistics against a Nextcloud server.'

DEFAULT_URL             = 'http://localhost/nextcloud/ocs/v2.php/apps/serverinfo/api/v1/info'
DEFAULT_USERNAME        = 'admin'
DEFAULT_INSECURE        = False
DEFAULT_NO_PROXY        = False
DEFAULT_NO_UPDATE_CHECK = False


#====================
import argparse
import base64
import json
import re
import ssl
import time
import urllib2


from lib.globals import *
from lib.output import bytes2human, unpack_perfdata
from lib.utils import execute_command


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('--insecure',
        help = 'This option explicitly allows to perform "insecure" SSL connections. Default: %(default)s',
        dest = 'INSECURE',
        action = 'store_true',
        default = DEFAULT_INSECURE,
        )
    parser.add_argument('--no-proxy',
        help = 'Do not use a proxy. Default: %(default)s',
        dest = 'NO_PROXY',
        action = 'store_true',
        default = DEFAULT_NO_PROXY,
        )
    parser.add_argument('--no-update-check',
        help = 'This option explicitly disables any update checks. Default: %(default)s',
        dest = 'NO_UPDATE_CHECK',
        action = 'store_true',
        default = DEFAULT_NO_UPDATE_CHECK,
        )
    parser.add_argument('--password',
        help = 'Nextcloud API password.',
        dest = 'PASSWORD',
        required = True,
        )
    parser.add_argument('--url',
        help = 'Nextcloud API URL. Default: %(default)s',
        dest = 'URL',
        default = DEFAULT_URL,
        )
    parser.add_argument('--username',
        help = 'Nextcloud API username. Default: %(default)s',
        dest = 'USERNAME',
        default = DEFAULT_USERNAME,
        )
    parser.add_argument('-V', '--version',
        action = 'version',
        version = '%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    return parser.parse_args()


def get_nc_latest_version():
    nc_url = 'https://download.nextcloud.com/server/releases/'
    try:
        request = urllib2.Request(nc_url)
        response = urllib2.urlopen(request, timeout=30)
    except:
        return None

    result = response.read()
    if not result:
        return None

    try:
        # strip_tags, strip html tags:
        result = re.sub(r'<[^<]+?>', '', result)
        matches = re.findall(r'nextcloud-(.*)\.zip', result)
        return matches[-1]
    except:
        return None
    

def is_nc_update_available(current_version):
    # check for nc server updates just once a day:
    #   create last update check table if it does not exist
    #   select last version for software "nextcloud"
    #   if empty or result > 24h old:
    #       get latest version and update database
    #   return latest version or false
    import sqlite3
    conn = sqlite3.connect('/tmp/nextcloud-stats.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS check_values (
            software TEXT NOT NULL,
            timestamp REAL NOT NULL,
            version TEXT NOT NULL
            );
        ''')
    c.execute('''
        CREATE UNIQUE INDEX IF NOT EXISTS idx1 
        ON check_values (software);
        ''')
    c.execute('SELECT * FROM check_values WHERE software = "nextcloud"')
    result = c.fetchone()
    now = time.time()
    if result == None or now - int(result[1]) > 24*60*60:
        latest_version = get_nc_latest_version()
        if latest_version == None:
            return False
        c.execute('REPLACE INTO check_values (software, timestamp, version) VALUES ("nextcloud", ?, ?)', (now, latest_version));
        conn.commit()
    else:
        latest_version = result[2]

    if latest_version > current_version:
        return latest_version

    conn.close()
    return False


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    URL = parsed.URL + '?format=json'
    if URL[0:4] != 'http':
        print('--url parameter has to start with "http://" or https://".')
        exit(STATE_UNKNOWN)
    if 'api/v1/info' not in URL:
        print('--url parameter has to end in "api/v1/info".')
        exit(STATE_UNKNOWN)
    USERNAME = parsed.USERNAME
    PASSWORD = parsed.PASSWORD
    INSECURE = parsed.INSECURE
    NO_PROXY = parsed.NO_PROXY
    NO_UPDATE_CHECK = parsed.NO_UPDATE_CHECK


    credentials = base64.b64encode(USERNAME + ':' + PASSWORD)

    try:
        request = urllib2.Request(URL)

        # Add the authentication and api request header
        request.add_header('Authorization', "Basic %s" % credentials)
        request.add_header('OCS-APIRequest', 'true')
        
        # SSL/TLS certificate validation (see: https://stackoverflow.com/questions/19268548/python-ignore-certificate-validation-urllib2)
        ctx = ssl.create_default_context()
        if (INSECURE):
            ctx.check_hostname = False
            ctx.verify_mode = ssl.CERT_NONE

        # Proxy handler
        if (NO_PROXY):
            proxy_handler = urllib2.ProxyHandler({})
            ctx_handler = urllib2.HTTPSHandler(context=ctx)
            opener = urllib2.build_opener(proxy_handler, ctx_handler)
            response = opener.open(request)
        else:
            response = urllib2.urlopen(request, context=ctx, timeout=7)

        # Read the content
        result = json.loads(response.read())

    except urllib2.HTTPError as error:
        print('HTTP Error: {0} {1}'.format(error.code, error.reason))
        exit(STATE_UNKNOWN)
    except urllib2.URLError as error:
        print('URL Error: {0}'.format(error.reason))
        exit(STATE_UNKNOWN)
    except:
        print('Result does not seem to be in JSON format.')
        exit(STATE_UNKNOWN)

    if result['ocs']['meta']['status'] != 'ok':
        print('Sorry, something went wrong - no "ok" state returned.')
        exit(STATE_UNKNOWN)


    # extract some application specific data
    nc_system_apps_app_updates            = result['ocs']['data']['nextcloud']['system']['apps']['app_updates']
    nc_system_apps_num_installed          = result['ocs']['data']['nextcloud']['system']['apps']['num_installed']
    nc_system_apps_num_updates_available  = result['ocs']['data']['nextcloud']['system']['apps']['num_updates_available']
    nc_system_memcache_local              = result['ocs']['data']['nextcloud']['system']['memcache.local']
    nc_system_memcache_locking            = result['ocs']['data']['nextcloud']['system']['memcache.locking']
    nc_system_version                     = result['ocs']['data']['nextcloud']['system']['version']

    nc_storage_num_users                  = result['ocs']['data']['nextcloud']['storage']['num_users']
    nc_storage_num_files                  = result['ocs']['data']['nextcloud']['storage']['num_files']
    nc_storage_num_storages               = result['ocs']['data']['nextcloud']['storage']['num_storages']
    nc_storage_num_storages_local         = result['ocs']['data']['nextcloud']['storage']['num_storages_local']
    nc_storage_num_storages_home          = result['ocs']['data']['nextcloud']['storage']['num_storages_home']
    nc_storage_num_storages_other         = result['ocs']['data']['nextcloud']['storage']['num_storages_other']
    
    nc_shares_num_fed_shares_received     = result['ocs']['data']['nextcloud']['shares']['num_fed_shares_received']
    nc_shares_num_fed_shares_sent         = result['ocs']['data']['nextcloud']['shares']['num_fed_shares_sent']
    nc_shares_num_shares                  = result['ocs']['data']['nextcloud']['shares']['num_shares']
    nc_shares_num_shares_groups           = result['ocs']['data']['nextcloud']['shares']['num_shares_groups']
    nc_shares_num_shares_link             = result['ocs']['data']['nextcloud']['shares']['num_shares_link']
    nc_shares_num_shares_link_no_password = result['ocs']['data']['nextcloud']['shares']['num_shares_link_no_password']
    nc_shares_num_shares_mail             = result['ocs']['data']['nextcloud']['shares']['num_shares_mail'] if 'num_shares_mail' in result['ocs']['data']['nextcloud']['shares'] else 'n/a'
    nc_shares_num_shares_room             = result['ocs']['data']['nextcloud']['shares']['num_shares_room'] if 'num_shares_room' in result['ocs']['data']['nextcloud']['shares'] else 'n/a'
    nc_shares_num_shares_user             = result['ocs']['data']['nextcloud']['shares']['num_shares_user']

    nc_server_php_max_execution_time      = result['ocs']['data']['server']['php']['max_execution_time']
    nc_server_php_memory_limit            = result['ocs']['data']['server']['php']['memory_limit']
    nc_server_php_upload_max_filesize     = result['ocs']['data']['server']['php']['upload_max_filesize']
    nc_server_php_version                 = result['ocs']['data']['server']['php']['version']
    nc_server_webserver                   = result['ocs']['data']['server']['webserver']

    nc_server_database_size               = result['ocs']['data']['server']['database']['size']
    nc_server_database_type               = result['ocs']['data']['server']['database']['type']
    nc_server_database_version            = result['ocs']['data']['server']['database']['version']

    nc_active_users_last5min              = result['ocs']['data']['activeUsers']['last5minutes']
    nc_active_users_last1h                = result['ocs']['data']['activeUsers']['last1hour']
    nc_active_users_last24h               = result['ocs']['data']['activeUsers']['last24hours']


    # let's do some checks
    msg = ''
    perfdata = ''
    state = STATE_OK


    if not NO_UPDATE_CHECK:
        # if update check
        newer_version = is_nc_update_available(nc_system_version)
        if newer_version:
            state = get_greater_state(state, STATE_WARN)
            msg += 'Nextcloud v{} is available. '.format(newer_version)

        if nc_system_apps_app_updates:
            state = get_greater_state(state, STATE_WARN)
            msg += 'There are {} app updates available. '.format(nc_system_apps_num_updates_available)


    # build the (long) multiline message
    msg += 'v{}, {} users ({}/{}/{} in the last 5min/1h/24h), {} files, {} apps\n'.format(
        nc_system_version, 
        nc_storage_num_users, nc_active_users_last5min, nc_active_users_last1h, nc_active_users_last24h, 
        nc_storage_num_files, nc_system_apps_num_installed,
        )
    msg += '* Shares: {} shares, {} groups, {} links, {} links no password, {} mails, {} rooms, {} users\n'.format(nc_shares_num_shares, nc_shares_num_shares_groups, nc_shares_num_shares_link, nc_shares_num_shares_link_no_password,
        nc_shares_num_shares_mail, nc_shares_num_shares_room, nc_shares_num_shares_user)
    msg += '* Federated Shares: {} received, {} sent\n'.format(nc_shares_num_fed_shares_received, nc_shares_num_fed_shares_sent)
    msg += '* Storages: {} storages, {} home, {} other, {} local\n'.format(nc_storage_num_storages, nc_storage_num_storages_home, nc_storage_num_storages_other, nc_storage_num_storages_local)
    msg += '* DB: {} v{}, size={}\n'.format(nc_server_database_type, nc_server_database_version, bytes2human(nc_server_database_size))
    msg += '* PHP: v{}, upload_max_filesize={}, max_execution_time={}s, memory_limit={}\n'.format(nc_server_php_version, bytes2human(nc_server_php_upload_max_filesize), nc_server_php_max_execution_time, bytes2human(nc_server_php_memory_limit))
    msg += '* Sys: {}, local memcache: {}, locking memcache: {}'.format(nc_server_webserver, nc_system_memcache_local.replace('\\OC\\', ''), nc_system_memcache_locking.replace('\\OC\\', ''))

    perfdata += unpack_perfdata('nc_system_apps_num_installed', nc_system_apps_num_installed, None, None, None, 0, None)

    perfdata += unpack_perfdata('nc_storage_num_users', nc_storage_num_users, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_storage_num_files', nc_storage_num_files, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_storage_num_storages', nc_storage_num_storages, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_storage_num_storages_local', nc_storage_num_storages_local, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_storage_num_storages_home', nc_storage_num_storages_home, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_storage_num_storages_other', nc_storage_num_storages_other, None, None, None, 0, None)

    perfdata += unpack_perfdata('nc_shares_num_fed_shares_received', nc_shares_num_fed_shares_received, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_shares_num_fed_shares_sent', nc_shares_num_fed_shares_sent, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_shares_num_shares', nc_shares_num_shares, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_shares_num_shares_groups', nc_shares_num_shares_groups, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_shares_num_shares_link', nc_shares_num_shares_link, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_shares_num_shares_link_no_password', nc_shares_num_shares_link_no_password, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_shares_num_shares_mail', nc_shares_num_shares_mail, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_shares_num_shares_room', nc_shares_num_shares_room, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_shares_num_shares_user', nc_shares_num_shares_user, None, None, None, 0, None)

    perfdata += unpack_perfdata('nc_server_database_size', nc_server_database_size, 'B', None, None, 0, None)

    perfdata += unpack_perfdata('nc_active_users_last5min', nc_active_users_last5min, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_active_users_last1h', nc_active_users_last1h, None, None, None, 0, None)
    perfdata += unpack_perfdata('nc_active_users_last24h', nc_active_users_last24h, None, None, None, 0, None)

    print(msg.strip() + '|' + perfdata.strip())

    exit(state)

if __name__ == '__main__':
    main()
