#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020043001'

DESCRIPTION = 'Displays the top 3 processes opening more file descriptors.'

#====================
from lib.globals import *

import lib.base

import argparse
from collections import Counter
try:
    import psutil
except ImportError as e:
    print('Python module "psutil" is not installed.')
    exit(STATE_UNKNOWN)
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
                        action='version',
                        version='%(prog)s: v{} by {}'.format(
                            __version__, __author__)
                        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    msg = ''
    cnt = Counter()

    if lib.base.version(psutil.__version__) >= lib.base.version('5.3.0'):
        try:
            for p in psutil.process_iter(attrs=['name', 'num_fds']):
                if p.info['num_fds']:
                    cnt[p.info['name']] += p.info['num_fds']
        except psutil.NoSuchProcess:
            pass
    else:
        try:
            for p in [x.as_dict(attrs=['name', 'num_fds']) for x in psutil.process_iter()]:
                if p['num_fds']:
                    cnt[p['name']] += p['num_fds']
        except psutil.NoSuchProcess:
            pass

    for i, p in enumerate(cnt.most_common(3)):
        msg += '{}. {}: {} FD, '.format(i + 1, p[0], p[1])

    lib.base.oao(msg[:-2], STATE_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
