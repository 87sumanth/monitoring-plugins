#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020040701'

DESCRIPTION = 'Check the mail queue.'

command_installed  = 'command -v mailq'
command = 'mailq'

DEFAULT_WARN  =    2     # mails
DEFAULT_CRIT  =  250     # mails


#====================
from lib.globals import *

import lib.args
import lib.base

import argparse
import re
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('--always-ok',
        help = 'Always returns OK.',
        dest = 'ALWAYS_OK',
        action = 'store_true',
        default = False,
        )

    parser.add_argument('-c', '--critical',
        help = 'Set the critical threshold for mails in the queue. Default: %(default)s',
        dest = 'CRIT',
        type = int,
        default = DEFAULT_CRIT,
        )

    parser.add_argument('--test',
        help = 'For unit tests. Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest = 'TEST',
        type = lib.args.csv,
        )

    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold for mails in the queue. Default: %(default)s',
        dest = 'WARN',
        type = int,
        default = DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    if args.TEST == None:
        # check if shell command is available
        stdout, stderr, retc = lib.base.shell_exec(command_installed)
        if (retc != 0):
            print('"mailq" is missing.')
            exit(STATE_UNKNOWN)

        # execute the shell command and return its result and exit code
        stdout, stderr, retc = lib.base.shell_exec(command)
    else:
        # do not call the command, put in test data
        import os
        if args.TEST[0] and os.path.isfile(args.TEST[0]):
            f = open(args.TEST[0], 'r')
            stdout = f.read()
            f.close()
        else:
            stdout = args.TEST[0]
        if args.TEST[1] and os.path.isfile(args.TEST[1]):
            f = open(args.TEST[1], 'r')
            stderr = f.read()
            f.close()
        else:
            stderr = args.TEST[1]
        retc = args.TEST[2]

    mailq_err_msg = None
    if (stderr):
        # does mailq report something unusual?
        mailq_err_msg = stderr.strip()

    # count the mails in the queue
    mailq_count = 0
    if stdout.strip() != 'Mail queue is empty' and stdout.strip() != '0 mails to deliver':
        # "-- 2 Kbytes in 3 Requests."
        mailq_count = re.search(r' in (.*) Requests?\.', stdout)
        if mailq_count:
            mailq_count = int(mailq_count.group(1).strip())
        else:
            # other mailq version? "17 mails to deliver"
            mailq_count = re.search(r'(.*) mails to deliver', stdout)
            if mailq_count:
                mailq_count = int(mailq_count.group(1).strip())

    msg = ''
    perfdata = ''

    if mailq_err_msg:
        msg += '{}. '.format(mailq_err_msg)
    if mailq_count:
        msg += '{} {} to deliver.'.format(mailq_count, lib.base.pluralize('mail', mailq_count))
    else:
        msg += 'Mail queue is empty.'
    
    perfdata += lib.base.get_perfdata('mailq', mailq_count, None, args.WARN, args.CRIT, 0, None)

    state = lib.base.get_state(mailq_count, args.WARN, args.CRIT, operator='ge')
    if mailq_err_msg:
        state = get_worst(state, STATE_WARN)

    lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
