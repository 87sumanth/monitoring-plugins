#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020012801'

DESCRIPTION = 'Checks for processes that started running before they or some component that they use were updated. Returns WARN if a full reboot is required or if services might need a restart, and in any other case OK. Should be called once a day or after a `yum update` only.'

command_installed  = 'command -v needs-restarting'
bash_command = 'needs-restarting'


#====================
import argparse

from lib.globals import *
from lib.utils import execute_command


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # check if shell command is available
    stdout, stderr, retc = execute_command(command_installed)
    if (retc != 0):
        print('"needs-restarting" is missing. On CentOS, use "yum install yum-utils", on Fedora "dnf install dnf-utils".')
        exit(STATE_UNKNOWN)

    # execute the shell command and return its result and exit code
	# 1. full reboot necessary? check the return code (<> 0: needs reboot): needs-restarting --reboothint
    stdout, stderr, retc = execute_command(bash_command + ' --reboothint')
    if (stderr):
        print('Bash command `{}` failed.'.format(bash_command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)

    # calculating the final check state
    if int(retc) >= 1:
    	print('A system reboot maybe required.')
    	exit(STATE_WARN)

    # execute the shell command and return its result and exit code
	# 2. long list of all updated services (process list): needs-restarting
    stdout, stderr, retc = execute_command(bash_command)
    if (stderr):
        print('Bash command `{}` failed.'.format(bash_command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)
    service_restart_needed = stdout.strip()

    # calculating the final check state
    if service_restart_needed:
    	print('Found some running processes that have been updated.\n\n{}'.format(service_restart_needed))
    	exit(STATE_WARN)

    print('No system or service restart needed.')
    exit(STATE_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(e)
        exit(STATE_UNKNOWN)
