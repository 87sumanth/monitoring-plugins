#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md


__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020040701'

DESCRIPTION = 'Checks if the local or a given hostname is a valid fully qualified domain name in full compliance with RFC 1035.'

#====================
from lib.globals import *

import lib.base
import lib.net

import argparse
import socket
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('-H', '--hostname',
        help = 'Hostname to check. Defaults to the local hostname.',
        dest = 'HOSTNAME',
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    if args.HOSTNAME:
        hostname = args.HOSTNAME
    else:
        hostname = socket.gethostname()

    # calculating the final check state
    if not lib.net.is_valid_hostname(hostname):
        lib.base.oao('"{}" is an invalid fully qualified domain name (FQDN).'.format(hostname), STATE_WARN)
    lib.base.oao('"{}" is a valid FQDN.'.format(hostname), STATE_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
