#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020042301'

DESCRIPTION = ''

DEFAULT_INSECURE = False
DEFAULT_NO_PROXY = False
DEFAULT_TIMEOUT  = 3


#====================
from lib.globals import *

import lib.base
import lib.url

import argparse
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('--always-ok',
        help = 'Always returns OK.',
        dest = 'ALWAYS_OK',
        action = 'store_true',
        default = False,
        )

    parser.add_argument('-H', '--hostname', 
        help = 'FortiOS-based Appliance address.',
        dest = 'HOSTNAME',
        required = True,
        )

    parser.add_argument('--insecure',
        help = 'This option explicitly allows to perform "insecure" SSL connections. Default: %(default)s',
        dest = 'INSECURE',
        action = 'store_true',
        default = DEFAULT_INSECURE,
        )

    parser.add_argument('--no-proxy',
        help = 'Do not use a proxy. Default: %(default)s',
        dest = 'NO_PROXY',
        action = 'store_true',
        default = DEFAULT_NO_PROXY,
        )

    parser.add_argument('--password',
        help = 'FortiOS REST API Single Access Token.',
        dest = 'PASSWORD',
        required = True,
        )

    parser.add_argument('--timeout',
        help = 'Network timeout in seconds. Default: %(default)s (seconds)',
        dest = 'TIMEOUT',
        type = int,
        default = DEFAULT_TIMEOUT,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    url = 'https://{}/api/v2/monitor/system/firmware/?access_token={}'.format(args.HOSTNAME, args.PASSWORD)
    result = lib.base.coe(lib.url.fetch_json(url, insecure=args.INSECURE, no_proxy=args.NO_PROXY, timeout=args.TIMEOUT))

    installed_version = result['results']['current']['version'].replace('v', '')
    latest_version = result['results']['available'][0]['version'].replace('v', '')

    if lib.base.version(installed_version) >= lib.base.version(latest_version):
        lib.base.oao('{} v{} is up to date'.format(result['results']['current']['name'], installed_version), STATE_OK)
    else:
        lib.base.oao('{} v{} is available (installed: v{})'.format(result['results']['current']['name'], latest_version, installed_version), STATE_WARN, always_ok=args.ALWAYS_OK)
   

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
