#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html


__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020011001'

DESCRIPTION = 'Displays amount of free and used memory in the system, checks against used memory in percent.'

DEFAULT_WARN  = 90  # %
DEFAULT_CRIT  = 95  # %

#====================

import argparse
import psutil

from lib.globals import *
from lib.output import bytes2human, unpack_perfdata


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('-c', '--critical',
        help = 'Set the critical threshold for memory usage (in percent). Default: %(default)s',
        dest = 'CRIT',
        type = int,
        default = DEFAULT_CRIT,
        )
    
    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold for memory usage (in percent). Default: %(default)s',
        dest = 'WARN',
        type = int,
        default = DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    CRIT = parsed.CRIT
    WARN = parsed.WARN

    virt = psutil.virtual_memory()
    mem_usage_percent = float(getattr(virt, 'percent', 0))

    msg = '{}% - total: {}, used: {}, free: {}, available: {}\n'.format(
        mem_usage_percent,
        bytes2human(virt.total),
        bytes2human(virt.used),
        bytes2human(virt.free),
        bytes2human(getattr(virt, 'available', 0)),
    )
    msg += 'shared: {}, buffers: {}, cache: {}'.format(
        bytes2human(getattr(virt, 'shared', 0)),
        bytes2human(getattr(virt, 'buffers', 0)),
        bytes2human(getattr(virt, 'cached', 0)),
    )

    # 'label'=value[UOM];[warn];[crit];[min];[max]
    perfdata =  unpack_perfdata('usage_percent', mem_usage_percent, '%', WARN, CRIT, 0, 100)
    perfdata += unpack_perfdata('total', virt.total, 'B', None, None, 0, virt.total)
    perfdata += unpack_perfdata('used', virt.used, 'B', None, None, 0, virt.total)
    perfdata += unpack_perfdata('free', virt.free, 'B', None, None, 0, virt.total)
    perfdata += unpack_perfdata('shared', getattr(virt, 'shared', 0), 'B', None, None, 0, virt.total)
    perfdata += unpack_perfdata('buffers', getattr(virt, 'buffers', 0), 'B', None, None, 0, virt.total)
    perfdata += unpack_perfdata('cached', getattr(virt, 'cached', 0), 'B', None, None, 0, virt.total)
    perfdata += unpack_perfdata('available', getattr(virt, 'available', 0), 'B', None, None, 0, virt.total)

    print(msg + '|' + perfdata.strip())


    # calculating the final check state
    if mem_usage_percent >= CRIT:
        exit(STATE_CRIT)
    if mem_usage_percent >= WARN:
        exit(STATE_WARN)
    exit(STATE_OK)


if __name__ == '__main__':
    main()
