#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020040701'

DESCRIPTION = 'Displays amount of free and used memory in the system, checks against used memory in percent.'

DEFAULT_WARN  = 90  # %
DEFAULT_CRIT  = 95  # %

#====================
from lib.globals import *

import lib.base

import argparse
try:
    import psutil
except ImportError, e:
    print('Python module "psutil" is not installed.')
    exit(STATE_UNKNOWN)
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument('--always-ok',
        help = 'Always returns OK.',
        dest = 'ALWAYS_OK',
        action = 'store_true',
        default = False,
        )

    parser.add_argument('-c', '--critical',
        help = 'Set the critical threshold for memory usage (in percent). Default: %(default)s',
        dest = 'CRIT',
        type = int,
        default = DEFAULT_CRIT,
        )
    
    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold for memory usage (in percent). Default: %(default)s',
        dest = 'WARN',
        type = int,
        default = DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    virt = psutil.virtual_memory()
    mem_usage_percent = float(getattr(virt, 'percent', 0))

    msg_header = '{}% - total: {}, used: {}, free: {}, available: {}\n'.format(
        mem_usage_percent,
        lib.base.bytes2human(virt.total),
        lib.base.bytes2human(virt.used),
        lib.base.bytes2human(virt.free),
        lib.base.bytes2human(getattr(virt, 'available', 0)),
    )
    msg_body = 'shared: {}, buffers: {}, cache: {}'.format(
        lib.base.bytes2human(getattr(virt, 'shared', 0)),
        lib.base.bytes2human(getattr(virt, 'buffers', 0)),
        lib.base.bytes2human(getattr(virt, 'cached', 0)),
    )

    perfdata =  lib.base.get_perfdata('usage_percent', mem_usage_percent, '%', args.WARN, args.CRIT, 0, 100)
    perfdata += lib.base.get_perfdata('total', virt.total, 'B', None, None, 0, virt.total)
    perfdata += lib.base.get_perfdata('used', virt.used, 'B', None, None, 0, virt.total)
    perfdata += lib.base.get_perfdata('free', virt.free, 'B', None, None, 0, virt.total)
    perfdata += lib.base.get_perfdata('shared', getattr(virt, 'shared', 0), 'B', None, None, 0, virt.total)
    perfdata += lib.base.get_perfdata('buffers', getattr(virt, 'buffers', 0), 'B', None, None, 0, virt.total)
    perfdata += lib.base.get_perfdata('cached', getattr(virt, 'cached', 0), 'B', None, None, 0, virt.total)
    perfdata += lib.base.get_perfdata('available', getattr(virt, 'available', 0), 'B', None, None, 0, virt.total)

    state = lib.base.get_state(mem_usage_percent, args.WARN, args.CRIT, operator='ge')
    lib.base.oao(msg_header + msg_body, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
