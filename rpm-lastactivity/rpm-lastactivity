#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019122401'

DESCRIPTION = 'Checks the timespan since the last rpm activity, for example due to a yum/dnf install/update.'

DEFAULT_WARN  = 90   # days
DEFAULT_CRIT  = 365  # days

command_installed  = '/usr/bin/command -v rpm'
bash_command = 'rpm --query --all --queryformat "%{INSTALLTIME} %{NAME}\n" | sort | tail -1'


#====================
import argparse
import time

from lib2.globals import *
from lib2.utils import execute_command


def define_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-c', '--critical', help='Set the critical threshold (in days). Default: %(default)s',
                      default=DEFAULT_CRIT, type=int, dest='CRIT')
    parser.add_argument('-V', '--version', action='version', version='%(prog)s: v{} by {}' . format(__version__, __author__))
    parser.add_argument('-w', '--warning', help='Set the warning threshold (in days). Default: %(default)s',
                      default=DEFAULT_WARN, type=int, dest='WARN')

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        parsed = define_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # check if shell command is available
    stdout, stderr, retc = execute_command(command_installed)
    if (retc != 0):
        print('"rpm" is missing. On CentOS, use "yum install rpm".')
        exit(STATE_UNKNOWN)

    # execute the shell command and return its result and exit code
    stdout, stderr, retc = execute_command(bash_command, shell=True)
    if (stderr):
        print('Bash command `{}` failed.'.format(bash_command))
        print('Stdout: {}\nStderr: {}'.format(stdout, stderr))
        exit(STATE_UNKNOWN)
    last_activity = stdout.strip().split(' ')

    # calculating the final check state
    today = int(time.time())        # get the Unix timestamp
    if today - int(last_activity[0]) >= int(parsed.CRIT) * 24 * 60 * 60:
        print('Last rpm/yum/dnf activity is more than {} days ago.' . format(parsed.CRIT))
        exit(STATE_CRIT)
    if today - int(last_activity[0]) >= int(parsed.WARN) * 24 * 60 * 60:
        print('Last rpm/yum/dnf activity is more than {} days ago.' . format(parsed.WARN))
        exit(STATE_WARN)
    print('Last rpm/yum/dnf activity is below the given thresholds ({}d/{}d).' . format(parsed.WARN, parsed.CRIT))
    exit(STATE_OK)


if __name__ == '__main__':
    main()
