#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://git.linuxfabrik.ch/linuxfabrik-icinga-plugins/checks-linux/-/blob/master/CONTRIBUTING.md

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2020041701'

DESCRIPTION = 'Return the average system load per cpu over the last 1, 5 and 15 minutes.'

cmd = 'cat /proc/loadavg'

DEFAULT_WARN  = 1.15     # load divided by all cpus
DEFAULT_CRIT  = 5.00     # load divided by all cpus


#====================
from lib.globals import *

import lib.base

import argparse
try:
    import psutil
except ImportError, e:
    print('Python module "psutil" is not installed.')
    exit(STATE_UNKNOWN)
from traceback import print_exc


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version',
        action = 'version',
        version = '{0}: v{1} by {2}'.format('%(prog)s', __version__, __author__)
        )

    parser.add_argument('--always-ok',
        help = 'Always returns OK.',
        dest = 'ALWAYS_OK',
        action = 'store_true',
        default = False,
        )

    parser.add_argument('-c', '--critical',
        help = 'Set the critical threshold for load15 per cpu. Default: %(default)s',
        dest = 'CRIT',
        type = float,
        default = DEFAULT_CRIT,
        )

    parser.add_argument('-w', '--warning',
        help = 'Set the warning threshold for load15 per cpu. Default: %(default)s',
        dest = 'WARN',
        type = float,
        default = DEFAULT_WARN,
        )

    return parser.parse_args()


def main():
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit as e:
        exit(STATE_UNKNOWN)

    # we could get the load natively with psutil >= 5.6.2
    # but until then, we do this here:
    stdout, stderr, retc = lib.base.coe(lib.base.shell_exec(cmd))
    if (retc != 0):
        lib.base.oao('{}'.format(stderr), STATE_UNKNOWN)

    load1, load5, load15, tmp1, tmp2 = stdout.split(' ')
    cpu_count = float(psutil.cpu_count(logical=True))

    load1 = float(load1) / cpu_count
    load5 = float(load5) / cpu_count
    load15 = float(load15) / cpu_count

    msg = ''
    perfdata = ''

    msg += 'Avg per CPU: {:0.2f} {:0.2f} {:0.2f}'.format(load1, load5, load15)
    perfdata += lib.base.get_perfdata('load1',  load1,  None, args.WARN, args.CRIT, 0, None)
    perfdata += lib.base.get_perfdata('load5',  load5,  None, args.WARN, args.CRIT, 0, None)
    perfdata += lib.base.get_perfdata('load15', load15, None, args.WARN, args.CRIT, 0, None)

    state = lib.base.get_state(load15, float(args.WARN), float(args.CRIT), operator='ge')
    lib.base.oao(msg, state, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print_exc()
        exit(STATE_UNKNOWN)
