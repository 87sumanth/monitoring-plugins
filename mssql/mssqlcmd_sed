#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019111401'

DESCRIPTION = 'Runs an mssql query and counts the rows'


# [root@icinga2core ~]# sqlcmd -S '192.168.122.86,50307' -U test -P test -d testdb -o query.out -s ';' -W -Q "select * from testtable"
# [root@icinga2core ~]# cat query.out 
# Surname;Name;Age
# -------;----;---
# Drescher;Chris;32
# Franziska;Blondrath;27
# Andre;Marquardt;29
# Frank;Blondrath;58
# Margret;Blondrath;57
# Peter;Drescher;57

# (6 rows affected)

command = 'sqlcmd -S "192.168.122.195,50307" -U test -P test -d testdb -o /tmp/query.out -s ";" -W -Q "select * from testtable"'

DEFAULT_CRIT = 6
DEFAULT_WARN = 5

UOM = None
MIN = 0
MAX = None


#====================

from lib.globals import *
from lib.execute_command import execute_command
from lib.parse_input import evaluate_greater
from lib.output import unpack_perfdata

import csv
import argparse

CRIT = None
WARN = None


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version', action='version', version='{0}: v{1} by {2}' . format('%(prog)s', __version__, __author__))

    parser.add_argument('-c', '--critical', help='Set the critical threshold for the count. Default: %(default)s',
                      default=DEFAULT_CRIT, type=float, dest='CRIT')
    parser.add_argument('-w', '--warning', help='Set the warning threshold for the count. Default: %(default)s',
                      default=DEFAULT_WARN, type=float, dest='WARN')
    
    return parser.parse_args()


def main():
    parsed = parse_args()
    try:
        parsed = parse_args()
    except:
        exit(STATE_UNKNOWN)


    CRIT = parsed.CRIT
    WARN = parsed.WARN

    result, err = execute_command(command).communicate()
    if (err):
        print(err)
        exit(STATE_UNKNOWN)

    sed_command = "sed -i '$d;2d' /tmp/query.out"
    result, err = execute_command(sed_command).communicate()
    if (err):
        print(err)
        exit(STATE_UNKNOWN)

    count = 0
    with open('/tmp/query.out', 'r') as csv_file:
        reader = csv.DictReader(csv_file, delimiter=';')
        for row in reader:
            if row['surname'].isalpha():
                count += 1

    state = evaluate_greater((count, CRIT, WARN))
    msg = str(count) + ' entries'
    perfdata = unpack_perfdata(('count', count, UOM, WARN, CRIT, MIN, MAX))
    print(msg.strip() + '|' + perfdata.strip())
    exit(state)

main()
