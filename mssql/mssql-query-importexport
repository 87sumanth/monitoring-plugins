#! /usr/bin/env python2
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://nagios-plugins.org/doc/guidelines.html

__author__  = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2019111401'

DESCRIPTION = 'Runs an mssql query and counts the rows'

command = "/opt/mssql-tools/bin/sqlcmd -b -S '{hostname}\\{instance},{port}' -U '{username}' -P '{password}' -o /tmp/query.out -s ';' -W -Q '{query}'"

DEFAULT_CRIT = 1
DEFAULT_WARN = None

DEFAULT_HOSTNAME = '127.0.0.1'
DEFAULT_INSTANCE = 'MSSQLSERVER'
DEFAULT_PORT = 1433
DEFAULT_USERNAME = 'sa'
DEFAULT_PASSWORD = ''
DEFAULT_QUERY = 'EXEC sp_databases'


UOM = None
MIN = 0
MAX = None


#====================

from lib.globals import *
from lib.execute_command import execute_command
from lib.parse_input import evaluate_greater
from lib.output import unpack_perfdata, format_msg

import csv
import argparse


def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument('-V', '--version', action='version', version='{0}: v{1} by {2}' . format('%(prog)s', __version__, __author__))

    parser.add_argument('-c', '--critical', help='Set the critical threshold for the row count. Default: %(default)s',
                      default=DEFAULT_CRIT, type=float, dest='CRIT')

    parser.add_argument('-w', '--warning', help='Set the warning threshold for the row count. Default: %(default)s',
                      default=DEFAULT_WARN, type=float, dest='WARN')

    parser.add_argument('-H', '--hostname', help='Set the hostname of the mssql Server Default: %(default)s',
                      default=DEFAULT_HOSTNAME, type=str, dest='HOSTNAME')

    parser.add_argument('-I', '--instance', help='Set the instance for the mssql Server. Default: %(default)s',
                      default=DEFAULT_INSTANCE, type=str, dest='INSTANCE')

    parser.add_argument('-P', '--port', help='Set the port of the mssql Server. Default: %(default)s',
                      default=DEFAULT_PORT, type=int, dest='PORT')

    parser.add_argument('-u', '--username', help='Set the username for the mssql Server. Default: %(default)s',
                      default=DEFAULT_USERNAME, type=str, dest='USERNAME')

    parser.add_argument('-p', '--password', help='Set the password for the mssql Server. Default: %(default)s',
                      default=DEFAULT_PASSWORD, type=str, dest='PASSWORD')

    parser.add_argument('-q', '--query', help='Set the mssql Query. Default: %(default)s',
                      default=DEFAULT_QUERY, type=str, dest='QUERY')
    
    return parser.parse_args()


def main():
    try:
        parsed = parse_args()
    except:
        exit(STATE_UNKNOWN)

    CRIT = parsed.CRIT
    WARN = parsed.WARN

    formated_command = command.format(hostname=parsed.HOSTNAME, instance=parsed.INSTANCE, port=parsed.PORT, username=parsed.USERNAME, password=parsed.PASSWORD, query=parsed.QUERY)

    sp = execute_command(formated_command)
    result, err = sp.communicate()
    result_rc = sp.returncode
    if (err or result_rc != 0):
        print(err)
        exit(STATE_UNKNOWN)

    # # remove 2nd and last line
    # lines = file('/tmp/query.out', 'r').readlines()
    # del lines[1]
    # del lines[-1]
    # file('/tmp/query.out', 'w').writelines(lines)
    sed_command = "/usr/bin/sed -i '$d;2d' /tmp/query.out"
    result, err = execute_command(sed_command).communicate()
    if (err):
        print(err)
        exit(STATE_UNKNOWN)

    count = 0
    customMessage = ""
    state = STATE_OK
    with open('/tmp/query.out', 'r') as csv_file:
        reader = csv.DictReader(csv_file, delimiter=';')
        for row in reader:
            count = int(row['COUNT'])
            perfdata = unpack_perfdata(('count', count, UOM, WARN, CRIT, MIN, MAX))
            customMessage += "\n" + str(count) + " Files in Queue " + str(row['CHANNEL']) + '|' + perfdata.strip()
            iterationState = evaluate_greater((count , WARN, CRIT))
            if (iterationState != STATE_OK):
                state = iterationState

    if (state == STATE_OK):
        msg = "All queues below thresholds.\n" + customMessage
    else:
        msg = "There are queues above thresholds.\n" + customMessage

    print(msg.strip())
    exit(state)

main()
